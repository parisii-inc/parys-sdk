/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace ILiquidationEngine {
  export type LiquidationEngineCollateralParamsStruct = {
    collateralAuctionHouse: AddressLike;
    liquidationPenalty: BigNumberish;
    liquidationQuantity: BigNumberish;
  };

  export type LiquidationEngineCollateralParamsStructOutput = [
    collateralAuctionHouse: string,
    liquidationPenalty: bigint,
    liquidationQuantity: bigint
  ] & {
    collateralAuctionHouse: string;
    liquidationPenalty: bigint;
    liquidationQuantity: bigint;
  };

  export type LiquidationEngineParamsStruct = {
    onAuctionSystemCoinLimit: BigNumberish;
    saviourGasLimit: BigNumberish;
  };

  export type LiquidationEngineParamsStructOutput = [
    onAuctionSystemCoinLimit: bigint,
    saviourGasLimit: bigint
  ] & { onAuctionSystemCoinLimit: bigint; saviourGasLimit: bigint };
}

export interface ILiquidationEngineInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "_cParams"
      | "_params"
      | "accountingEngine"
      | "addAuthorization"
      | "authorizedAccounts(address)"
      | "authorizedAccounts()"
      | "cParams"
      | "chosenSAFESaviour"
      | "collateralList"
      | "connectSAFESaviour"
      | "contractEnabled"
      | "currentOnAuctionSystemCoins"
      | "disableContract"
      | "disconnectSAFESaviour"
      | "getLimitAdjustedDebtToCover"
      | "initializeCollateralType"
      | "liquidateSAFE"
      | "modifyParameters(bytes32,bytes32,bytes)"
      | "modifyParameters(bytes32,bytes)"
      | "params"
      | "protectSAFE"
      | "removeAuthorization"
      | "removeCoinsFromAuction"
      | "safeEngine"
      | "safeSaviours"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AddAuthorization"
      | "ConnectSAFESaviour"
      | "DisableContract"
      | "DisconnectSAFESaviour"
      | "FailedSAFESave"
      | "InitializeCollateralType"
      | "Liquidate"
      | "ModifyParameters"
      | "ProtectSAFE"
      | "RemoveAuthorization"
      | "SaveSAFE"
      | "UpdateCurrentOnAuctionSystemCoins"
  ): EventFragment;

  encodeFunctionData(functionFragment: "_cParams", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "_params", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "accountingEngine",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addAuthorization",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "authorizedAccounts(address)",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "authorizedAccounts()",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "cParams", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "chosenSAFESaviour",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "collateralList",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "connectSAFESaviour",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "contractEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentOnAuctionSystemCoins",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "disableContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "disconnectSAFESaviour",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getLimitAdjustedDebtToCover",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initializeCollateralType",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidateSAFE",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "modifyParameters(bytes32,bytes32,bytes)",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "modifyParameters(bytes32,bytes)",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "params", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "protectSAFE",
    values: [BytesLike, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeAuthorization",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeCoinsFromAuction",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeEngine",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "safeSaviours",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "_cParams", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_params", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "accountingEngine",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addAuthorization",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "authorizedAccounts(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "authorizedAccounts()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "cParams", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "chosenSAFESaviour",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collateralList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "connectSAFESaviour",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contractEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentOnAuctionSystemCoins",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disableContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disconnectSAFESaviour",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLimitAdjustedDebtToCover",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initializeCollateralType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidateSAFE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "modifyParameters(bytes32,bytes32,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "modifyParameters(bytes32,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "params", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "protectSAFE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeAuthorization",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeCoinsFromAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "safeEngine", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "safeSaviours",
    data: BytesLike
  ): Result;
}

export namespace AddAuthorizationEvent {
  export type InputTuple = [_account: AddressLike];
  export type OutputTuple = [_account: string];
  export interface OutputObject {
    _account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ConnectSAFESaviourEvent {
  export type InputTuple = [_saviour: AddressLike];
  export type OutputTuple = [_saviour: string];
  export interface OutputObject {
    _saviour: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DisableContractEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DisconnectSAFESaviourEvent {
  export type InputTuple = [_saviour: AddressLike];
  export type OutputTuple = [_saviour: string];
  export interface OutputObject {
    _saviour: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FailedSAFESaveEvent {
  export type InputTuple = [_failReason: BytesLike];
  export type OutputTuple = [_failReason: string];
  export interface OutputObject {
    _failReason: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializeCollateralTypeEvent {
  export type InputTuple = [_cType: BytesLike];
  export type OutputTuple = [_cType: string];
  export interface OutputObject {
    _cType: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LiquidateEvent {
  export type InputTuple = [
    _cType: BytesLike,
    _safe: AddressLike,
    _collateralAmount: BigNumberish,
    _debtAmount: BigNumberish,
    _amountToRaise: BigNumberish,
    _collateralAuctioneer: AddressLike,
    _auctionId: BigNumberish
  ];
  export type OutputTuple = [
    _cType: string,
    _safe: string,
    _collateralAmount: bigint,
    _debtAmount: bigint,
    _amountToRaise: bigint,
    _collateralAuctioneer: string,
    _auctionId: bigint
  ];
  export interface OutputObject {
    _cType: string;
    _safe: string;
    _collateralAmount: bigint;
    _debtAmount: bigint;
    _amountToRaise: bigint;
    _collateralAuctioneer: string;
    _auctionId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ModifyParametersEvent {
  export type InputTuple = [
    _param: BytesLike,
    _cType: BytesLike,
    _data: BytesLike
  ];
  export type OutputTuple = [_param: string, _cType: string, _data: string];
  export interface OutputObject {
    _param: string;
    _cType: string;
    _data: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProtectSAFEEvent {
  export type InputTuple = [
    _cType: BytesLike,
    _safe: AddressLike,
    _saviour: AddressLike
  ];
  export type OutputTuple = [_cType: string, _safe: string, _saviour: string];
  export interface OutputObject {
    _cType: string;
    _safe: string;
    _saviour: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RemoveAuthorizationEvent {
  export type InputTuple = [_account: AddressLike];
  export type OutputTuple = [_account: string];
  export interface OutputObject {
    _account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SaveSAFEEvent {
  export type InputTuple = [
    _cType: BytesLike,
    _safe: AddressLike,
    _collateralAddedOrDebtRepaid: BigNumberish
  ];
  export type OutputTuple = [
    _cType: string,
    _safe: string,
    _collateralAddedOrDebtRepaid: bigint
  ];
  export interface OutputObject {
    _cType: string;
    _safe: string;
    _collateralAddedOrDebtRepaid: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdateCurrentOnAuctionSystemCoinsEvent {
  export type InputTuple = [_currentOnAuctionSystemCoins: BigNumberish];
  export type OutputTuple = [_currentOnAuctionSystemCoins: bigint];
  export interface OutputObject {
    _currentOnAuctionSystemCoins: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ILiquidationEngine extends BaseContract {
  connect(runner?: ContractRunner | null): ILiquidationEngine;
  waitForDeployment(): Promise<this>;

  interface: ILiquidationEngineInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  _cParams: TypedContractMethod<
    [_cType: BytesLike],
    [
      [string, bigint, bigint] & {
        _collateralAuctionHouse: string;
        _liquidationPenalty: bigint;
        _liquidationQuantity: bigint;
      }
    ],
    "view"
  >;

  _params: TypedContractMethod<
    [],
    [
      [bigint, bigint] & {
        _onAuctionSystemCoinLimit: bigint;
        _saviourGasLimit: bigint;
      }
    ],
    "view"
  >;

  accountingEngine: TypedContractMethod<[], [string], "view">;

  addAuthorization: TypedContractMethod<
    [_account: AddressLike],
    [void],
    "nonpayable"
  >;

  "authorizedAccounts(address)": TypedContractMethod<
    [_account: AddressLike],
    [boolean],
    "view"
  >;

  "authorizedAccounts()": TypedContractMethod<[], [string[]], "view">;

  cParams: TypedContractMethod<
    [_cType: BytesLike],
    [ILiquidationEngine.LiquidationEngineCollateralParamsStructOutput],
    "view"
  >;

  chosenSAFESaviour: TypedContractMethod<
    [_cType: BytesLike, _safe: AddressLike],
    [string],
    "view"
  >;

  collateralList: TypedContractMethod<[], [string[]], "view">;

  connectSAFESaviour: TypedContractMethod<
    [_saviour: AddressLike],
    [void],
    "nonpayable"
  >;

  contractEnabled: TypedContractMethod<[], [boolean], "view">;

  currentOnAuctionSystemCoins: TypedContractMethod<[], [bigint], "view">;

  disableContract: TypedContractMethod<[], [void], "nonpayable">;

  disconnectSAFESaviour: TypedContractMethod<
    [_saviour: AddressLike],
    [void],
    "nonpayable"
  >;

  getLimitAdjustedDebtToCover: TypedContractMethod<
    [_cType: BytesLike, _safe: AddressLike],
    [bigint],
    "view"
  >;

  initializeCollateralType: TypedContractMethod<
    [_cType: BytesLike, _collateralParams: BytesLike],
    [void],
    "nonpayable"
  >;

  liquidateSAFE: TypedContractMethod<
    [_cType: BytesLike, _safe: AddressLike],
    [bigint],
    "nonpayable"
  >;

  "modifyParameters(bytes32,bytes32,bytes)": TypedContractMethod<
    [_cType: BytesLike, _param: BytesLike, _data: BytesLike],
    [void],
    "nonpayable"
  >;

  "modifyParameters(bytes32,bytes)": TypedContractMethod<
    [_param: BytesLike, _data: BytesLike],
    [void],
    "nonpayable"
  >;

  params: TypedContractMethod<
    [],
    [ILiquidationEngine.LiquidationEngineParamsStructOutput],
    "view"
  >;

  protectSAFE: TypedContractMethod<
    [_cType: BytesLike, _safe: AddressLike, _saviour: AddressLike],
    [void],
    "nonpayable"
  >;

  removeAuthorization: TypedContractMethod<
    [_account: AddressLike],
    [void],
    "nonpayable"
  >;

  removeCoinsFromAuction: TypedContractMethod<
    [_rad: BigNumberish],
    [void],
    "nonpayable"
  >;

  safeEngine: TypedContractMethod<[], [string], "view">;

  safeSaviours: TypedContractMethod<[_saviour: AddressLike], [boolean], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "_cParams"
  ): TypedContractMethod<
    [_cType: BytesLike],
    [
      [string, bigint, bigint] & {
        _collateralAuctionHouse: string;
        _liquidationPenalty: bigint;
        _liquidationQuantity: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "_params"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint] & {
        _onAuctionSystemCoinLimit: bigint;
        _saviourGasLimit: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "accountingEngine"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "addAuthorization"
  ): TypedContractMethod<[_account: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "authorizedAccounts(address)"
  ): TypedContractMethod<[_account: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "authorizedAccounts()"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "cParams"
  ): TypedContractMethod<
    [_cType: BytesLike],
    [ILiquidationEngine.LiquidationEngineCollateralParamsStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "chosenSAFESaviour"
  ): TypedContractMethod<
    [_cType: BytesLike, _safe: AddressLike],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "collateralList"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "connectSAFESaviour"
  ): TypedContractMethod<[_saviour: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "contractEnabled"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "currentOnAuctionSystemCoins"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "disableContract"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "disconnectSAFESaviour"
  ): TypedContractMethod<[_saviour: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getLimitAdjustedDebtToCover"
  ): TypedContractMethod<
    [_cType: BytesLike, _safe: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "initializeCollateralType"
  ): TypedContractMethod<
    [_cType: BytesLike, _collateralParams: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "liquidateSAFE"
  ): TypedContractMethod<
    [_cType: BytesLike, _safe: AddressLike],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "modifyParameters(bytes32,bytes32,bytes)"
  ): TypedContractMethod<
    [_cType: BytesLike, _param: BytesLike, _data: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "modifyParameters(bytes32,bytes)"
  ): TypedContractMethod<
    [_param: BytesLike, _data: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "params"
  ): TypedContractMethod<
    [],
    [ILiquidationEngine.LiquidationEngineParamsStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "protectSAFE"
  ): TypedContractMethod<
    [_cType: BytesLike, _safe: AddressLike, _saviour: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "removeAuthorization"
  ): TypedContractMethod<[_account: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "removeCoinsFromAuction"
  ): TypedContractMethod<[_rad: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "safeEngine"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "safeSaviours"
  ): TypedContractMethod<[_saviour: AddressLike], [boolean], "view">;

  getEvent(
    key: "AddAuthorization"
  ): TypedContractEvent<
    AddAuthorizationEvent.InputTuple,
    AddAuthorizationEvent.OutputTuple,
    AddAuthorizationEvent.OutputObject
  >;
  getEvent(
    key: "ConnectSAFESaviour"
  ): TypedContractEvent<
    ConnectSAFESaviourEvent.InputTuple,
    ConnectSAFESaviourEvent.OutputTuple,
    ConnectSAFESaviourEvent.OutputObject
  >;
  getEvent(
    key: "DisableContract"
  ): TypedContractEvent<
    DisableContractEvent.InputTuple,
    DisableContractEvent.OutputTuple,
    DisableContractEvent.OutputObject
  >;
  getEvent(
    key: "DisconnectSAFESaviour"
  ): TypedContractEvent<
    DisconnectSAFESaviourEvent.InputTuple,
    DisconnectSAFESaviourEvent.OutputTuple,
    DisconnectSAFESaviourEvent.OutputObject
  >;
  getEvent(
    key: "FailedSAFESave"
  ): TypedContractEvent<
    FailedSAFESaveEvent.InputTuple,
    FailedSAFESaveEvent.OutputTuple,
    FailedSAFESaveEvent.OutputObject
  >;
  getEvent(
    key: "InitializeCollateralType"
  ): TypedContractEvent<
    InitializeCollateralTypeEvent.InputTuple,
    InitializeCollateralTypeEvent.OutputTuple,
    InitializeCollateralTypeEvent.OutputObject
  >;
  getEvent(
    key: "Liquidate"
  ): TypedContractEvent<
    LiquidateEvent.InputTuple,
    LiquidateEvent.OutputTuple,
    LiquidateEvent.OutputObject
  >;
  getEvent(
    key: "ModifyParameters"
  ): TypedContractEvent<
    ModifyParametersEvent.InputTuple,
    ModifyParametersEvent.OutputTuple,
    ModifyParametersEvent.OutputObject
  >;
  getEvent(
    key: "ProtectSAFE"
  ): TypedContractEvent<
    ProtectSAFEEvent.InputTuple,
    ProtectSAFEEvent.OutputTuple,
    ProtectSAFEEvent.OutputObject
  >;
  getEvent(
    key: "RemoveAuthorization"
  ): TypedContractEvent<
    RemoveAuthorizationEvent.InputTuple,
    RemoveAuthorizationEvent.OutputTuple,
    RemoveAuthorizationEvent.OutputObject
  >;
  getEvent(
    key: "SaveSAFE"
  ): TypedContractEvent<
    SaveSAFEEvent.InputTuple,
    SaveSAFEEvent.OutputTuple,
    SaveSAFEEvent.OutputObject
  >;
  getEvent(
    key: "UpdateCurrentOnAuctionSystemCoins"
  ): TypedContractEvent<
    UpdateCurrentOnAuctionSystemCoinsEvent.InputTuple,
    UpdateCurrentOnAuctionSystemCoinsEvent.OutputTuple,
    UpdateCurrentOnAuctionSystemCoinsEvent.OutputObject
  >;

  filters: {
    "AddAuthorization(address)": TypedContractEvent<
      AddAuthorizationEvent.InputTuple,
      AddAuthorizationEvent.OutputTuple,
      AddAuthorizationEvent.OutputObject
    >;
    AddAuthorization: TypedContractEvent<
      AddAuthorizationEvent.InputTuple,
      AddAuthorizationEvent.OutputTuple,
      AddAuthorizationEvent.OutputObject
    >;

    "ConnectSAFESaviour(address)": TypedContractEvent<
      ConnectSAFESaviourEvent.InputTuple,
      ConnectSAFESaviourEvent.OutputTuple,
      ConnectSAFESaviourEvent.OutputObject
    >;
    ConnectSAFESaviour: TypedContractEvent<
      ConnectSAFESaviourEvent.InputTuple,
      ConnectSAFESaviourEvent.OutputTuple,
      ConnectSAFESaviourEvent.OutputObject
    >;

    "DisableContract()": TypedContractEvent<
      DisableContractEvent.InputTuple,
      DisableContractEvent.OutputTuple,
      DisableContractEvent.OutputObject
    >;
    DisableContract: TypedContractEvent<
      DisableContractEvent.InputTuple,
      DisableContractEvent.OutputTuple,
      DisableContractEvent.OutputObject
    >;

    "DisconnectSAFESaviour(address)": TypedContractEvent<
      DisconnectSAFESaviourEvent.InputTuple,
      DisconnectSAFESaviourEvent.OutputTuple,
      DisconnectSAFESaviourEvent.OutputObject
    >;
    DisconnectSAFESaviour: TypedContractEvent<
      DisconnectSAFESaviourEvent.InputTuple,
      DisconnectSAFESaviourEvent.OutputTuple,
      DisconnectSAFESaviourEvent.OutputObject
    >;

    "FailedSAFESave(bytes)": TypedContractEvent<
      FailedSAFESaveEvent.InputTuple,
      FailedSAFESaveEvent.OutputTuple,
      FailedSAFESaveEvent.OutputObject
    >;
    FailedSAFESave: TypedContractEvent<
      FailedSAFESaveEvent.InputTuple,
      FailedSAFESaveEvent.OutputTuple,
      FailedSAFESaveEvent.OutputObject
    >;

    "InitializeCollateralType(bytes32)": TypedContractEvent<
      InitializeCollateralTypeEvent.InputTuple,
      InitializeCollateralTypeEvent.OutputTuple,
      InitializeCollateralTypeEvent.OutputObject
    >;
    InitializeCollateralType: TypedContractEvent<
      InitializeCollateralTypeEvent.InputTuple,
      InitializeCollateralTypeEvent.OutputTuple,
      InitializeCollateralTypeEvent.OutputObject
    >;

    "Liquidate(bytes32,address,uint256,uint256,uint256,address,uint256)": TypedContractEvent<
      LiquidateEvent.InputTuple,
      LiquidateEvent.OutputTuple,
      LiquidateEvent.OutputObject
    >;
    Liquidate: TypedContractEvent<
      LiquidateEvent.InputTuple,
      LiquidateEvent.OutputTuple,
      LiquidateEvent.OutputObject
    >;

    "ModifyParameters(bytes32,bytes32,bytes)": TypedContractEvent<
      ModifyParametersEvent.InputTuple,
      ModifyParametersEvent.OutputTuple,
      ModifyParametersEvent.OutputObject
    >;
    ModifyParameters: TypedContractEvent<
      ModifyParametersEvent.InputTuple,
      ModifyParametersEvent.OutputTuple,
      ModifyParametersEvent.OutputObject
    >;

    "ProtectSAFE(bytes32,address,address)": TypedContractEvent<
      ProtectSAFEEvent.InputTuple,
      ProtectSAFEEvent.OutputTuple,
      ProtectSAFEEvent.OutputObject
    >;
    ProtectSAFE: TypedContractEvent<
      ProtectSAFEEvent.InputTuple,
      ProtectSAFEEvent.OutputTuple,
      ProtectSAFEEvent.OutputObject
    >;

    "RemoveAuthorization(address)": TypedContractEvent<
      RemoveAuthorizationEvent.InputTuple,
      RemoveAuthorizationEvent.OutputTuple,
      RemoveAuthorizationEvent.OutputObject
    >;
    RemoveAuthorization: TypedContractEvent<
      RemoveAuthorizationEvent.InputTuple,
      RemoveAuthorizationEvent.OutputTuple,
      RemoveAuthorizationEvent.OutputObject
    >;

    "SaveSAFE(bytes32,address,uint256)": TypedContractEvent<
      SaveSAFEEvent.InputTuple,
      SaveSAFEEvent.OutputTuple,
      SaveSAFEEvent.OutputObject
    >;
    SaveSAFE: TypedContractEvent<
      SaveSAFEEvent.InputTuple,
      SaveSAFEEvent.OutputTuple,
      SaveSAFEEvent.OutputObject
    >;

    "UpdateCurrentOnAuctionSystemCoins(uint256)": TypedContractEvent<
      UpdateCurrentOnAuctionSystemCoinsEvent.InputTuple,
      UpdateCurrentOnAuctionSystemCoinsEvent.OutputTuple,
      UpdateCurrentOnAuctionSystemCoinsEvent.OutputObject
    >;
    UpdateCurrentOnAuctionSystemCoins: TypedContractEvent<
      UpdateCurrentOnAuctionSystemCoinsEvent.InputTuple,
      UpdateCurrentOnAuctionSystemCoinsEvent.OutputTuple,
      UpdateCurrentOnAuctionSystemCoinsEvent.OutputObject
    >;
  };
}
