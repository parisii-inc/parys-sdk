/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace ISAFEEngine {
  export type SAFEEngineCollateralDataStruct = {
    debtAmount: BigNumberish;
    lockedAmount: BigNumberish;
    accumulatedRate: BigNumberish;
    safetyPrice: BigNumberish;
    liquidationPrice: BigNumberish;
  };

  export type SAFEEngineCollateralDataStructOutput = [
    debtAmount: bigint,
    lockedAmount: bigint,
    accumulatedRate: bigint,
    safetyPrice: bigint,
    liquidationPrice: bigint
  ] & {
    debtAmount: bigint;
    lockedAmount: bigint;
    accumulatedRate: bigint;
    safetyPrice: bigint;
    liquidationPrice: bigint;
  };

  export type SAFEEngineCollateralParamsStruct = {
    debtCeiling: BigNumberish;
    debtFloor: BigNumberish;
  };

  export type SAFEEngineCollateralParamsStructOutput = [
    debtCeiling: bigint,
    debtFloor: bigint
  ] & { debtCeiling: bigint; debtFloor: bigint };

  export type SAFEEngineParamsStruct = {
    safeDebtCeiling: BigNumberish;
    globalDebtCeiling: BigNumberish;
  };

  export type SAFEEngineParamsStructOutput = [
    safeDebtCeiling: bigint,
    globalDebtCeiling: bigint
  ] & { safeDebtCeiling: bigint; globalDebtCeiling: bigint };

  export type SAFEStruct = {
    lockedCollateral: BigNumberish;
    generatedDebt: BigNumberish;
  };

  export type SAFEStructOutput = [
    lockedCollateral: bigint,
    generatedDebt: bigint
  ] & { lockedCollateral: bigint; generatedDebt: bigint };
}

export interface ISAFEEngineInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "_cData"
      | "_cParams"
      | "_params"
      | "_safes"
      | "addAuthorization"
      | "approveSAFEModification"
      | "authorizedAccounts(address)"
      | "authorizedAccounts()"
      | "cData"
      | "cParams"
      | "canModifySAFE"
      | "coinBalance"
      | "collateralList"
      | "confiscateSAFECollateralAndDebt"
      | "contractEnabled"
      | "createUnbackedDebt"
      | "debtBalance"
      | "denySAFEModification"
      | "disableContract"
      | "globalDebt"
      | "globalUnbackedDebt"
      | "initializeCollateralType"
      | "modifyCollateralBalance"
      | "modifyParameters(bytes32,bytes32,bytes)"
      | "modifyParameters(bytes32,bytes)"
      | "modifySAFECollateralization"
      | "params"
      | "removeAuthorization"
      | "safeRights"
      | "safes"
      | "settleDebt"
      | "tokenCollateral"
      | "transferCollateral"
      | "transferInternalCoins"
      | "transferSAFECollateralAndDebt"
      | "updateAccumulatedRate"
      | "updateCollateralPrice"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AddAuthorization"
      | "ApproveSAFEModification"
      | "ConfiscateSAFECollateralAndDebt"
      | "CreateUnbackedDebt"
      | "DenySAFEModification"
      | "DisableContract"
      | "InitializeCollateralType"
      | "ModifyParameters"
      | "ModifySAFECollateralization"
      | "RemoveAuthorization"
      | "SettleDebt"
      | "TransferCollateral"
      | "TransferInternalCoins"
      | "TransferSAFECollateralAndDebt"
      | "UpdateAccumulatedRate"
      | "UpdateCollateralPrice"
  ): EventFragment;

  encodeFunctionData(functionFragment: "_cData", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "_cParams", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "_params", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "_safes",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "addAuthorization",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "approveSAFEModification",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "authorizedAccounts(address)",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "authorizedAccounts()",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "cData", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "cParams", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "canModifySAFE",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "coinBalance",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "collateralList",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "confiscateSAFECollateralAndDebt",
    values: [
      BytesLike,
      AddressLike,
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "contractEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createUnbackedDebt",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "debtBalance",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "denySAFEModification",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "disableContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "globalDebt",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "globalUnbackedDebt",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initializeCollateralType",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "modifyCollateralBalance",
    values: [BytesLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "modifyParameters(bytes32,bytes32,bytes)",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "modifyParameters(bytes32,bytes)",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "modifySAFECollateralization",
    values: [
      BytesLike,
      AddressLike,
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(functionFragment: "params", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeAuthorization",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "safeRights",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "safes",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "settleDebt",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenCollateral",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferCollateral",
    values: [BytesLike, AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferInternalCoins",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferSAFECollateralAndDebt",
    values: [BytesLike, AddressLike, AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateAccumulatedRate",
    values: [BytesLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateCollateralPrice",
    values: [BytesLike, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "_cData", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_cParams", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_params", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_safes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addAuthorization",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approveSAFEModification",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "authorizedAccounts(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "authorizedAccounts()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "cData", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cParams", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "canModifySAFE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "coinBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collateralList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "confiscateSAFECollateralAndDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contractEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createUnbackedDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "debtBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "denySAFEModification",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disableContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "globalDebt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "globalUnbackedDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initializeCollateralType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "modifyCollateralBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "modifyParameters(bytes32,bytes32,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "modifyParameters(bytes32,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "modifySAFECollateralization",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "params", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeAuthorization",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "safeRights", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "safes", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "settleDebt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferInternalCoins",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferSAFECollateralAndDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateAccumulatedRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateCollateralPrice",
    data: BytesLike
  ): Result;
}

export namespace AddAuthorizationEvent {
  export type InputTuple = [_account: AddressLike];
  export type OutputTuple = [_account: string];
  export interface OutputObject {
    _account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ApproveSAFEModificationEvent {
  export type InputTuple = [_sender: AddressLike, _account: AddressLike];
  export type OutputTuple = [_sender: string, _account: string];
  export interface OutputObject {
    _sender: string;
    _account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ConfiscateSAFECollateralAndDebtEvent {
  export type InputTuple = [
    _cType: BytesLike,
    _safe: AddressLike,
    _collateralSource: AddressLike,
    _debtDestination: AddressLike,
    _deltaCollateral: BigNumberish,
    _deltaDebt: BigNumberish
  ];
  export type OutputTuple = [
    _cType: string,
    _safe: string,
    _collateralSource: string,
    _debtDestination: string,
    _deltaCollateral: bigint,
    _deltaDebt: bigint
  ];
  export interface OutputObject {
    _cType: string;
    _safe: string;
    _collateralSource: string;
    _debtDestination: string;
    _deltaCollateral: bigint;
    _deltaDebt: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CreateUnbackedDebtEvent {
  export type InputTuple = [
    _debtDestination: AddressLike,
    _coinDestination: AddressLike,
    _rad: BigNumberish
  ];
  export type OutputTuple = [
    _debtDestination: string,
    _coinDestination: string,
    _rad: bigint
  ];
  export interface OutputObject {
    _debtDestination: string;
    _coinDestination: string;
    _rad: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DenySAFEModificationEvent {
  export type InputTuple = [_sender: AddressLike, _account: AddressLike];
  export type OutputTuple = [_sender: string, _account: string];
  export interface OutputObject {
    _sender: string;
    _account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DisableContractEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializeCollateralTypeEvent {
  export type InputTuple = [_cType: BytesLike];
  export type OutputTuple = [_cType: string];
  export interface OutputObject {
    _cType: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ModifyParametersEvent {
  export type InputTuple = [
    _param: BytesLike,
    _cType: BytesLike,
    _data: BytesLike
  ];
  export type OutputTuple = [_param: string, _cType: string, _data: string];
  export interface OutputObject {
    _param: string;
    _cType: string;
    _data: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ModifySAFECollateralizationEvent {
  export type InputTuple = [
    _cType: BytesLike,
    _safe: AddressLike,
    _collateralSource: AddressLike,
    _debtDestination: AddressLike,
    _deltaCollateral: BigNumberish,
    _deltaDebt: BigNumberish
  ];
  export type OutputTuple = [
    _cType: string,
    _safe: string,
    _collateralSource: string,
    _debtDestination: string,
    _deltaCollateral: bigint,
    _deltaDebt: bigint
  ];
  export interface OutputObject {
    _cType: string;
    _safe: string;
    _collateralSource: string;
    _debtDestination: string;
    _deltaCollateral: bigint;
    _deltaDebt: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RemoveAuthorizationEvent {
  export type InputTuple = [_account: AddressLike];
  export type OutputTuple = [_account: string];
  export interface OutputObject {
    _account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SettleDebtEvent {
  export type InputTuple = [_account: AddressLike, _rad: BigNumberish];
  export type OutputTuple = [_account: string, _rad: bigint];
  export interface OutputObject {
    _account: string;
    _rad: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferCollateralEvent {
  export type InputTuple = [
    _cType: BytesLike,
    _src: AddressLike,
    _dst: AddressLike,
    _wad: BigNumberish
  ];
  export type OutputTuple = [
    _cType: string,
    _src: string,
    _dst: string,
    _wad: bigint
  ];
  export interface OutputObject {
    _cType: string;
    _src: string;
    _dst: string;
    _wad: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferInternalCoinsEvent {
  export type InputTuple = [
    _src: AddressLike,
    _dst: AddressLike,
    _rad: BigNumberish
  ];
  export type OutputTuple = [_src: string, _dst: string, _rad: bigint];
  export interface OutputObject {
    _src: string;
    _dst: string;
    _rad: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferSAFECollateralAndDebtEvent {
  export type InputTuple = [
    _cType: BytesLike,
    _src: AddressLike,
    _dst: AddressLike,
    _deltaCollateral: BigNumberish,
    _deltaDebt: BigNumberish
  ];
  export type OutputTuple = [
    _cType: string,
    _src: string,
    _dst: string,
    _deltaCollateral: bigint,
    _deltaDebt: bigint
  ];
  export interface OutputObject {
    _cType: string;
    _src: string;
    _dst: string;
    _deltaCollateral: bigint;
    _deltaDebt: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdateAccumulatedRateEvent {
  export type InputTuple = [
    _cType: BytesLike,
    _surplusDst: AddressLike,
    _rateMultiplier: BigNumberish
  ];
  export type OutputTuple = [
    _cType: string,
    _surplusDst: string,
    _rateMultiplier: bigint
  ];
  export interface OutputObject {
    _cType: string;
    _surplusDst: string;
    _rateMultiplier: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdateCollateralPriceEvent {
  export type InputTuple = [
    _cType: BytesLike,
    _safetyPrice: BigNumberish,
    _liquidationPrice: BigNumberish
  ];
  export type OutputTuple = [
    _cType: string,
    _safetyPrice: bigint,
    _liquidationPrice: bigint
  ];
  export interface OutputObject {
    _cType: string;
    _safetyPrice: bigint;
    _liquidationPrice: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ISAFEEngine extends BaseContract {
  connect(runner?: ContractRunner | null): ISAFEEngine;
  waitForDeployment(): Promise<this>;

  interface: ISAFEEngineInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  _cData: TypedContractMethod<
    [_cType: BytesLike],
    [
      [bigint, bigint, bigint, bigint, bigint] & {
        _debtAmount: bigint;
        _lockedAmount: bigint;
        _accumulatedRate: bigint;
        _safetyPrice: bigint;
        _liquidationPrice: bigint;
      }
    ],
    "view"
  >;

  _cParams: TypedContractMethod<
    [_cType: BytesLike],
    [[bigint, bigint] & { _debtCeiling: bigint; _debtFloor: bigint }],
    "view"
  >;

  _params: TypedContractMethod<
    [],
    [
      [bigint, bigint] & {
        _safeDebtCeiling: bigint;
        _globalDebtCeiling: bigint;
      }
    ],
    "view"
  >;

  _safes: TypedContractMethod<
    [_cType: BytesLike, _safeAddress: AddressLike],
    [[bigint, bigint] & { _lockedCollateral: bigint; _generatedDebt: bigint }],
    "view"
  >;

  addAuthorization: TypedContractMethod<
    [_account: AddressLike],
    [void],
    "nonpayable"
  >;

  approveSAFEModification: TypedContractMethod<
    [_account: AddressLike],
    [void],
    "nonpayable"
  >;

  "authorizedAccounts(address)": TypedContractMethod<
    [_account: AddressLike],
    [boolean],
    "view"
  >;

  "authorizedAccounts()": TypedContractMethod<[], [string[]], "view">;

  cData: TypedContractMethod<
    [_cType: BytesLike],
    [ISAFEEngine.SAFEEngineCollateralDataStructOutput],
    "view"
  >;

  cParams: TypedContractMethod<
    [_cType: BytesLike],
    [ISAFEEngine.SAFEEngineCollateralParamsStructOutput],
    "view"
  >;

  canModifySAFE: TypedContractMethod<
    [_safe: AddressLike, _account: AddressLike],
    [boolean],
    "view"
  >;

  coinBalance: TypedContractMethod<[_account: AddressLike], [bigint], "view">;

  collateralList: TypedContractMethod<[], [string[]], "view">;

  confiscateSAFECollateralAndDebt: TypedContractMethod<
    [
      _cType: BytesLike,
      _safe: AddressLike,
      _collateralSource: AddressLike,
      _debtDestination: AddressLike,
      _deltaCollateral: BigNumberish,
      _deltaDebt: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  contractEnabled: TypedContractMethod<[], [boolean], "view">;

  createUnbackedDebt: TypedContractMethod<
    [
      _debtDestination: AddressLike,
      _coinDestination: AddressLike,
      _rad: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  debtBalance: TypedContractMethod<[_account: AddressLike], [bigint], "view">;

  denySAFEModification: TypedContractMethod<
    [_account: AddressLike],
    [void],
    "nonpayable"
  >;

  disableContract: TypedContractMethod<[], [void], "nonpayable">;

  globalDebt: TypedContractMethod<[], [bigint], "nonpayable">;

  globalUnbackedDebt: TypedContractMethod<[], [bigint], "view">;

  initializeCollateralType: TypedContractMethod<
    [_cType: BytesLike, _collateralParams: BytesLike],
    [void],
    "nonpayable"
  >;

  modifyCollateralBalance: TypedContractMethod<
    [_cType: BytesLike, _account: AddressLike, _wad: BigNumberish],
    [void],
    "nonpayable"
  >;

  "modifyParameters(bytes32,bytes32,bytes)": TypedContractMethod<
    [_cType: BytesLike, _param: BytesLike, _data: BytesLike],
    [void],
    "nonpayable"
  >;

  "modifyParameters(bytes32,bytes)": TypedContractMethod<
    [_param: BytesLike, _data: BytesLike],
    [void],
    "nonpayable"
  >;

  modifySAFECollateralization: TypedContractMethod<
    [
      _cType: BytesLike,
      _safe: AddressLike,
      _collateralSource: AddressLike,
      _debtDestination: AddressLike,
      _deltaCollateral: BigNumberish,
      _deltaDebt: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  params: TypedContractMethod<
    [],
    [ISAFEEngine.SAFEEngineParamsStructOutput],
    "view"
  >;

  removeAuthorization: TypedContractMethod<
    [_account: AddressLike],
    [void],
    "nonpayable"
  >;

  safeRights: TypedContractMethod<
    [_caller: AddressLike, _account: AddressLike],
    [boolean],
    "view"
  >;

  safes: TypedContractMethod<
    [_cType: BytesLike, _safeAddress: AddressLike],
    [ISAFEEngine.SAFEStructOutput],
    "view"
  >;

  settleDebt: TypedContractMethod<[_rad: BigNumberish], [void], "nonpayable">;

  tokenCollateral: TypedContractMethod<
    [_cType: BytesLike, _account: AddressLike],
    [bigint],
    "view"
  >;

  transferCollateral: TypedContractMethod<
    [
      _cType: BytesLike,
      _source: AddressLike,
      _destination: AddressLike,
      _wad: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  transferInternalCoins: TypedContractMethod<
    [_source: AddressLike, _destination: AddressLike, _rad: BigNumberish],
    [void],
    "nonpayable"
  >;

  transferSAFECollateralAndDebt: TypedContractMethod<
    [
      _cType: BytesLike,
      _src: AddressLike,
      _dst: AddressLike,
      _deltaCollateral: BigNumberish,
      _deltaDebt: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  updateAccumulatedRate: TypedContractMethod<
    [
      _cType: BytesLike,
      _surplusDst: AddressLike,
      _rateMultiplier: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  updateCollateralPrice: TypedContractMethod<
    [
      _cType: BytesLike,
      _safetyPrice: BigNumberish,
      _liquidationPrice: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "_cData"
  ): TypedContractMethod<
    [_cType: BytesLike],
    [
      [bigint, bigint, bigint, bigint, bigint] & {
        _debtAmount: bigint;
        _lockedAmount: bigint;
        _accumulatedRate: bigint;
        _safetyPrice: bigint;
        _liquidationPrice: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "_cParams"
  ): TypedContractMethod<
    [_cType: BytesLike],
    [[bigint, bigint] & { _debtCeiling: bigint; _debtFloor: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "_params"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint] & {
        _safeDebtCeiling: bigint;
        _globalDebtCeiling: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "_safes"
  ): TypedContractMethod<
    [_cType: BytesLike, _safeAddress: AddressLike],
    [[bigint, bigint] & { _lockedCollateral: bigint; _generatedDebt: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "addAuthorization"
  ): TypedContractMethod<[_account: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "approveSAFEModification"
  ): TypedContractMethod<[_account: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "authorizedAccounts(address)"
  ): TypedContractMethod<[_account: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "authorizedAccounts()"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "cData"
  ): TypedContractMethod<
    [_cType: BytesLike],
    [ISAFEEngine.SAFEEngineCollateralDataStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "cParams"
  ): TypedContractMethod<
    [_cType: BytesLike],
    [ISAFEEngine.SAFEEngineCollateralParamsStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "canModifySAFE"
  ): TypedContractMethod<
    [_safe: AddressLike, _account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "coinBalance"
  ): TypedContractMethod<[_account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "collateralList"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "confiscateSAFECollateralAndDebt"
  ): TypedContractMethod<
    [
      _cType: BytesLike,
      _safe: AddressLike,
      _collateralSource: AddressLike,
      _debtDestination: AddressLike,
      _deltaCollateral: BigNumberish,
      _deltaDebt: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "contractEnabled"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "createUnbackedDebt"
  ): TypedContractMethod<
    [
      _debtDestination: AddressLike,
      _coinDestination: AddressLike,
      _rad: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "debtBalance"
  ): TypedContractMethod<[_account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "denySAFEModification"
  ): TypedContractMethod<[_account: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "disableContract"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "globalDebt"
  ): TypedContractMethod<[], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "globalUnbackedDebt"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "initializeCollateralType"
  ): TypedContractMethod<
    [_cType: BytesLike, _collateralParams: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "modifyCollateralBalance"
  ): TypedContractMethod<
    [_cType: BytesLike, _account: AddressLike, _wad: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "modifyParameters(bytes32,bytes32,bytes)"
  ): TypedContractMethod<
    [_cType: BytesLike, _param: BytesLike, _data: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "modifyParameters(bytes32,bytes)"
  ): TypedContractMethod<
    [_param: BytesLike, _data: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "modifySAFECollateralization"
  ): TypedContractMethod<
    [
      _cType: BytesLike,
      _safe: AddressLike,
      _collateralSource: AddressLike,
      _debtDestination: AddressLike,
      _deltaCollateral: BigNumberish,
      _deltaDebt: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "params"
  ): TypedContractMethod<
    [],
    [ISAFEEngine.SAFEEngineParamsStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "removeAuthorization"
  ): TypedContractMethod<[_account: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "safeRights"
  ): TypedContractMethod<
    [_caller: AddressLike, _account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "safes"
  ): TypedContractMethod<
    [_cType: BytesLike, _safeAddress: AddressLike],
    [ISAFEEngine.SAFEStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "settleDebt"
  ): TypedContractMethod<[_rad: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "tokenCollateral"
  ): TypedContractMethod<
    [_cType: BytesLike, _account: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "transferCollateral"
  ): TypedContractMethod<
    [
      _cType: BytesLike,
      _source: AddressLike,
      _destination: AddressLike,
      _wad: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferInternalCoins"
  ): TypedContractMethod<
    [_source: AddressLike, _destination: AddressLike, _rad: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferSAFECollateralAndDebt"
  ): TypedContractMethod<
    [
      _cType: BytesLike,
      _src: AddressLike,
      _dst: AddressLike,
      _deltaCollateral: BigNumberish,
      _deltaDebt: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateAccumulatedRate"
  ): TypedContractMethod<
    [
      _cType: BytesLike,
      _surplusDst: AddressLike,
      _rateMultiplier: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateCollateralPrice"
  ): TypedContractMethod<
    [
      _cType: BytesLike,
      _safetyPrice: BigNumberish,
      _liquidationPrice: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "AddAuthorization"
  ): TypedContractEvent<
    AddAuthorizationEvent.InputTuple,
    AddAuthorizationEvent.OutputTuple,
    AddAuthorizationEvent.OutputObject
  >;
  getEvent(
    key: "ApproveSAFEModification"
  ): TypedContractEvent<
    ApproveSAFEModificationEvent.InputTuple,
    ApproveSAFEModificationEvent.OutputTuple,
    ApproveSAFEModificationEvent.OutputObject
  >;
  getEvent(
    key: "ConfiscateSAFECollateralAndDebt"
  ): TypedContractEvent<
    ConfiscateSAFECollateralAndDebtEvent.InputTuple,
    ConfiscateSAFECollateralAndDebtEvent.OutputTuple,
    ConfiscateSAFECollateralAndDebtEvent.OutputObject
  >;
  getEvent(
    key: "CreateUnbackedDebt"
  ): TypedContractEvent<
    CreateUnbackedDebtEvent.InputTuple,
    CreateUnbackedDebtEvent.OutputTuple,
    CreateUnbackedDebtEvent.OutputObject
  >;
  getEvent(
    key: "DenySAFEModification"
  ): TypedContractEvent<
    DenySAFEModificationEvent.InputTuple,
    DenySAFEModificationEvent.OutputTuple,
    DenySAFEModificationEvent.OutputObject
  >;
  getEvent(
    key: "DisableContract"
  ): TypedContractEvent<
    DisableContractEvent.InputTuple,
    DisableContractEvent.OutputTuple,
    DisableContractEvent.OutputObject
  >;
  getEvent(
    key: "InitializeCollateralType"
  ): TypedContractEvent<
    InitializeCollateralTypeEvent.InputTuple,
    InitializeCollateralTypeEvent.OutputTuple,
    InitializeCollateralTypeEvent.OutputObject
  >;
  getEvent(
    key: "ModifyParameters"
  ): TypedContractEvent<
    ModifyParametersEvent.InputTuple,
    ModifyParametersEvent.OutputTuple,
    ModifyParametersEvent.OutputObject
  >;
  getEvent(
    key: "ModifySAFECollateralization"
  ): TypedContractEvent<
    ModifySAFECollateralizationEvent.InputTuple,
    ModifySAFECollateralizationEvent.OutputTuple,
    ModifySAFECollateralizationEvent.OutputObject
  >;
  getEvent(
    key: "RemoveAuthorization"
  ): TypedContractEvent<
    RemoveAuthorizationEvent.InputTuple,
    RemoveAuthorizationEvent.OutputTuple,
    RemoveAuthorizationEvent.OutputObject
  >;
  getEvent(
    key: "SettleDebt"
  ): TypedContractEvent<
    SettleDebtEvent.InputTuple,
    SettleDebtEvent.OutputTuple,
    SettleDebtEvent.OutputObject
  >;
  getEvent(
    key: "TransferCollateral"
  ): TypedContractEvent<
    TransferCollateralEvent.InputTuple,
    TransferCollateralEvent.OutputTuple,
    TransferCollateralEvent.OutputObject
  >;
  getEvent(
    key: "TransferInternalCoins"
  ): TypedContractEvent<
    TransferInternalCoinsEvent.InputTuple,
    TransferInternalCoinsEvent.OutputTuple,
    TransferInternalCoinsEvent.OutputObject
  >;
  getEvent(
    key: "TransferSAFECollateralAndDebt"
  ): TypedContractEvent<
    TransferSAFECollateralAndDebtEvent.InputTuple,
    TransferSAFECollateralAndDebtEvent.OutputTuple,
    TransferSAFECollateralAndDebtEvent.OutputObject
  >;
  getEvent(
    key: "UpdateAccumulatedRate"
  ): TypedContractEvent<
    UpdateAccumulatedRateEvent.InputTuple,
    UpdateAccumulatedRateEvent.OutputTuple,
    UpdateAccumulatedRateEvent.OutputObject
  >;
  getEvent(
    key: "UpdateCollateralPrice"
  ): TypedContractEvent<
    UpdateCollateralPriceEvent.InputTuple,
    UpdateCollateralPriceEvent.OutputTuple,
    UpdateCollateralPriceEvent.OutputObject
  >;

  filters: {
    "AddAuthorization(address)": TypedContractEvent<
      AddAuthorizationEvent.InputTuple,
      AddAuthorizationEvent.OutputTuple,
      AddAuthorizationEvent.OutputObject
    >;
    AddAuthorization: TypedContractEvent<
      AddAuthorizationEvent.InputTuple,
      AddAuthorizationEvent.OutputTuple,
      AddAuthorizationEvent.OutputObject
    >;

    "ApproveSAFEModification(address,address)": TypedContractEvent<
      ApproveSAFEModificationEvent.InputTuple,
      ApproveSAFEModificationEvent.OutputTuple,
      ApproveSAFEModificationEvent.OutputObject
    >;
    ApproveSAFEModification: TypedContractEvent<
      ApproveSAFEModificationEvent.InputTuple,
      ApproveSAFEModificationEvent.OutputTuple,
      ApproveSAFEModificationEvent.OutputObject
    >;

    "ConfiscateSAFECollateralAndDebt(bytes32,address,address,address,int256,int256)": TypedContractEvent<
      ConfiscateSAFECollateralAndDebtEvent.InputTuple,
      ConfiscateSAFECollateralAndDebtEvent.OutputTuple,
      ConfiscateSAFECollateralAndDebtEvent.OutputObject
    >;
    ConfiscateSAFECollateralAndDebt: TypedContractEvent<
      ConfiscateSAFECollateralAndDebtEvent.InputTuple,
      ConfiscateSAFECollateralAndDebtEvent.OutputTuple,
      ConfiscateSAFECollateralAndDebtEvent.OutputObject
    >;

    "CreateUnbackedDebt(address,address,uint256)": TypedContractEvent<
      CreateUnbackedDebtEvent.InputTuple,
      CreateUnbackedDebtEvent.OutputTuple,
      CreateUnbackedDebtEvent.OutputObject
    >;
    CreateUnbackedDebt: TypedContractEvent<
      CreateUnbackedDebtEvent.InputTuple,
      CreateUnbackedDebtEvent.OutputTuple,
      CreateUnbackedDebtEvent.OutputObject
    >;

    "DenySAFEModification(address,address)": TypedContractEvent<
      DenySAFEModificationEvent.InputTuple,
      DenySAFEModificationEvent.OutputTuple,
      DenySAFEModificationEvent.OutputObject
    >;
    DenySAFEModification: TypedContractEvent<
      DenySAFEModificationEvent.InputTuple,
      DenySAFEModificationEvent.OutputTuple,
      DenySAFEModificationEvent.OutputObject
    >;

    "DisableContract()": TypedContractEvent<
      DisableContractEvent.InputTuple,
      DisableContractEvent.OutputTuple,
      DisableContractEvent.OutputObject
    >;
    DisableContract: TypedContractEvent<
      DisableContractEvent.InputTuple,
      DisableContractEvent.OutputTuple,
      DisableContractEvent.OutputObject
    >;

    "InitializeCollateralType(bytes32)": TypedContractEvent<
      InitializeCollateralTypeEvent.InputTuple,
      InitializeCollateralTypeEvent.OutputTuple,
      InitializeCollateralTypeEvent.OutputObject
    >;
    InitializeCollateralType: TypedContractEvent<
      InitializeCollateralTypeEvent.InputTuple,
      InitializeCollateralTypeEvent.OutputTuple,
      InitializeCollateralTypeEvent.OutputObject
    >;

    "ModifyParameters(bytes32,bytes32,bytes)": TypedContractEvent<
      ModifyParametersEvent.InputTuple,
      ModifyParametersEvent.OutputTuple,
      ModifyParametersEvent.OutputObject
    >;
    ModifyParameters: TypedContractEvent<
      ModifyParametersEvent.InputTuple,
      ModifyParametersEvent.OutputTuple,
      ModifyParametersEvent.OutputObject
    >;

    "ModifySAFECollateralization(bytes32,address,address,address,int256,int256)": TypedContractEvent<
      ModifySAFECollateralizationEvent.InputTuple,
      ModifySAFECollateralizationEvent.OutputTuple,
      ModifySAFECollateralizationEvent.OutputObject
    >;
    ModifySAFECollateralization: TypedContractEvent<
      ModifySAFECollateralizationEvent.InputTuple,
      ModifySAFECollateralizationEvent.OutputTuple,
      ModifySAFECollateralizationEvent.OutputObject
    >;

    "RemoveAuthorization(address)": TypedContractEvent<
      RemoveAuthorizationEvent.InputTuple,
      RemoveAuthorizationEvent.OutputTuple,
      RemoveAuthorizationEvent.OutputObject
    >;
    RemoveAuthorization: TypedContractEvent<
      RemoveAuthorizationEvent.InputTuple,
      RemoveAuthorizationEvent.OutputTuple,
      RemoveAuthorizationEvent.OutputObject
    >;

    "SettleDebt(address,uint256)": TypedContractEvent<
      SettleDebtEvent.InputTuple,
      SettleDebtEvent.OutputTuple,
      SettleDebtEvent.OutputObject
    >;
    SettleDebt: TypedContractEvent<
      SettleDebtEvent.InputTuple,
      SettleDebtEvent.OutputTuple,
      SettleDebtEvent.OutputObject
    >;

    "TransferCollateral(bytes32,address,address,uint256)": TypedContractEvent<
      TransferCollateralEvent.InputTuple,
      TransferCollateralEvent.OutputTuple,
      TransferCollateralEvent.OutputObject
    >;
    TransferCollateral: TypedContractEvent<
      TransferCollateralEvent.InputTuple,
      TransferCollateralEvent.OutputTuple,
      TransferCollateralEvent.OutputObject
    >;

    "TransferInternalCoins(address,address,uint256)": TypedContractEvent<
      TransferInternalCoinsEvent.InputTuple,
      TransferInternalCoinsEvent.OutputTuple,
      TransferInternalCoinsEvent.OutputObject
    >;
    TransferInternalCoins: TypedContractEvent<
      TransferInternalCoinsEvent.InputTuple,
      TransferInternalCoinsEvent.OutputTuple,
      TransferInternalCoinsEvent.OutputObject
    >;

    "TransferSAFECollateralAndDebt(bytes32,address,address,int256,int256)": TypedContractEvent<
      TransferSAFECollateralAndDebtEvent.InputTuple,
      TransferSAFECollateralAndDebtEvent.OutputTuple,
      TransferSAFECollateralAndDebtEvent.OutputObject
    >;
    TransferSAFECollateralAndDebt: TypedContractEvent<
      TransferSAFECollateralAndDebtEvent.InputTuple,
      TransferSAFECollateralAndDebtEvent.OutputTuple,
      TransferSAFECollateralAndDebtEvent.OutputObject
    >;

    "UpdateAccumulatedRate(bytes32,address,int256)": TypedContractEvent<
      UpdateAccumulatedRateEvent.InputTuple,
      UpdateAccumulatedRateEvent.OutputTuple,
      UpdateAccumulatedRateEvent.OutputObject
    >;
    UpdateAccumulatedRate: TypedContractEvent<
      UpdateAccumulatedRateEvent.InputTuple,
      UpdateAccumulatedRateEvent.OutputTuple,
      UpdateAccumulatedRateEvent.OutputObject
    >;

    "UpdateCollateralPrice(bytes32,uint256,uint256)": TypedContractEvent<
      UpdateCollateralPriceEvent.InputTuple,
      UpdateCollateralPriceEvent.OutputTuple,
      UpdateCollateralPriceEvent.OutputObject
    >;
    UpdateCollateralPrice: TypedContractEvent<
      UpdateCollateralPriceEvent.InputTuple,
      UpdateCollateralPriceEvent.OutputTuple,
      UpdateCollateralPriceEvent.OutputObject
    >;
  };
}
