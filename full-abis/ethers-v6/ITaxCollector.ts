/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace ITaxCollector {
  export type TaxCollectorCollateralDataStruct = {
    nextStabilityFee: BigNumberish;
    updateTime: BigNumberish;
    secondaryReceiverAllotedTax: BigNumberish;
  };

  export type TaxCollectorCollateralDataStructOutput = [
    nextStabilityFee: bigint,
    updateTime: bigint,
    secondaryReceiverAllotedTax: bigint
  ] & {
    nextStabilityFee: bigint;
    updateTime: bigint;
    secondaryReceiverAllotedTax: bigint;
  };

  export type TaxCollectorCollateralParamsStruct = {
    stabilityFee: BigNumberish;
  };

  export type TaxCollectorCollateralParamsStructOutput = [
    stabilityFee: bigint
  ] & { stabilityFee: bigint };

  export type TaxCollectorParamsStruct = {
    primaryTaxReceiver: AddressLike;
    globalStabilityFee: BigNumberish;
    maxStabilityFeeRange: BigNumberish;
    maxSecondaryReceivers: BigNumberish;
  };

  export type TaxCollectorParamsStructOutput = [
    primaryTaxReceiver: string,
    globalStabilityFee: bigint,
    maxStabilityFeeRange: bigint,
    maxSecondaryReceivers: bigint
  ] & {
    primaryTaxReceiver: string;
    globalStabilityFee: bigint;
    maxStabilityFeeRange: bigint;
    maxSecondaryReceivers: bigint;
  };

  export type TaxReceiverStruct = {
    receiver: AddressLike;
    canTakeBackTax: boolean;
    taxPercentage: BigNumberish;
  };

  export type TaxReceiverStructOutput = [
    receiver: string,
    canTakeBackTax: boolean,
    taxPercentage: bigint
  ] & { receiver: string; canTakeBackTax: boolean; taxPercentage: bigint };
}

export interface ITaxCollectorInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "_cData"
      | "_cParams"
      | "_params"
      | "_secondaryTaxReceivers"
      | "addAuthorization"
      | "authorizedAccounts(address)"
      | "authorizedAccounts()"
      | "cData"
      | "cParams"
      | "collateralList"
      | "collateralListLength"
      | "collectedManyTax"
      | "initializeCollateralType"
      | "isSecondaryReceiver"
      | "modifyParameters(bytes32,bytes32,bytes)"
      | "modifyParameters(bytes32,bytes)"
      | "params"
      | "removeAuthorization"
      | "safeEngine"
      | "secondaryReceiverRevenueSourcesList"
      | "secondaryReceiversList"
      | "secondaryReceiversListLength"
      | "secondaryTaxReceivers"
      | "taxMany"
      | "taxManyOutcome"
      | "taxSingle"
      | "taxSingleOutcome"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AddAuthorization"
      | "CollectTax"
      | "DistributeTax"
      | "InitializeCollateralType"
      | "ModifyParameters"
      | "RemoveAuthorization"
      | "SetPrimaryReceiver"
      | "SetSecondaryReceiver"
  ): EventFragment;

  encodeFunctionData(functionFragment: "_cData", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "_cParams", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "_params", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "_secondaryTaxReceivers",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "addAuthorization",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "authorizedAccounts(address)",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "authorizedAccounts()",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "cData", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "cParams", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "collateralList",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "collateralListLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "collectedManyTax",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initializeCollateralType",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isSecondaryReceiver",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "modifyParameters(bytes32,bytes32,bytes)",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "modifyParameters(bytes32,bytes)",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "params", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeAuthorization",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "safeEngine",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "secondaryReceiverRevenueSourcesList",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "secondaryReceiversList",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "secondaryReceiversListLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "secondaryTaxReceivers",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "taxMany",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "taxManyOutcome",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "taxSingle",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "taxSingleOutcome",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "_cData", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_cParams", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_params", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_secondaryTaxReceivers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addAuthorization",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "authorizedAccounts(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "authorizedAccounts()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "cData", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cParams", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "collateralList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collateralListLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collectedManyTax",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initializeCollateralType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isSecondaryReceiver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "modifyParameters(bytes32,bytes32,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "modifyParameters(bytes32,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "params", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeAuthorization",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "safeEngine", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "secondaryReceiverRevenueSourcesList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "secondaryReceiversList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "secondaryReceiversListLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "secondaryTaxReceivers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "taxMany", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "taxManyOutcome",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "taxSingle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "taxSingleOutcome",
    data: BytesLike
  ): Result;
}

export namespace AddAuthorizationEvent {
  export type InputTuple = [_account: AddressLike];
  export type OutputTuple = [_account: string];
  export interface OutputObject {
    _account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CollectTaxEvent {
  export type InputTuple = [
    _cType: BytesLike,
    _latestAccumulatedRate: BigNumberish,
    _deltaRate: BigNumberish
  ];
  export type OutputTuple = [
    _cType: string,
    _latestAccumulatedRate: bigint,
    _deltaRate: bigint
  ];
  export interface OutputObject {
    _cType: string;
    _latestAccumulatedRate: bigint;
    _deltaRate: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DistributeTaxEvent {
  export type InputTuple = [
    _cType: BytesLike,
    _target: AddressLike,
    _taxCut: BigNumberish
  ];
  export type OutputTuple = [_cType: string, _target: string, _taxCut: bigint];
  export interface OutputObject {
    _cType: string;
    _target: string;
    _taxCut: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializeCollateralTypeEvent {
  export type InputTuple = [_cType: BytesLike];
  export type OutputTuple = [_cType: string];
  export interface OutputObject {
    _cType: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ModifyParametersEvent {
  export type InputTuple = [
    _param: BytesLike,
    _cType: BytesLike,
    _data: BytesLike
  ];
  export type OutputTuple = [_param: string, _cType: string, _data: string];
  export interface OutputObject {
    _param: string;
    _cType: string;
    _data: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RemoveAuthorizationEvent {
  export type InputTuple = [_account: AddressLike];
  export type OutputTuple = [_account: string];
  export interface OutputObject {
    _account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetPrimaryReceiverEvent {
  export type InputTuple = [_cType: BytesLike, _receiver: AddressLike];
  export type OutputTuple = [_cType: string, _receiver: string];
  export interface OutputObject {
    _cType: string;
    _receiver: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetSecondaryReceiverEvent {
  export type InputTuple = [
    _cType: BytesLike,
    _receiver: AddressLike,
    _taxPercentage: BigNumberish,
    _canTakeBackTax: boolean
  ];
  export type OutputTuple = [
    _cType: string,
    _receiver: string,
    _taxPercentage: bigint,
    _canTakeBackTax: boolean
  ];
  export interface OutputObject {
    _cType: string;
    _receiver: string;
    _taxPercentage: bigint;
    _canTakeBackTax: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ITaxCollector extends BaseContract {
  connect(runner?: ContractRunner | null): ITaxCollector;
  waitForDeployment(): Promise<this>;

  interface: ITaxCollectorInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  _cData: TypedContractMethod<
    [_cType: BytesLike],
    [
      [bigint, bigint, bigint] & {
        _nextStabilityFee: bigint;
        _updateTime: bigint;
        _secondaryReceiverAllotedTax: bigint;
      }
    ],
    "view"
  >;

  _cParams: TypedContractMethod<[_cType: BytesLike], [bigint], "view">;

  _params: TypedContractMethod<
    [],
    [
      [string, bigint, bigint, bigint] & {
        _primaryTaxReceiver: string;
        _globalStabilityFee: bigint;
        _maxStabilityFeeRange: bigint;
        _maxSecondaryReceivers: bigint;
      }
    ],
    "view"
  >;

  _secondaryTaxReceivers: TypedContractMethod<
    [_cType: BytesLike, _receiver: AddressLike],
    [
      [string, boolean, bigint] & {
        _secondaryReceiver: string;
        _canTakeBackTax: boolean;
        _taxPercentage: bigint;
      }
    ],
    "view"
  >;

  addAuthorization: TypedContractMethod<
    [_account: AddressLike],
    [void],
    "nonpayable"
  >;

  "authorizedAccounts(address)": TypedContractMethod<
    [_account: AddressLike],
    [boolean],
    "view"
  >;

  "authorizedAccounts()": TypedContractMethod<[], [string[]], "view">;

  cData: TypedContractMethod<
    [_cType: BytesLike],
    [ITaxCollector.TaxCollectorCollateralDataStructOutput],
    "view"
  >;

  cParams: TypedContractMethod<
    [_cType: BytesLike],
    [ITaxCollector.TaxCollectorCollateralParamsStructOutput],
    "view"
  >;

  collateralList: TypedContractMethod<[], [string[]], "view">;

  collateralListLength: TypedContractMethod<[], [bigint], "view">;

  collectedManyTax: TypedContractMethod<
    [_start: BigNumberish, _end: BigNumberish],
    [boolean],
    "view"
  >;

  initializeCollateralType: TypedContractMethod<
    [_cType: BytesLike, _collateralParams: BytesLike],
    [void],
    "nonpayable"
  >;

  isSecondaryReceiver: TypedContractMethod<
    [_receiver: AddressLike],
    [boolean],
    "view"
  >;

  "modifyParameters(bytes32,bytes32,bytes)": TypedContractMethod<
    [_cType: BytesLike, _param: BytesLike, _data: BytesLike],
    [void],
    "nonpayable"
  >;

  "modifyParameters(bytes32,bytes)": TypedContractMethod<
    [_param: BytesLike, _data: BytesLike],
    [void],
    "nonpayable"
  >;

  params: TypedContractMethod<
    [],
    [ITaxCollector.TaxCollectorParamsStructOutput],
    "view"
  >;

  removeAuthorization: TypedContractMethod<
    [_account: AddressLike],
    [void],
    "nonpayable"
  >;

  safeEngine: TypedContractMethod<[], [string], "view">;

  secondaryReceiverRevenueSourcesList: TypedContractMethod<
    [_secondaryReceiver: AddressLike],
    [string[]],
    "view"
  >;

  secondaryReceiversList: TypedContractMethod<[], [string[]], "view">;

  secondaryReceiversListLength: TypedContractMethod<[], [bigint], "view">;

  secondaryTaxReceivers: TypedContractMethod<
    [_cType: BytesLike, _receiver: AddressLike],
    [ITaxCollector.TaxReceiverStructOutput],
    "view"
  >;

  taxMany: TypedContractMethod<
    [_start: BigNumberish, _end: BigNumberish],
    [void],
    "nonpayable"
  >;

  taxManyOutcome: TypedContractMethod<
    [_start: BigNumberish, _end: BigNumberish],
    [[boolean, bigint] & { _ok: boolean; _rad: bigint }],
    "view"
  >;

  taxSingle: TypedContractMethod<[_cType: BytesLike], [bigint], "nonpayable">;

  taxSingleOutcome: TypedContractMethod<
    [_cType: BytesLike],
    [[bigint, bigint] & { _newlyAccumulatedRate: bigint; _deltaRate: bigint }],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "_cData"
  ): TypedContractMethod<
    [_cType: BytesLike],
    [
      [bigint, bigint, bigint] & {
        _nextStabilityFee: bigint;
        _updateTime: bigint;
        _secondaryReceiverAllotedTax: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "_cParams"
  ): TypedContractMethod<[_cType: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "_params"
  ): TypedContractMethod<
    [],
    [
      [string, bigint, bigint, bigint] & {
        _primaryTaxReceiver: string;
        _globalStabilityFee: bigint;
        _maxStabilityFeeRange: bigint;
        _maxSecondaryReceivers: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "_secondaryTaxReceivers"
  ): TypedContractMethod<
    [_cType: BytesLike, _receiver: AddressLike],
    [
      [string, boolean, bigint] & {
        _secondaryReceiver: string;
        _canTakeBackTax: boolean;
        _taxPercentage: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "addAuthorization"
  ): TypedContractMethod<[_account: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "authorizedAccounts(address)"
  ): TypedContractMethod<[_account: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "authorizedAccounts()"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "cData"
  ): TypedContractMethod<
    [_cType: BytesLike],
    [ITaxCollector.TaxCollectorCollateralDataStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "cParams"
  ): TypedContractMethod<
    [_cType: BytesLike],
    [ITaxCollector.TaxCollectorCollateralParamsStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "collateralList"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "collateralListLength"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "collectedManyTax"
  ): TypedContractMethod<
    [_start: BigNumberish, _end: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "initializeCollateralType"
  ): TypedContractMethod<
    [_cType: BytesLike, _collateralParams: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isSecondaryReceiver"
  ): TypedContractMethod<[_receiver: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "modifyParameters(bytes32,bytes32,bytes)"
  ): TypedContractMethod<
    [_cType: BytesLike, _param: BytesLike, _data: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "modifyParameters(bytes32,bytes)"
  ): TypedContractMethod<
    [_param: BytesLike, _data: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "params"
  ): TypedContractMethod<
    [],
    [ITaxCollector.TaxCollectorParamsStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "removeAuthorization"
  ): TypedContractMethod<[_account: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "safeEngine"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "secondaryReceiverRevenueSourcesList"
  ): TypedContractMethod<[_secondaryReceiver: AddressLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "secondaryReceiversList"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "secondaryReceiversListLength"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "secondaryTaxReceivers"
  ): TypedContractMethod<
    [_cType: BytesLike, _receiver: AddressLike],
    [ITaxCollector.TaxReceiverStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "taxMany"
  ): TypedContractMethod<
    [_start: BigNumberish, _end: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "taxManyOutcome"
  ): TypedContractMethod<
    [_start: BigNumberish, _end: BigNumberish],
    [[boolean, bigint] & { _ok: boolean; _rad: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "taxSingle"
  ): TypedContractMethod<[_cType: BytesLike], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "taxSingleOutcome"
  ): TypedContractMethod<
    [_cType: BytesLike],
    [[bigint, bigint] & { _newlyAccumulatedRate: bigint; _deltaRate: bigint }],
    "view"
  >;

  getEvent(
    key: "AddAuthorization"
  ): TypedContractEvent<
    AddAuthorizationEvent.InputTuple,
    AddAuthorizationEvent.OutputTuple,
    AddAuthorizationEvent.OutputObject
  >;
  getEvent(
    key: "CollectTax"
  ): TypedContractEvent<
    CollectTaxEvent.InputTuple,
    CollectTaxEvent.OutputTuple,
    CollectTaxEvent.OutputObject
  >;
  getEvent(
    key: "DistributeTax"
  ): TypedContractEvent<
    DistributeTaxEvent.InputTuple,
    DistributeTaxEvent.OutputTuple,
    DistributeTaxEvent.OutputObject
  >;
  getEvent(
    key: "InitializeCollateralType"
  ): TypedContractEvent<
    InitializeCollateralTypeEvent.InputTuple,
    InitializeCollateralTypeEvent.OutputTuple,
    InitializeCollateralTypeEvent.OutputObject
  >;
  getEvent(
    key: "ModifyParameters"
  ): TypedContractEvent<
    ModifyParametersEvent.InputTuple,
    ModifyParametersEvent.OutputTuple,
    ModifyParametersEvent.OutputObject
  >;
  getEvent(
    key: "RemoveAuthorization"
  ): TypedContractEvent<
    RemoveAuthorizationEvent.InputTuple,
    RemoveAuthorizationEvent.OutputTuple,
    RemoveAuthorizationEvent.OutputObject
  >;
  getEvent(
    key: "SetPrimaryReceiver"
  ): TypedContractEvent<
    SetPrimaryReceiverEvent.InputTuple,
    SetPrimaryReceiverEvent.OutputTuple,
    SetPrimaryReceiverEvent.OutputObject
  >;
  getEvent(
    key: "SetSecondaryReceiver"
  ): TypedContractEvent<
    SetSecondaryReceiverEvent.InputTuple,
    SetSecondaryReceiverEvent.OutputTuple,
    SetSecondaryReceiverEvent.OutputObject
  >;

  filters: {
    "AddAuthorization(address)": TypedContractEvent<
      AddAuthorizationEvent.InputTuple,
      AddAuthorizationEvent.OutputTuple,
      AddAuthorizationEvent.OutputObject
    >;
    AddAuthorization: TypedContractEvent<
      AddAuthorizationEvent.InputTuple,
      AddAuthorizationEvent.OutputTuple,
      AddAuthorizationEvent.OutputObject
    >;

    "CollectTax(bytes32,uint256,int256)": TypedContractEvent<
      CollectTaxEvent.InputTuple,
      CollectTaxEvent.OutputTuple,
      CollectTaxEvent.OutputObject
    >;
    CollectTax: TypedContractEvent<
      CollectTaxEvent.InputTuple,
      CollectTaxEvent.OutputTuple,
      CollectTaxEvent.OutputObject
    >;

    "DistributeTax(bytes32,address,int256)": TypedContractEvent<
      DistributeTaxEvent.InputTuple,
      DistributeTaxEvent.OutputTuple,
      DistributeTaxEvent.OutputObject
    >;
    DistributeTax: TypedContractEvent<
      DistributeTaxEvent.InputTuple,
      DistributeTaxEvent.OutputTuple,
      DistributeTaxEvent.OutputObject
    >;

    "InitializeCollateralType(bytes32)": TypedContractEvent<
      InitializeCollateralTypeEvent.InputTuple,
      InitializeCollateralTypeEvent.OutputTuple,
      InitializeCollateralTypeEvent.OutputObject
    >;
    InitializeCollateralType: TypedContractEvent<
      InitializeCollateralTypeEvent.InputTuple,
      InitializeCollateralTypeEvent.OutputTuple,
      InitializeCollateralTypeEvent.OutputObject
    >;

    "ModifyParameters(bytes32,bytes32,bytes)": TypedContractEvent<
      ModifyParametersEvent.InputTuple,
      ModifyParametersEvent.OutputTuple,
      ModifyParametersEvent.OutputObject
    >;
    ModifyParameters: TypedContractEvent<
      ModifyParametersEvent.InputTuple,
      ModifyParametersEvent.OutputTuple,
      ModifyParametersEvent.OutputObject
    >;

    "RemoveAuthorization(address)": TypedContractEvent<
      RemoveAuthorizationEvent.InputTuple,
      RemoveAuthorizationEvent.OutputTuple,
      RemoveAuthorizationEvent.OutputObject
    >;
    RemoveAuthorization: TypedContractEvent<
      RemoveAuthorizationEvent.InputTuple,
      RemoveAuthorizationEvent.OutputTuple,
      RemoveAuthorizationEvent.OutputObject
    >;

    "SetPrimaryReceiver(bytes32,address)": TypedContractEvent<
      SetPrimaryReceiverEvent.InputTuple,
      SetPrimaryReceiverEvent.OutputTuple,
      SetPrimaryReceiverEvent.OutputObject
    >;
    SetPrimaryReceiver: TypedContractEvent<
      SetPrimaryReceiverEvent.InputTuple,
      SetPrimaryReceiverEvent.OutputTuple,
      SetPrimaryReceiverEvent.OutputObject
    >;

    "SetSecondaryReceiver(bytes32,address,uint256,bool)": TypedContractEvent<
      SetSecondaryReceiverEvent.InputTuple,
      SetSecondaryReceiverEvent.OutputTuple,
      SetSecondaryReceiverEvent.OutputObject
    >;
    SetSecondaryReceiver: TypedContractEvent<
      SetSecondaryReceiverEvent.InputTuple,
      SetSecondaryReceiverEvent.OutputTuple,
      SetSecondaryReceiverEvent.OutputObject
    >;
  };
}
