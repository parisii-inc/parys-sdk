/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface IRewardedActionsInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "exitAllSystemCoins"
      | "exitCollateral"
      | "exitSystemCoins"
      | "joinSystemCoins"
      | "liquidateSAFE"
      | "popDebtFromQueue"
      | "startDebtAuction"
      | "startSurplusAuction"
      | "transferExtraSurplus"
      | "updateCollateralPrice"
      | "updateRedemptionRate"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "exitAllSystemCoins",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "exitCollateral",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "exitSystemCoins",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "joinSystemCoins",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidateSAFE",
    values: [AddressLike, AddressLike, BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "popDebtFromQueue",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "startDebtAuction",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "startSurplusAuction",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferExtraSurplus",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateCollateralPrice",
    values: [AddressLike, AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateRedemptionRate",
    values: [AddressLike, AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "exitAllSystemCoins",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exitCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exitSystemCoins",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "joinSystemCoins",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidateSAFE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "popDebtFromQueue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startDebtAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startSurplusAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferExtraSurplus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateCollateralPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateRedemptionRate",
    data: BytesLike
  ): Result;
}

export interface IRewardedActions extends BaseContract {
  connect(runner?: ContractRunner | null): IRewardedActions;
  waitForDeployment(): Promise<this>;

  interface: IRewardedActionsInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  exitAllSystemCoins: TypedContractMethod<
    [_coinJoin: AddressLike],
    [void],
    "nonpayable"
  >;

  exitCollateral: TypedContractMethod<
    [_collateralJoin: AddressLike, _wad: BigNumberish],
    [void],
    "nonpayable"
  >;

  exitSystemCoins: TypedContractMethod<
    [_coinJoin: AddressLike, _coinsToExit: BigNumberish],
    [void],
    "nonpayable"
  >;

  joinSystemCoins: TypedContractMethod<
    [_coinJoin: AddressLike, _dst: AddressLike, _wad: BigNumberish],
    [void],
    "nonpayable"
  >;

  liquidateSAFE: TypedContractMethod<
    [
      _liquidationJob: AddressLike,
      _coinJoin: AddressLike,
      _cType: BytesLike,
      _safe: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  popDebtFromQueue: TypedContractMethod<
    [
      _accountingJob: AddressLike,
      _coinJoin: AddressLike,
      _debtTimestamp: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  startDebtAuction: TypedContractMethod<
    [_accountingJob: AddressLike, _coinJoin: AddressLike],
    [void],
    "nonpayable"
  >;

  startSurplusAuction: TypedContractMethod<
    [_accountingJob: AddressLike, _coinJoin: AddressLike],
    [void],
    "nonpayable"
  >;

  transferExtraSurplus: TypedContractMethod<
    [_accountingJob: AddressLike, _coinJoin: AddressLike],
    [void],
    "nonpayable"
  >;

  updateCollateralPrice: TypedContractMethod<
    [_oracleJob: AddressLike, _coinJoin: AddressLike, _cType: BytesLike],
    [void],
    "nonpayable"
  >;

  updateRedemptionRate: TypedContractMethod<
    [_oracleJob: AddressLike, _coinJoin: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "exitAllSystemCoins"
  ): TypedContractMethod<[_coinJoin: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "exitCollateral"
  ): TypedContractMethod<
    [_collateralJoin: AddressLike, _wad: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "exitSystemCoins"
  ): TypedContractMethod<
    [_coinJoin: AddressLike, _coinsToExit: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "joinSystemCoins"
  ): TypedContractMethod<
    [_coinJoin: AddressLike, _dst: AddressLike, _wad: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "liquidateSAFE"
  ): TypedContractMethod<
    [
      _liquidationJob: AddressLike,
      _coinJoin: AddressLike,
      _cType: BytesLike,
      _safe: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "popDebtFromQueue"
  ): TypedContractMethod<
    [
      _accountingJob: AddressLike,
      _coinJoin: AddressLike,
      _debtTimestamp: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "startDebtAuction"
  ): TypedContractMethod<
    [_accountingJob: AddressLike, _coinJoin: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "startSurplusAuction"
  ): TypedContractMethod<
    [_accountingJob: AddressLike, _coinJoin: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferExtraSurplus"
  ): TypedContractMethod<
    [_accountingJob: AddressLike, _coinJoin: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateCollateralPrice"
  ): TypedContractMethod<
    [_oracleJob: AddressLike, _coinJoin: AddressLike, _cType: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateRedemptionRate"
  ): TypedContractMethod<
    [_oracleJob: AddressLike, _coinJoin: AddressLike],
    [void],
    "nonpayable"
  >;

  filters: {};
}
