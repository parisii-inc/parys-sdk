/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type { IBaseOracle, IBaseOracleInterface } from "../IBaseOracle";

const _abi = [
  {
    type: "function",
    name: "getResultWithValidity",
    inputs: [],
    outputs: [
      {
        name: "_result",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "_validity",
        type: "bool",
        internalType: "bool",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "read",
    inputs: [],
    outputs: [
      {
        name: "_value",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "symbol",
    inputs: [],
    outputs: [
      {
        name: "_symbol",
        type: "string",
        internalType: "string",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "error",
    name: "InvalidPriceFeed",
    inputs: [],
  },
] as const;

export class IBaseOracle__factory {
  static readonly abi = _abi;
  static createInterface(): IBaseOracleInterface {
    return new Interface(_abi) as IBaseOracleInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): IBaseOracle {
    return new Contract(address, _abi, runner) as unknown as IBaseOracle;
  }
}
