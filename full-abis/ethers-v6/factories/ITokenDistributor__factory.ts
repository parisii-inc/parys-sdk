/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  ITokenDistributor,
  ITokenDistributorInterface,
} from "../ITokenDistributor";

const _abi = [
  {
    type: "function",
    name: "addAuthorization",
    inputs: [
      {
        name: "_account",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "authorizedAccounts",
    inputs: [
      {
        name: "_account",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [
      {
        name: "_authorized",
        type: "bool",
        internalType: "bool",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "authorizedAccounts",
    inputs: [],
    outputs: [
      {
        name: "_accounts",
        type: "address[]",
        internalType: "address[]",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "canClaim",
    inputs: [
      {
        name: "_proof",
        type: "bytes32[]",
        internalType: "bytes32[]",
      },
      {
        name: "_user",
        type: "address",
        internalType: "address",
      },
      {
        name: "_amount",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [
      {
        name: "_claimable",
        type: "bool",
        internalType: "bool",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "claim",
    inputs: [
      {
        name: "_proof",
        type: "bytes32[]",
        internalType: "bytes32[]",
      },
      {
        name: "_amount",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "claimAndDelegate",
    inputs: [
      {
        name: "_proof",
        type: "bytes32[]",
        internalType: "bytes32[]",
      },
      {
        name: "_amount",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "_delegatee",
        type: "address",
        internalType: "address",
      },
      {
        name: "_expiry",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "_v",
        type: "uint8",
        internalType: "uint8",
      },
      {
        name: "_r",
        type: "bytes32",
        internalType: "bytes32",
      },
      {
        name: "_s",
        type: "bytes32",
        internalType: "bytes32",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "claimPeriodEnd",
    inputs: [],
    outputs: [
      {
        name: "_claimPeriodEnd",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "claimPeriodStart",
    inputs: [],
    outputs: [
      {
        name: "_claimPeriodStart",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "claimed",
    inputs: [
      {
        name: "_user",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [
      {
        name: "_claimed",
        type: "bool",
        internalType: "bool",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "removeAuthorization",
    inputs: [
      {
        name: "_account",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "root",
    inputs: [],
    outputs: [
      {
        name: "_root",
        type: "bytes32",
        internalType: "bytes32",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "sweep",
    inputs: [
      {
        name: "_sweepReceiver",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "token",
    inputs: [],
    outputs: [
      {
        name: "_token",
        type: "address",
        internalType: "contract IProtocolToken",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "totalClaimable",
    inputs: [],
    outputs: [
      {
        name: "_totalClaimable",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "event",
    name: "AddAuthorization",
    inputs: [
      {
        name: "_account",
        type: "address",
        indexed: false,
        internalType: "address",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "Claimed",
    inputs: [
      {
        name: "_user",
        type: "address",
        indexed: false,
        internalType: "address",
      },
      {
        name: "_amount",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "RemoveAuthorization",
    inputs: [
      {
        name: "_account",
        type: "address",
        indexed: false,
        internalType: "address",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "Swept",
    inputs: [
      {
        name: "_sweepReceiver",
        type: "address",
        indexed: false,
        internalType: "address",
      },
      {
        name: "_amount",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
    ],
    anonymous: false,
  },
  {
    type: "error",
    name: "AlreadyAuthorized",
    inputs: [],
  },
  {
    type: "error",
    name: "NotAuthorized",
    inputs: [],
  },
  {
    type: "error",
    name: "TokenDistributor_ClaimInvalid",
    inputs: [],
  },
  {
    type: "error",
    name: "TokenDistributor_ClaimPeriodNotEnded",
    inputs: [],
  },
  {
    type: "error",
    name: "Unauthorized",
    inputs: [],
  },
] as const;

export class ITokenDistributor__factory {
  static readonly abi = _abi;
  static createInterface(): ITokenDistributorInterface {
    return new Interface(_abi) as ITokenDistributorInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): ITokenDistributor {
    return new Contract(address, _abi, runner) as unknown as ITokenDistributor;
  }
}
