/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface IHaiDelegateeInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "castVote"
      | "castVoteWithReason"
      | "castVoteWithReasonAndParams"
      | "delegatee"
      | "setDelegatee"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "DelegateeSet"): EventFragment;

  encodeFunctionData(
    functionFragment: "castVote",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "castVoteWithReason",
    values: [AddressLike, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "castVoteWithReasonAndParams",
    values: [AddressLike, BigNumberish, BigNumberish, string, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "delegatee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setDelegatee",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "castVote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "castVoteWithReason",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "castVoteWithReasonAndParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "delegatee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setDelegatee",
    data: BytesLike
  ): Result;
}

export namespace DelegateeSetEvent {
  export type InputTuple = [_delegatee: AddressLike];
  export type OutputTuple = [_delegatee: string];
  export interface OutputObject {
    _delegatee: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IHaiDelegatee extends BaseContract {
  connect(runner?: ContractRunner | null): IHaiDelegatee;
  waitForDeployment(): Promise<this>;

  interface: IHaiDelegateeInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  castVote: TypedContractMethod<
    [_governor: AddressLike, _proposalId: BigNumberish, _support: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  castVoteWithReason: TypedContractMethod<
    [
      _governor: AddressLike,
      _proposalId: BigNumberish,
      _support: BigNumberish,
      _reason: string
    ],
    [bigint],
    "nonpayable"
  >;

  castVoteWithReasonAndParams: TypedContractMethod<
    [
      _governor: AddressLike,
      _proposalId: BigNumberish,
      _support: BigNumberish,
      _reason: string,
      _params: BytesLike
    ],
    [bigint],
    "nonpayable"
  >;

  delegatee: TypedContractMethod<[], [string], "view">;

  setDelegatee: TypedContractMethod<
    [_delegatee: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "castVote"
  ): TypedContractMethod<
    [_governor: AddressLike, _proposalId: BigNumberish, _support: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "castVoteWithReason"
  ): TypedContractMethod<
    [
      _governor: AddressLike,
      _proposalId: BigNumberish,
      _support: BigNumberish,
      _reason: string
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "castVoteWithReasonAndParams"
  ): TypedContractMethod<
    [
      _governor: AddressLike,
      _proposalId: BigNumberish,
      _support: BigNumberish,
      _reason: string,
      _params: BytesLike
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "delegatee"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "setDelegatee"
  ): TypedContractMethod<[_delegatee: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "DelegateeSet"
  ): TypedContractEvent<
    DelegateeSetEvent.InputTuple,
    DelegateeSetEvent.OutputTuple,
    DelegateeSetEvent.OutputObject
  >;

  filters: {
    "DelegateeSet(address)": TypedContractEvent<
      DelegateeSetEvent.InputTuple,
      DelegateeSetEvent.OutputTuple,
      DelegateeSetEvent.OutputObject
    >;
    DelegateeSet: TypedContractEvent<
      DelegateeSetEvent.InputTuple,
      DelegateeSetEvent.OutputTuple,
      DelegateeSetEvent.OutputObject
    >;
  };
}
