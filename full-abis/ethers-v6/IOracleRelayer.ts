/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace IOracleRelayer {
  export type OracleRelayerCollateralParamsStruct = {
    oracle: AddressLike;
    safetyCRatio: BigNumberish;
    liquidationCRatio: BigNumberish;
  };

  export type OracleRelayerCollateralParamsStructOutput = [
    oracle: string,
    safetyCRatio: bigint,
    liquidationCRatio: bigint
  ] & { oracle: string; safetyCRatio: bigint; liquidationCRatio: bigint };

  export type OracleRelayerParamsStruct = {
    redemptionRateUpperBound: BigNumberish;
    redemptionRateLowerBound: BigNumberish;
  };

  export type OracleRelayerParamsStructOutput = [
    redemptionRateUpperBound: bigint,
    redemptionRateLowerBound: bigint
  ] & { redemptionRateUpperBound: bigint; redemptionRateLowerBound: bigint };
}

export interface IOracleRelayerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "_cParams"
      | "_params"
      | "addAuthorization"
      | "authorizedAccounts(address)"
      | "authorizedAccounts()"
      | "cParams"
      | "calcRedemptionPrice"
      | "collateralList"
      | "contractEnabled"
      | "disableContract"
      | "initializeCollateralType"
      | "marketPrice"
      | "modifyParameters(bytes32,bytes32,bytes)"
      | "modifyParameters(bytes32,bytes)"
      | "params"
      | "redemptionPrice"
      | "redemptionPriceUpdateTime"
      | "redemptionRate"
      | "removeAuthorization"
      | "safeEngine"
      | "systemCoinOracle"
      | "updateCollateralPrice"
      | "updateRedemptionRate"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AddAuthorization"
      | "DisableContract"
      | "InitializeCollateralType"
      | "ModifyParameters"
      | "RemoveAuthorization"
      | "UpdateCollateralPrice"
      | "UpdateRedemptionPrice"
      | "UpdateRedemptionRate"
  ): EventFragment;

  encodeFunctionData(functionFragment: "_cParams", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "_params", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addAuthorization",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "authorizedAccounts(address)",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "authorizedAccounts()",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "cParams", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "calcRedemptionPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "collateralList",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "contractEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "disableContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initializeCollateralType",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "marketPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "modifyParameters(bytes32,bytes32,bytes)",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "modifyParameters(bytes32,bytes)",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "params", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "redemptionPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "redemptionPriceUpdateTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "redemptionRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeAuthorization",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "safeEngine",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "systemCoinOracle",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateCollateralPrice",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateRedemptionRate",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "_cParams", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_params", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addAuthorization",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "authorizedAccounts(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "authorizedAccounts()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "cParams", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "calcRedemptionPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collateralList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contractEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disableContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initializeCollateralType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "marketPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "modifyParameters(bytes32,bytes32,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "modifyParameters(bytes32,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "params", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "redemptionPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redemptionPriceUpdateTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redemptionRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeAuthorization",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "safeEngine", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "systemCoinOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateCollateralPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateRedemptionRate",
    data: BytesLike
  ): Result;
}

export namespace AddAuthorizationEvent {
  export type InputTuple = [_account: AddressLike];
  export type OutputTuple = [_account: string];
  export interface OutputObject {
    _account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DisableContractEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializeCollateralTypeEvent {
  export type InputTuple = [_cType: BytesLike];
  export type OutputTuple = [_cType: string];
  export interface OutputObject {
    _cType: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ModifyParametersEvent {
  export type InputTuple = [
    _param: BytesLike,
    _cType: BytesLike,
    _data: BytesLike
  ];
  export type OutputTuple = [_param: string, _cType: string, _data: string];
  export interface OutputObject {
    _param: string;
    _cType: string;
    _data: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RemoveAuthorizationEvent {
  export type InputTuple = [_account: AddressLike];
  export type OutputTuple = [_account: string];
  export interface OutputObject {
    _account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdateCollateralPriceEvent {
  export type InputTuple = [
    _cType: BytesLike,
    _priceFeedValue: BigNumberish,
    _safetyPrice: BigNumberish,
    _liquidationPrice: BigNumberish
  ];
  export type OutputTuple = [
    _cType: string,
    _priceFeedValue: bigint,
    _safetyPrice: bigint,
    _liquidationPrice: bigint
  ];
  export interface OutputObject {
    _cType: string;
    _priceFeedValue: bigint;
    _safetyPrice: bigint;
    _liquidationPrice: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdateRedemptionPriceEvent {
  export type InputTuple = [_redemptionPrice: BigNumberish];
  export type OutputTuple = [_redemptionPrice: bigint];
  export interface OutputObject {
    _redemptionPrice: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdateRedemptionRateEvent {
  export type InputTuple = [_redemptionRate: BigNumberish];
  export type OutputTuple = [_redemptionRate: bigint];
  export interface OutputObject {
    _redemptionRate: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IOracleRelayer extends BaseContract {
  connect(runner?: ContractRunner | null): IOracleRelayer;
  waitForDeployment(): Promise<this>;

  interface: IOracleRelayerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  _cParams: TypedContractMethod<
    [_cType: BytesLike],
    [
      [string, bigint, bigint] & {
        _oracle: string;
        _safetyCRatio: bigint;
        _liquidationCRatio: bigint;
      }
    ],
    "view"
  >;

  _params: TypedContractMethod<
    [],
    [
      [bigint, bigint] & {
        _redemptionRateUpperBound: bigint;
        _redemptionRateLowerBound: bigint;
      }
    ],
    "view"
  >;

  addAuthorization: TypedContractMethod<
    [_account: AddressLike],
    [void],
    "nonpayable"
  >;

  "authorizedAccounts(address)": TypedContractMethod<
    [_account: AddressLike],
    [boolean],
    "view"
  >;

  "authorizedAccounts()": TypedContractMethod<[], [string[]], "view">;

  cParams: TypedContractMethod<
    [_cType: BytesLike],
    [IOracleRelayer.OracleRelayerCollateralParamsStructOutput],
    "view"
  >;

  calcRedemptionPrice: TypedContractMethod<[], [bigint], "view">;

  collateralList: TypedContractMethod<[], [string[]], "view">;

  contractEnabled: TypedContractMethod<[], [boolean], "view">;

  disableContract: TypedContractMethod<[], [void], "nonpayable">;

  initializeCollateralType: TypedContractMethod<
    [_cType: BytesLike, _collateralParams: BytesLike],
    [void],
    "nonpayable"
  >;

  marketPrice: TypedContractMethod<[], [bigint], "view">;

  "modifyParameters(bytes32,bytes32,bytes)": TypedContractMethod<
    [_cType: BytesLike, _param: BytesLike, _data: BytesLike],
    [void],
    "nonpayable"
  >;

  "modifyParameters(bytes32,bytes)": TypedContractMethod<
    [_param: BytesLike, _data: BytesLike],
    [void],
    "nonpayable"
  >;

  params: TypedContractMethod<
    [],
    [IOracleRelayer.OracleRelayerParamsStructOutput],
    "view"
  >;

  redemptionPrice: TypedContractMethod<[], [bigint], "nonpayable">;

  redemptionPriceUpdateTime: TypedContractMethod<[], [bigint], "view">;

  redemptionRate: TypedContractMethod<[], [bigint], "view">;

  removeAuthorization: TypedContractMethod<
    [_account: AddressLike],
    [void],
    "nonpayable"
  >;

  safeEngine: TypedContractMethod<[], [string], "view">;

  systemCoinOracle: TypedContractMethod<[], [string], "view">;

  updateCollateralPrice: TypedContractMethod<
    [_cType: BytesLike],
    [void],
    "nonpayable"
  >;

  updateRedemptionRate: TypedContractMethod<
    [_redemptionRate: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "_cParams"
  ): TypedContractMethod<
    [_cType: BytesLike],
    [
      [string, bigint, bigint] & {
        _oracle: string;
        _safetyCRatio: bigint;
        _liquidationCRatio: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "_params"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint] & {
        _redemptionRateUpperBound: bigint;
        _redemptionRateLowerBound: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "addAuthorization"
  ): TypedContractMethod<[_account: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "authorizedAccounts(address)"
  ): TypedContractMethod<[_account: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "authorizedAccounts()"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "cParams"
  ): TypedContractMethod<
    [_cType: BytesLike],
    [IOracleRelayer.OracleRelayerCollateralParamsStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "calcRedemptionPrice"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "collateralList"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "contractEnabled"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "disableContract"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "initializeCollateralType"
  ): TypedContractMethod<
    [_cType: BytesLike, _collateralParams: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "marketPrice"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "modifyParameters(bytes32,bytes32,bytes)"
  ): TypedContractMethod<
    [_cType: BytesLike, _param: BytesLike, _data: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "modifyParameters(bytes32,bytes)"
  ): TypedContractMethod<
    [_param: BytesLike, _data: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "params"
  ): TypedContractMethod<
    [],
    [IOracleRelayer.OracleRelayerParamsStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "redemptionPrice"
  ): TypedContractMethod<[], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "redemptionPriceUpdateTime"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "redemptionRate"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "removeAuthorization"
  ): TypedContractMethod<[_account: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "safeEngine"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "systemCoinOracle"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "updateCollateralPrice"
  ): TypedContractMethod<[_cType: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateRedemptionRate"
  ): TypedContractMethod<[_redemptionRate: BigNumberish], [void], "nonpayable">;

  getEvent(
    key: "AddAuthorization"
  ): TypedContractEvent<
    AddAuthorizationEvent.InputTuple,
    AddAuthorizationEvent.OutputTuple,
    AddAuthorizationEvent.OutputObject
  >;
  getEvent(
    key: "DisableContract"
  ): TypedContractEvent<
    DisableContractEvent.InputTuple,
    DisableContractEvent.OutputTuple,
    DisableContractEvent.OutputObject
  >;
  getEvent(
    key: "InitializeCollateralType"
  ): TypedContractEvent<
    InitializeCollateralTypeEvent.InputTuple,
    InitializeCollateralTypeEvent.OutputTuple,
    InitializeCollateralTypeEvent.OutputObject
  >;
  getEvent(
    key: "ModifyParameters"
  ): TypedContractEvent<
    ModifyParametersEvent.InputTuple,
    ModifyParametersEvent.OutputTuple,
    ModifyParametersEvent.OutputObject
  >;
  getEvent(
    key: "RemoveAuthorization"
  ): TypedContractEvent<
    RemoveAuthorizationEvent.InputTuple,
    RemoveAuthorizationEvent.OutputTuple,
    RemoveAuthorizationEvent.OutputObject
  >;
  getEvent(
    key: "UpdateCollateralPrice"
  ): TypedContractEvent<
    UpdateCollateralPriceEvent.InputTuple,
    UpdateCollateralPriceEvent.OutputTuple,
    UpdateCollateralPriceEvent.OutputObject
  >;
  getEvent(
    key: "UpdateRedemptionPrice"
  ): TypedContractEvent<
    UpdateRedemptionPriceEvent.InputTuple,
    UpdateRedemptionPriceEvent.OutputTuple,
    UpdateRedemptionPriceEvent.OutputObject
  >;
  getEvent(
    key: "UpdateRedemptionRate"
  ): TypedContractEvent<
    UpdateRedemptionRateEvent.InputTuple,
    UpdateRedemptionRateEvent.OutputTuple,
    UpdateRedemptionRateEvent.OutputObject
  >;

  filters: {
    "AddAuthorization(address)": TypedContractEvent<
      AddAuthorizationEvent.InputTuple,
      AddAuthorizationEvent.OutputTuple,
      AddAuthorizationEvent.OutputObject
    >;
    AddAuthorization: TypedContractEvent<
      AddAuthorizationEvent.InputTuple,
      AddAuthorizationEvent.OutputTuple,
      AddAuthorizationEvent.OutputObject
    >;

    "DisableContract()": TypedContractEvent<
      DisableContractEvent.InputTuple,
      DisableContractEvent.OutputTuple,
      DisableContractEvent.OutputObject
    >;
    DisableContract: TypedContractEvent<
      DisableContractEvent.InputTuple,
      DisableContractEvent.OutputTuple,
      DisableContractEvent.OutputObject
    >;

    "InitializeCollateralType(bytes32)": TypedContractEvent<
      InitializeCollateralTypeEvent.InputTuple,
      InitializeCollateralTypeEvent.OutputTuple,
      InitializeCollateralTypeEvent.OutputObject
    >;
    InitializeCollateralType: TypedContractEvent<
      InitializeCollateralTypeEvent.InputTuple,
      InitializeCollateralTypeEvent.OutputTuple,
      InitializeCollateralTypeEvent.OutputObject
    >;

    "ModifyParameters(bytes32,bytes32,bytes)": TypedContractEvent<
      ModifyParametersEvent.InputTuple,
      ModifyParametersEvent.OutputTuple,
      ModifyParametersEvent.OutputObject
    >;
    ModifyParameters: TypedContractEvent<
      ModifyParametersEvent.InputTuple,
      ModifyParametersEvent.OutputTuple,
      ModifyParametersEvent.OutputObject
    >;

    "RemoveAuthorization(address)": TypedContractEvent<
      RemoveAuthorizationEvent.InputTuple,
      RemoveAuthorizationEvent.OutputTuple,
      RemoveAuthorizationEvent.OutputObject
    >;
    RemoveAuthorization: TypedContractEvent<
      RemoveAuthorizationEvent.InputTuple,
      RemoveAuthorizationEvent.OutputTuple,
      RemoveAuthorizationEvent.OutputObject
    >;

    "UpdateCollateralPrice(bytes32,uint256,uint256,uint256)": TypedContractEvent<
      UpdateCollateralPriceEvent.InputTuple,
      UpdateCollateralPriceEvent.OutputTuple,
      UpdateCollateralPriceEvent.OutputObject
    >;
    UpdateCollateralPrice: TypedContractEvent<
      UpdateCollateralPriceEvent.InputTuple,
      UpdateCollateralPriceEvent.OutputTuple,
      UpdateCollateralPriceEvent.OutputObject
    >;

    "UpdateRedemptionPrice(uint256)": TypedContractEvent<
      UpdateRedemptionPriceEvent.InputTuple,
      UpdateRedemptionPriceEvent.OutputTuple,
      UpdateRedemptionPriceEvent.OutputObject
    >;
    UpdateRedemptionPrice: TypedContractEvent<
      UpdateRedemptionPriceEvent.InputTuple,
      UpdateRedemptionPriceEvent.OutputTuple,
      UpdateRedemptionPriceEvent.OutputObject
    >;

    "UpdateRedemptionRate(uint256)": TypedContractEvent<
      UpdateRedemptionRateEvent.InputTuple,
      UpdateRedemptionRateEvent.OutputTuple,
      UpdateRedemptionRateEvent.OutputObject
    >;
    UpdateRedemptionRate: TypedContractEvent<
      UpdateRedemptionRateEvent.InputTuple,
      UpdateRedemptionRateEvent.OutputTuple,
      UpdateRedemptionRateEvent.OutputObject
    >;
  };
}
