/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace ICommonSurplusAuctionHouse {
  export type AuctionStruct = {
    bidAmount: BigNumberish;
    amountToSell: BigNumberish;
    highBidder: AddressLike;
    bidExpiry: BigNumberish;
    auctionDeadline: BigNumberish;
  };

  export type AuctionStructOutput = [
    bidAmount: bigint,
    amountToSell: bigint,
    highBidder: string,
    bidExpiry: bigint,
    auctionDeadline: bigint
  ] & {
    bidAmount: bigint;
    amountToSell: bigint;
    highBidder: string;
    bidExpiry: bigint;
    auctionDeadline: bigint;
  };
}

export declare namespace IPostSettlementSurplusAuctionHouse {
  export type PostSettlementSAHParamsStruct = {
    bidIncrease: BigNumberish;
    bidDuration: BigNumberish;
    totalAuctionLength: BigNumberish;
  };

  export type PostSettlementSAHParamsStructOutput = [
    bidIncrease: bigint,
    bidDuration: bigint,
    totalAuctionLength: bigint
  ] & { bidIncrease: bigint; bidDuration: bigint; totalAuctionLength: bigint };
}

export interface IPostSettlementSurplusAuctionHouseInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "AUCTION_HOUSE_TYPE"
      | "_auctions"
      | "_params"
      | "addAuthorization"
      | "auctions"
      | "auctionsStarted"
      | "authorizedAccounts(address)"
      | "authorizedAccounts()"
      | "increaseBidSize"
      | "modifyParameters"
      | "params"
      | "protocolToken"
      | "removeAuthorization"
      | "restartAuction"
      | "safeEngine"
      | "settleAuction"
      | "startAuction"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AddAuthorization"
      | "IncreaseBidSize"
      | "ModifyParameters"
      | "RemoveAuthorization"
      | "RestartAuction"
      | "SettleAuction"
      | "StartAuction"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "AUCTION_HOUSE_TYPE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_auctions",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "_params", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addAuthorization",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "auctions",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "auctionsStarted",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "authorizedAccounts(address)",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "authorizedAccounts()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "increaseBidSize",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "modifyParameters",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "params", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "protocolToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeAuthorization",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "restartAuction",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeEngine",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "settleAuction",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "startAuction",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "AUCTION_HOUSE_TYPE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_auctions", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_params", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addAuthorization",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "auctions", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "auctionsStarted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "authorizedAccounts(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "authorizedAccounts()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseBidSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "modifyParameters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "params", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "protocolToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeAuthorization",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "restartAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "safeEngine", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "settleAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startAuction",
    data: BytesLike
  ): Result;
}

export namespace AddAuthorizationEvent {
  export type InputTuple = [_account: AddressLike];
  export type OutputTuple = [_account: string];
  export interface OutputObject {
    _account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace IncreaseBidSizeEvent {
  export type InputTuple = [
    _id: BigNumberish,
    _bidder: AddressLike,
    _blockTimestamp: BigNumberish,
    _raisedAmount: BigNumberish,
    _soldAmount: BigNumberish,
    _bidExpiry: BigNumberish
  ];
  export type OutputTuple = [
    _id: bigint,
    _bidder: string,
    _blockTimestamp: bigint,
    _raisedAmount: bigint,
    _soldAmount: bigint,
    _bidExpiry: bigint
  ];
  export interface OutputObject {
    _id: bigint;
    _bidder: string;
    _blockTimestamp: bigint;
    _raisedAmount: bigint;
    _soldAmount: bigint;
    _bidExpiry: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ModifyParametersEvent {
  export type InputTuple = [
    _param: BytesLike,
    _cType: BytesLike,
    _data: BytesLike
  ];
  export type OutputTuple = [_param: string, _cType: string, _data: string];
  export interface OutputObject {
    _param: string;
    _cType: string;
    _data: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RemoveAuthorizationEvent {
  export type InputTuple = [_account: AddressLike];
  export type OutputTuple = [_account: string];
  export interface OutputObject {
    _account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RestartAuctionEvent {
  export type InputTuple = [
    _id: BigNumberish,
    _blockTimestamp: BigNumberish,
    _auctionDeadline: BigNumberish
  ];
  export type OutputTuple = [
    _id: bigint,
    _blockTimestamp: bigint,
    _auctionDeadline: bigint
  ];
  export interface OutputObject {
    _id: bigint;
    _blockTimestamp: bigint;
    _auctionDeadline: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SettleAuctionEvent {
  export type InputTuple = [
    _id: BigNumberish,
    _blockTimestamp: BigNumberish,
    _highBidder: AddressLike,
    _raisedAmount: BigNumberish
  ];
  export type OutputTuple = [
    _id: bigint,
    _blockTimestamp: bigint,
    _highBidder: string,
    _raisedAmount: bigint
  ];
  export interface OutputObject {
    _id: bigint;
    _blockTimestamp: bigint;
    _highBidder: string;
    _raisedAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StartAuctionEvent {
  export type InputTuple = [
    _id: BigNumberish,
    _auctioneer: AddressLike,
    _blockTimestamp: BigNumberish,
    _amountToSell: BigNumberish,
    _amountToRaise: BigNumberish,
    _auctionDeadline: BigNumberish
  ];
  export type OutputTuple = [
    _id: bigint,
    _auctioneer: string,
    _blockTimestamp: bigint,
    _amountToSell: bigint,
    _amountToRaise: bigint,
    _auctionDeadline: bigint
  ];
  export interface OutputObject {
    _id: bigint;
    _auctioneer: string;
    _blockTimestamp: bigint;
    _amountToSell: bigint;
    _amountToRaise: bigint;
    _auctionDeadline: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IPostSettlementSurplusAuctionHouse extends BaseContract {
  connect(runner?: ContractRunner | null): IPostSettlementSurplusAuctionHouse;
  waitForDeployment(): Promise<this>;

  interface: IPostSettlementSurplusAuctionHouseInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  AUCTION_HOUSE_TYPE: TypedContractMethod<[], [string], "view">;

  _auctions: TypedContractMethod<
    [_id: BigNumberish],
    [
      [bigint, bigint, string, bigint, bigint] & {
        _bidAmount: bigint;
        _amountToSell: bigint;
        _highBidder: string;
        _bidExpiry: bigint;
        _auctionDeadline: bigint;
      }
    ],
    "view"
  >;

  _params: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint] & {
        _bidIncrease: bigint;
        _bidDuration: bigint;
        _totalAuctionLength: bigint;
      }
    ],
    "view"
  >;

  addAuthorization: TypedContractMethod<
    [_account: AddressLike],
    [void],
    "nonpayable"
  >;

  auctions: TypedContractMethod<
    [_id: BigNumberish],
    [ICommonSurplusAuctionHouse.AuctionStructOutput],
    "view"
  >;

  auctionsStarted: TypedContractMethod<[], [bigint], "view">;

  "authorizedAccounts(address)": TypedContractMethod<
    [_account: AddressLike],
    [boolean],
    "view"
  >;

  "authorizedAccounts()": TypedContractMethod<[], [string[]], "view">;

  increaseBidSize: TypedContractMethod<
    [_id: BigNumberish, _bid: BigNumberish],
    [void],
    "nonpayable"
  >;

  modifyParameters: TypedContractMethod<
    [_param: BytesLike, _data: BytesLike],
    [void],
    "nonpayable"
  >;

  params: TypedContractMethod<
    [],
    [IPostSettlementSurplusAuctionHouse.PostSettlementSAHParamsStructOutput],
    "view"
  >;

  protocolToken: TypedContractMethod<[], [string], "view">;

  removeAuthorization: TypedContractMethod<
    [_account: AddressLike],
    [void],
    "nonpayable"
  >;

  restartAuction: TypedContractMethod<
    [_id: BigNumberish],
    [void],
    "nonpayable"
  >;

  safeEngine: TypedContractMethod<[], [string], "view">;

  settleAuction: TypedContractMethod<[_id: BigNumberish], [void], "nonpayable">;

  startAuction: TypedContractMethod<
    [_amountToSell: BigNumberish, _initialBid: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "AUCTION_HOUSE_TYPE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "_auctions"
  ): TypedContractMethod<
    [_id: BigNumberish],
    [
      [bigint, bigint, string, bigint, bigint] & {
        _bidAmount: bigint;
        _amountToSell: bigint;
        _highBidder: string;
        _bidExpiry: bigint;
        _auctionDeadline: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "_params"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint] & {
        _bidIncrease: bigint;
        _bidDuration: bigint;
        _totalAuctionLength: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "addAuthorization"
  ): TypedContractMethod<[_account: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "auctions"
  ): TypedContractMethod<
    [_id: BigNumberish],
    [ICommonSurplusAuctionHouse.AuctionStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "auctionsStarted"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "authorizedAccounts(address)"
  ): TypedContractMethod<[_account: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "authorizedAccounts()"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "increaseBidSize"
  ): TypedContractMethod<
    [_id: BigNumberish, _bid: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "modifyParameters"
  ): TypedContractMethod<
    [_param: BytesLike, _data: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "params"
  ): TypedContractMethod<
    [],
    [IPostSettlementSurplusAuctionHouse.PostSettlementSAHParamsStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "protocolToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "removeAuthorization"
  ): TypedContractMethod<[_account: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "restartAuction"
  ): TypedContractMethod<[_id: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "safeEngine"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "settleAuction"
  ): TypedContractMethod<[_id: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "startAuction"
  ): TypedContractMethod<
    [_amountToSell: BigNumberish, _initialBid: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  getEvent(
    key: "AddAuthorization"
  ): TypedContractEvent<
    AddAuthorizationEvent.InputTuple,
    AddAuthorizationEvent.OutputTuple,
    AddAuthorizationEvent.OutputObject
  >;
  getEvent(
    key: "IncreaseBidSize"
  ): TypedContractEvent<
    IncreaseBidSizeEvent.InputTuple,
    IncreaseBidSizeEvent.OutputTuple,
    IncreaseBidSizeEvent.OutputObject
  >;
  getEvent(
    key: "ModifyParameters"
  ): TypedContractEvent<
    ModifyParametersEvent.InputTuple,
    ModifyParametersEvent.OutputTuple,
    ModifyParametersEvent.OutputObject
  >;
  getEvent(
    key: "RemoveAuthorization"
  ): TypedContractEvent<
    RemoveAuthorizationEvent.InputTuple,
    RemoveAuthorizationEvent.OutputTuple,
    RemoveAuthorizationEvent.OutputObject
  >;
  getEvent(
    key: "RestartAuction"
  ): TypedContractEvent<
    RestartAuctionEvent.InputTuple,
    RestartAuctionEvent.OutputTuple,
    RestartAuctionEvent.OutputObject
  >;
  getEvent(
    key: "SettleAuction"
  ): TypedContractEvent<
    SettleAuctionEvent.InputTuple,
    SettleAuctionEvent.OutputTuple,
    SettleAuctionEvent.OutputObject
  >;
  getEvent(
    key: "StartAuction"
  ): TypedContractEvent<
    StartAuctionEvent.InputTuple,
    StartAuctionEvent.OutputTuple,
    StartAuctionEvent.OutputObject
  >;

  filters: {
    "AddAuthorization(address)": TypedContractEvent<
      AddAuthorizationEvent.InputTuple,
      AddAuthorizationEvent.OutputTuple,
      AddAuthorizationEvent.OutputObject
    >;
    AddAuthorization: TypedContractEvent<
      AddAuthorizationEvent.InputTuple,
      AddAuthorizationEvent.OutputTuple,
      AddAuthorizationEvent.OutputObject
    >;

    "IncreaseBidSize(uint256,address,uint256,uint256,uint256,uint256)": TypedContractEvent<
      IncreaseBidSizeEvent.InputTuple,
      IncreaseBidSizeEvent.OutputTuple,
      IncreaseBidSizeEvent.OutputObject
    >;
    IncreaseBidSize: TypedContractEvent<
      IncreaseBidSizeEvent.InputTuple,
      IncreaseBidSizeEvent.OutputTuple,
      IncreaseBidSizeEvent.OutputObject
    >;

    "ModifyParameters(bytes32,bytes32,bytes)": TypedContractEvent<
      ModifyParametersEvent.InputTuple,
      ModifyParametersEvent.OutputTuple,
      ModifyParametersEvent.OutputObject
    >;
    ModifyParameters: TypedContractEvent<
      ModifyParametersEvent.InputTuple,
      ModifyParametersEvent.OutputTuple,
      ModifyParametersEvent.OutputObject
    >;

    "RemoveAuthorization(address)": TypedContractEvent<
      RemoveAuthorizationEvent.InputTuple,
      RemoveAuthorizationEvent.OutputTuple,
      RemoveAuthorizationEvent.OutputObject
    >;
    RemoveAuthorization: TypedContractEvent<
      RemoveAuthorizationEvent.InputTuple,
      RemoveAuthorizationEvent.OutputTuple,
      RemoveAuthorizationEvent.OutputObject
    >;

    "RestartAuction(uint256,uint256,uint256)": TypedContractEvent<
      RestartAuctionEvent.InputTuple,
      RestartAuctionEvent.OutputTuple,
      RestartAuctionEvent.OutputObject
    >;
    RestartAuction: TypedContractEvent<
      RestartAuctionEvent.InputTuple,
      RestartAuctionEvent.OutputTuple,
      RestartAuctionEvent.OutputObject
    >;

    "SettleAuction(uint256,uint256,address,uint256)": TypedContractEvent<
      SettleAuctionEvent.InputTuple,
      SettleAuctionEvent.OutputTuple,
      SettleAuctionEvent.OutputObject
    >;
    SettleAuction: TypedContractEvent<
      SettleAuctionEvent.InputTuple,
      SettleAuctionEvent.OutputTuple,
      SettleAuctionEvent.OutputObject
    >;

    "StartAuction(uint256,address,uint256,uint256,uint256,uint256)": TypedContractEvent<
      StartAuctionEvent.InputTuple,
      StartAuctionEvent.OutputTuple,
      StartAuctionEvent.OutputObject
    >;
    StartAuction: TypedContractEvent<
      StartAuctionEvent.InputTuple,
      StartAuctionEvent.OutputTuple,
      StartAuctionEvent.OutputObject
    >;
  };
}
