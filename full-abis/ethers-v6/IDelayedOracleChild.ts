/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface IDelayedOracleChildInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "factory"
      | "getNextResultWithValidity"
      | "getResultWithValidity"
      | "lastUpdateTime"
      | "priceSource"
      | "read"
      | "shouldUpdate"
      | "symbol"
      | "updateDelay"
      | "updateResult"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "UpdateResult"): EventFragment;

  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getNextResultWithValidity",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getResultWithValidity",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastUpdateTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "priceSource",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "read", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "shouldUpdate",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateDelay",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateResult",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getNextResultWithValidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getResultWithValidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastUpdateTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "priceSource",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "read", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "shouldUpdate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateResult",
    data: BytesLike
  ): Result;
}

export namespace UpdateResultEvent {
  export type InputTuple = [
    _newMedian: BigNumberish,
    _lastUpdateTime: BigNumberish
  ];
  export type OutputTuple = [_newMedian: bigint, _lastUpdateTime: bigint];
  export interface OutputObject {
    _newMedian: bigint;
    _lastUpdateTime: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IDelayedOracleChild extends BaseContract {
  connect(runner?: ContractRunner | null): IDelayedOracleChild;
  waitForDeployment(): Promise<this>;

  interface: IDelayedOracleChildInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  factory: TypedContractMethod<[], [string], "view">;

  getNextResultWithValidity: TypedContractMethod<
    [],
    [[bigint, boolean] & { _result: bigint; _validity: boolean }],
    "view"
  >;

  getResultWithValidity: TypedContractMethod<
    [],
    [[bigint, boolean] & { _result: bigint; _validity: boolean }],
    "view"
  >;

  lastUpdateTime: TypedContractMethod<[], [bigint], "view">;

  priceSource: TypedContractMethod<[], [string], "view">;

  read: TypedContractMethod<[], [bigint], "view">;

  shouldUpdate: TypedContractMethod<[], [boolean], "view">;

  symbol: TypedContractMethod<[], [string], "view">;

  updateDelay: TypedContractMethod<[], [bigint], "view">;

  updateResult: TypedContractMethod<[], [boolean], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "factory"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getNextResultWithValidity"
  ): TypedContractMethod<
    [],
    [[bigint, boolean] & { _result: bigint; _validity: boolean }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getResultWithValidity"
  ): TypedContractMethod<
    [],
    [[bigint, boolean] & { _result: bigint; _validity: boolean }],
    "view"
  >;
  getFunction(
    nameOrSignature: "lastUpdateTime"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "priceSource"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "read"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "shouldUpdate"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "updateDelay"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "updateResult"
  ): TypedContractMethod<[], [boolean], "nonpayable">;

  getEvent(
    key: "UpdateResult"
  ): TypedContractEvent<
    UpdateResultEvent.InputTuple,
    UpdateResultEvent.OutputTuple,
    UpdateResultEvent.OutputObject
  >;

  filters: {
    "UpdateResult(uint256,uint256)": TypedContractEvent<
      UpdateResultEvent.InputTuple,
      UpdateResultEvent.OutputTuple,
      UpdateResultEvent.OutputObject
    >;
    UpdateResult: TypedContractEvent<
      UpdateResultEvent.InputTuple,
      UpdateResultEvent.OutputTuple,
      UpdateResultEvent.OutputObject
    >;
  };
}
