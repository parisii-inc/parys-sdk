/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface IRewardDistributorInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addAuthorization"
      | "authorizedAccounts(address)"
      | "authorizedAccounts()"
      | "claim"
      | "emergencyWidthdraw"
      | "epochCounter"
      | "epochDuration"
      | "isClaimed"
      | "lastUpdatedTime"
      | "merkleRoots"
      | "modifyParameters"
      | "multiClaim"
      | "pause"
      | "removeAuthorization"
      | "rootSetter"
      | "unpause"
      | "updateMerkleRoots"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AddAuthorization"
      | "ModifyParameters"
      | "RemoveAuthorization"
      | "RewardDistributorEmergencyWithdrawal"
      | "RewardDistributorMerkleRootUpdated"
      | "RewardDistributorRewardClaimed"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addAuthorization",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "authorizedAccounts(address)",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "authorizedAccounts()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claim",
    values: [AddressLike, BigNumberish, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWidthdraw",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "epochCounter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "epochDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isClaimed",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "lastUpdatedTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "merkleRoots",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "modifyParameters",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "multiClaim",
    values: [AddressLike[], BigNumberish[], BytesLike[][]]
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeAuthorization",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "rootSetter",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateMerkleRoots",
    values: [AddressLike[], BytesLike[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "addAuthorization",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "authorizedAccounts(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "authorizedAccounts()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWidthdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "epochCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "epochDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isClaimed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastUpdatedTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "merkleRoots",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "modifyParameters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "multiClaim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeAuthorization",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rootSetter", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateMerkleRoots",
    data: BytesLike
  ): Result;
}

export namespace AddAuthorizationEvent {
  export type InputTuple = [_account: AddressLike];
  export type OutputTuple = [_account: string];
  export interface OutputObject {
    _account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ModifyParametersEvent {
  export type InputTuple = [
    _param: BytesLike,
    _cType: BytesLike,
    _data: BytesLike
  ];
  export type OutputTuple = [_param: string, _cType: string, _data: string];
  export interface OutputObject {
    _param: string;
    _cType: string;
    _data: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RemoveAuthorizationEvent {
  export type InputTuple = [_account: AddressLike];
  export type OutputTuple = [_account: string];
  export interface OutputObject {
    _account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RewardDistributorEmergencyWithdrawalEvent {
  export type InputTuple = [
    _rescueReceiver: AddressLike,
    _rewardToken: AddressLike,
    _wad: BigNumberish
  ];
  export type OutputTuple = [
    _rescueReceiver: string,
    _rewardToken: string,
    _wad: bigint
  ];
  export interface OutputObject {
    _rescueReceiver: string;
    _rewardToken: string;
    _wad: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RewardDistributorMerkleRootUpdatedEvent {
  export type InputTuple = [
    _rewardToken: AddressLike,
    _merkleRoot: BytesLike,
    _epochCounter: BigNumberish
  ];
  export type OutputTuple = [
    _rewardToken: string,
    _merkleRoot: string,
    _epochCounter: bigint
  ];
  export interface OutputObject {
    _rewardToken: string;
    _merkleRoot: string;
    _epochCounter: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RewardDistributorRewardClaimedEvent {
  export type InputTuple = [
    _account: AddressLike,
    _rewardToken: AddressLike,
    _wad: BigNumberish
  ];
  export type OutputTuple = [
    _account: string,
    _rewardToken: string,
    _wad: bigint
  ];
  export interface OutputObject {
    _account: string;
    _rewardToken: string;
    _wad: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IRewardDistributor extends BaseContract {
  connect(runner?: ContractRunner | null): IRewardDistributor;
  waitForDeployment(): Promise<this>;

  interface: IRewardDistributorInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addAuthorization: TypedContractMethod<
    [_account: AddressLike],
    [void],
    "nonpayable"
  >;

  "authorizedAccounts(address)": TypedContractMethod<
    [_account: AddressLike],
    [boolean],
    "view"
  >;

  "authorizedAccounts()": TypedContractMethod<[], [string[]], "view">;

  claim: TypedContractMethod<
    [_token: AddressLike, _wad: BigNumberish, _merkleProof: BytesLike[]],
    [void],
    "nonpayable"
  >;

  emergencyWidthdraw: TypedContractMethod<
    [_rescueReceiver: AddressLike, _token: AddressLike, _wad: BigNumberish],
    [void],
    "nonpayable"
  >;

  epochCounter: TypedContractMethod<[], [bigint], "view">;

  epochDuration: TypedContractMethod<[], [bigint], "view">;

  isClaimed: TypedContractMethod<
    [_merkleRoot: BytesLike, _account: AddressLike],
    [boolean],
    "view"
  >;

  lastUpdatedTime: TypedContractMethod<[], [bigint], "view">;

  merkleRoots: TypedContractMethod<[_token: AddressLike], [string], "view">;

  modifyParameters: TypedContractMethod<
    [_param: BytesLike, _data: BytesLike],
    [void],
    "nonpayable"
  >;

  multiClaim: TypedContractMethod<
    [
      _tokens: AddressLike[],
      _wads: BigNumberish[],
      _merkleProofs: BytesLike[][]
    ],
    [void],
    "nonpayable"
  >;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  removeAuthorization: TypedContractMethod<
    [_account: AddressLike],
    [void],
    "nonpayable"
  >;

  rootSetter: TypedContractMethod<[], [string], "view">;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  updateMerkleRoots: TypedContractMethod<
    [_tokens: AddressLike[], _merkleRoots: BytesLike[]],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addAuthorization"
  ): TypedContractMethod<[_account: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "authorizedAccounts(address)"
  ): TypedContractMethod<[_account: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "authorizedAccounts()"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "claim"
  ): TypedContractMethod<
    [_token: AddressLike, _wad: BigNumberish, _merkleProof: BytesLike[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "emergencyWidthdraw"
  ): TypedContractMethod<
    [_rescueReceiver: AddressLike, _token: AddressLike, _wad: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "epochCounter"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "epochDuration"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "isClaimed"
  ): TypedContractMethod<
    [_merkleRoot: BytesLike, _account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "lastUpdatedTime"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "merkleRoots"
  ): TypedContractMethod<[_token: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "modifyParameters"
  ): TypedContractMethod<
    [_param: BytesLike, _data: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "multiClaim"
  ): TypedContractMethod<
    [
      _tokens: AddressLike[],
      _wads: BigNumberish[],
      _merkleProofs: BytesLike[][]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "removeAuthorization"
  ): TypedContractMethod<[_account: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "rootSetter"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateMerkleRoots"
  ): TypedContractMethod<
    [_tokens: AddressLike[], _merkleRoots: BytesLike[]],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "AddAuthorization"
  ): TypedContractEvent<
    AddAuthorizationEvent.InputTuple,
    AddAuthorizationEvent.OutputTuple,
    AddAuthorizationEvent.OutputObject
  >;
  getEvent(
    key: "ModifyParameters"
  ): TypedContractEvent<
    ModifyParametersEvent.InputTuple,
    ModifyParametersEvent.OutputTuple,
    ModifyParametersEvent.OutputObject
  >;
  getEvent(
    key: "RemoveAuthorization"
  ): TypedContractEvent<
    RemoveAuthorizationEvent.InputTuple,
    RemoveAuthorizationEvent.OutputTuple,
    RemoveAuthorizationEvent.OutputObject
  >;
  getEvent(
    key: "RewardDistributorEmergencyWithdrawal"
  ): TypedContractEvent<
    RewardDistributorEmergencyWithdrawalEvent.InputTuple,
    RewardDistributorEmergencyWithdrawalEvent.OutputTuple,
    RewardDistributorEmergencyWithdrawalEvent.OutputObject
  >;
  getEvent(
    key: "RewardDistributorMerkleRootUpdated"
  ): TypedContractEvent<
    RewardDistributorMerkleRootUpdatedEvent.InputTuple,
    RewardDistributorMerkleRootUpdatedEvent.OutputTuple,
    RewardDistributorMerkleRootUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "RewardDistributorRewardClaimed"
  ): TypedContractEvent<
    RewardDistributorRewardClaimedEvent.InputTuple,
    RewardDistributorRewardClaimedEvent.OutputTuple,
    RewardDistributorRewardClaimedEvent.OutputObject
  >;

  filters: {
    "AddAuthorization(address)": TypedContractEvent<
      AddAuthorizationEvent.InputTuple,
      AddAuthorizationEvent.OutputTuple,
      AddAuthorizationEvent.OutputObject
    >;
    AddAuthorization: TypedContractEvent<
      AddAuthorizationEvent.InputTuple,
      AddAuthorizationEvent.OutputTuple,
      AddAuthorizationEvent.OutputObject
    >;

    "ModifyParameters(bytes32,bytes32,bytes)": TypedContractEvent<
      ModifyParametersEvent.InputTuple,
      ModifyParametersEvent.OutputTuple,
      ModifyParametersEvent.OutputObject
    >;
    ModifyParameters: TypedContractEvent<
      ModifyParametersEvent.InputTuple,
      ModifyParametersEvent.OutputTuple,
      ModifyParametersEvent.OutputObject
    >;

    "RemoveAuthorization(address)": TypedContractEvent<
      RemoveAuthorizationEvent.InputTuple,
      RemoveAuthorizationEvent.OutputTuple,
      RemoveAuthorizationEvent.OutputObject
    >;
    RemoveAuthorization: TypedContractEvent<
      RemoveAuthorizationEvent.InputTuple,
      RemoveAuthorizationEvent.OutputTuple,
      RemoveAuthorizationEvent.OutputObject
    >;

    "RewardDistributorEmergencyWithdrawal(address,address,uint256)": TypedContractEvent<
      RewardDistributorEmergencyWithdrawalEvent.InputTuple,
      RewardDistributorEmergencyWithdrawalEvent.OutputTuple,
      RewardDistributorEmergencyWithdrawalEvent.OutputObject
    >;
    RewardDistributorEmergencyWithdrawal: TypedContractEvent<
      RewardDistributorEmergencyWithdrawalEvent.InputTuple,
      RewardDistributorEmergencyWithdrawalEvent.OutputTuple,
      RewardDistributorEmergencyWithdrawalEvent.OutputObject
    >;

    "RewardDistributorMerkleRootUpdated(address,bytes32,uint256)": TypedContractEvent<
      RewardDistributorMerkleRootUpdatedEvent.InputTuple,
      RewardDistributorMerkleRootUpdatedEvent.OutputTuple,
      RewardDistributorMerkleRootUpdatedEvent.OutputObject
    >;
    RewardDistributorMerkleRootUpdated: TypedContractEvent<
      RewardDistributorMerkleRootUpdatedEvent.InputTuple,
      RewardDistributorMerkleRootUpdatedEvent.OutputTuple,
      RewardDistributorMerkleRootUpdatedEvent.OutputObject
    >;

    "RewardDistributorRewardClaimed(address,address,uint256)": TypedContractEvent<
      RewardDistributorRewardClaimedEvent.InputTuple,
      RewardDistributorRewardClaimedEvent.OutputTuple,
      RewardDistributorRewardClaimedEvent.OutputObject
    >;
    RewardDistributorRewardClaimed: TypedContractEvent<
      RewardDistributorRewardClaimedEvent.InputTuple,
      RewardDistributorRewardClaimedEvent.OutputTuple,
      RewardDistributorRewardClaimedEvent.OutputObject
    >;
  };
}
