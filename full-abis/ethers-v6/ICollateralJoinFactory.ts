/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface ICollateralJoinFactoryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addAuthorization"
      | "authorizedAccounts(address)"
      | "authorizedAccounts()"
      | "collateralJoins"
      | "collateralJoinsList"
      | "collateralTypesList"
      | "contractEnabled"
      | "deployCollateralJoin"
      | "deployDelegatableCollateralJoin"
      | "disableCollateralJoin"
      | "disableContract"
      | "removeAuthorization"
      | "safeEngine"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AddAuthorization"
      | "DeployCollateralJoin"
      | "DisableCollateralJoin"
      | "DisableContract"
      | "RemoveAuthorization"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addAuthorization",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "authorizedAccounts(address)",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "authorizedAccounts()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "collateralJoins",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "collateralJoinsList",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "collateralTypesList",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "contractEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deployCollateralJoin",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "deployDelegatableCollateralJoin",
    values: [BytesLike, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "disableCollateralJoin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "disableContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeAuthorization",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "safeEngine",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "addAuthorization",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "authorizedAccounts(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "authorizedAccounts()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collateralJoins",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collateralJoinsList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collateralTypesList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contractEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployCollateralJoin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployDelegatableCollateralJoin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disableCollateralJoin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disableContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeAuthorization",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "safeEngine", data: BytesLike): Result;
}

export namespace AddAuthorizationEvent {
  export type InputTuple = [_account: AddressLike];
  export type OutputTuple = [_account: string];
  export interface OutputObject {
    _account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DeployCollateralJoinEvent {
  export type InputTuple = [
    _cType: BytesLike,
    _collateral: AddressLike,
    _collateralJoin: AddressLike
  ];
  export type OutputTuple = [
    _cType: string,
    _collateral: string,
    _collateralJoin: string
  ];
  export interface OutputObject {
    _cType: string;
    _collateral: string;
    _collateralJoin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DisableCollateralJoinEvent {
  export type InputTuple = [_collateralJoin: AddressLike];
  export type OutputTuple = [_collateralJoin: string];
  export interface OutputObject {
    _collateralJoin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DisableContractEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RemoveAuthorizationEvent {
  export type InputTuple = [_account: AddressLike];
  export type OutputTuple = [_account: string];
  export interface OutputObject {
    _account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ICollateralJoinFactory extends BaseContract {
  connect(runner?: ContractRunner | null): ICollateralJoinFactory;
  waitForDeployment(): Promise<this>;

  interface: ICollateralJoinFactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addAuthorization: TypedContractMethod<
    [_account: AddressLike],
    [void],
    "nonpayable"
  >;

  "authorizedAccounts(address)": TypedContractMethod<
    [_account: AddressLike],
    [boolean],
    "view"
  >;

  "authorizedAccounts()": TypedContractMethod<[], [string[]], "view">;

  collateralJoins: TypedContractMethod<[_cType: BytesLike], [string], "view">;

  collateralJoinsList: TypedContractMethod<[], [string[]], "view">;

  collateralTypesList: TypedContractMethod<[], [string[]], "view">;

  contractEnabled: TypedContractMethod<[], [boolean], "view">;

  deployCollateralJoin: TypedContractMethod<
    [_cType: BytesLike, _collateral: AddressLike],
    [string],
    "nonpayable"
  >;

  deployDelegatableCollateralJoin: TypedContractMethod<
    [_cType: BytesLike, _collateral: AddressLike, _delegatee: AddressLike],
    [string],
    "nonpayable"
  >;

  disableCollateralJoin: TypedContractMethod<
    [_cType: BytesLike],
    [void],
    "nonpayable"
  >;

  disableContract: TypedContractMethod<[], [void], "nonpayable">;

  removeAuthorization: TypedContractMethod<
    [_account: AddressLike],
    [void],
    "nonpayable"
  >;

  safeEngine: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addAuthorization"
  ): TypedContractMethod<[_account: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "authorizedAccounts(address)"
  ): TypedContractMethod<[_account: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "authorizedAccounts()"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "collateralJoins"
  ): TypedContractMethod<[_cType: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "collateralJoinsList"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "collateralTypesList"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "contractEnabled"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "deployCollateralJoin"
  ): TypedContractMethod<
    [_cType: BytesLike, _collateral: AddressLike],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "deployDelegatableCollateralJoin"
  ): TypedContractMethod<
    [_cType: BytesLike, _collateral: AddressLike, _delegatee: AddressLike],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "disableCollateralJoin"
  ): TypedContractMethod<[_cType: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "disableContract"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "removeAuthorization"
  ): TypedContractMethod<[_account: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "safeEngine"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "AddAuthorization"
  ): TypedContractEvent<
    AddAuthorizationEvent.InputTuple,
    AddAuthorizationEvent.OutputTuple,
    AddAuthorizationEvent.OutputObject
  >;
  getEvent(
    key: "DeployCollateralJoin"
  ): TypedContractEvent<
    DeployCollateralJoinEvent.InputTuple,
    DeployCollateralJoinEvent.OutputTuple,
    DeployCollateralJoinEvent.OutputObject
  >;
  getEvent(
    key: "DisableCollateralJoin"
  ): TypedContractEvent<
    DisableCollateralJoinEvent.InputTuple,
    DisableCollateralJoinEvent.OutputTuple,
    DisableCollateralJoinEvent.OutputObject
  >;
  getEvent(
    key: "DisableContract"
  ): TypedContractEvent<
    DisableContractEvent.InputTuple,
    DisableContractEvent.OutputTuple,
    DisableContractEvent.OutputObject
  >;
  getEvent(
    key: "RemoveAuthorization"
  ): TypedContractEvent<
    RemoveAuthorizationEvent.InputTuple,
    RemoveAuthorizationEvent.OutputTuple,
    RemoveAuthorizationEvent.OutputObject
  >;

  filters: {
    "AddAuthorization(address)": TypedContractEvent<
      AddAuthorizationEvent.InputTuple,
      AddAuthorizationEvent.OutputTuple,
      AddAuthorizationEvent.OutputObject
    >;
    AddAuthorization: TypedContractEvent<
      AddAuthorizationEvent.InputTuple,
      AddAuthorizationEvent.OutputTuple,
      AddAuthorizationEvent.OutputObject
    >;

    "DeployCollateralJoin(bytes32,address,address)": TypedContractEvent<
      DeployCollateralJoinEvent.InputTuple,
      DeployCollateralJoinEvent.OutputTuple,
      DeployCollateralJoinEvent.OutputObject
    >;
    DeployCollateralJoin: TypedContractEvent<
      DeployCollateralJoinEvent.InputTuple,
      DeployCollateralJoinEvent.OutputTuple,
      DeployCollateralJoinEvent.OutputObject
    >;

    "DisableCollateralJoin(address)": TypedContractEvent<
      DisableCollateralJoinEvent.InputTuple,
      DisableCollateralJoinEvent.OutputTuple,
      DisableCollateralJoinEvent.OutputObject
    >;
    DisableCollateralJoin: TypedContractEvent<
      DisableCollateralJoinEvent.InputTuple,
      DisableCollateralJoinEvent.OutputTuple,
      DisableCollateralJoinEvent.OutputObject
    >;

    "DisableContract()": TypedContractEvent<
      DisableContractEvent.InputTuple,
      DisableContractEvent.OutputTuple,
      DisableContractEvent.OutputObject
    >;
    DisableContract: TypedContractEvent<
      DisableContractEvent.InputTuple,
      DisableContractEvent.OutputTuple,
      DisableContractEvent.OutputObject
    >;

    "RemoveAuthorization(address)": TypedContractEvent<
      RemoveAuthorizationEvent.InputTuple,
      RemoveAuthorizationEvent.OutputTuple,
      RemoveAuthorizationEvent.OutputObject
    >;
    RemoveAuthorization: TypedContractEvent<
      RemoveAuthorizationEvent.InputTuple,
      RemoveAuthorizationEvent.OutputTuple,
      RemoveAuthorizationEvent.OutputObject
    >;
  };
}
