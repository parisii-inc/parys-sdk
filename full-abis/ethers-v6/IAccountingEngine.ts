/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace IAccountingEngine {
  export type AccountingEngineParamsStruct = {
    surplusIsTransferred: BigNumberish;
    surplusDelay: BigNumberish;
    popDebtDelay: BigNumberish;
    disableCooldown: BigNumberish;
    surplusAmount: BigNumberish;
    surplusBuffer: BigNumberish;
    debtAuctionMintedTokens: BigNumberish;
    debtAuctionBidSize: BigNumberish;
  };

  export type AccountingEngineParamsStructOutput = [
    surplusIsTransferred: bigint,
    surplusDelay: bigint,
    popDebtDelay: bigint,
    disableCooldown: bigint,
    surplusAmount: bigint,
    surplusBuffer: bigint,
    debtAuctionMintedTokens: bigint,
    debtAuctionBidSize: bigint
  ] & {
    surplusIsTransferred: bigint;
    surplusDelay: bigint;
    popDebtDelay: bigint;
    disableCooldown: bigint;
    surplusAmount: bigint;
    surplusBuffer: bigint;
    debtAuctionMintedTokens: bigint;
    debtAuctionBidSize: bigint;
  };
}

export interface IAccountingEngineInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "_params"
      | "addAuthorization"
      | "auctionDebt"
      | "auctionSurplus"
      | "authorizedAccounts(address)"
      | "authorizedAccounts()"
      | "cancelAuctionedDebtWithSurplus"
      | "contractEnabled"
      | "debtAuctionHouse"
      | "debtQueue"
      | "disableContract"
      | "disableTimestamp"
      | "extraSurplusReceiver"
      | "lastSurplusTime"
      | "modifyParameters"
      | "params"
      | "popDebtFromQueue"
      | "postSettlementSurplusDrain"
      | "pushDebtToQueue"
      | "removeAuthorization"
      | "safeEngine"
      | "settleDebt"
      | "surplusAuctionHouse"
      | "totalOnAuctionDebt"
      | "totalQueuedDebt"
      | "transferExtraSurplus"
      | "transferPostSettlementSurplus"
      | "unqueuedUnauctionedDebt"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AddAuthorization"
      | "AuctionDebt"
      | "AuctionSurplus"
      | "CancelDebt"
      | "DisableContract"
      | "ModifyParameters"
      | "PopDebtFromQueue"
      | "PushDebtToQueue"
      | "RemoveAuthorization"
      | "SettleDebt"
      | "TransferSurplus"
  ): EventFragment;

  encodeFunctionData(functionFragment: "_params", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addAuthorization",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "auctionDebt",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "auctionSurplus",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "authorizedAccounts(address)",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "authorizedAccounts()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cancelAuctionedDebtWithSurplus",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "contractEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "debtAuctionHouse",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "debtQueue",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "disableContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "disableTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "extraSurplusReceiver",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastSurplusTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "modifyParameters",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "params", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "popDebtFromQueue",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "postSettlementSurplusDrain",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pushDebtToQueue",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeAuthorization",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "safeEngine",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "settleDebt",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "surplusAuctionHouse",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalOnAuctionDebt",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalQueuedDebt",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferExtraSurplus",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferPostSettlementSurplus",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "unqueuedUnauctionedDebt",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "_params", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addAuthorization",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "auctionDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "auctionSurplus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "authorizedAccounts(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "authorizedAccounts()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelAuctionedDebtWithSurplus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contractEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "debtAuctionHouse",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "debtQueue", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "disableContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disableTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "extraSurplusReceiver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastSurplusTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "modifyParameters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "params", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "popDebtFromQueue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "postSettlementSurplusDrain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pushDebtToQueue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeAuthorization",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "safeEngine", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "settleDebt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "surplusAuctionHouse",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalOnAuctionDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalQueuedDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferExtraSurplus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferPostSettlementSurplus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unqueuedUnauctionedDebt",
    data: BytesLike
  ): Result;
}

export namespace AddAuthorizationEvent {
  export type InputTuple = [_account: AddressLike];
  export type OutputTuple = [_account: string];
  export interface OutputObject {
    _account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AuctionDebtEvent {
  export type InputTuple = [
    _id: BigNumberish,
    _initialBid: BigNumberish,
    _debtAuctioned: BigNumberish
  ];
  export type OutputTuple = [
    _id: bigint,
    _initialBid: bigint,
    _debtAuctioned: bigint
  ];
  export interface OutputObject {
    _id: bigint;
    _initialBid: bigint;
    _debtAuctioned: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AuctionSurplusEvent {
  export type InputTuple = [
    _id: BigNumberish,
    _initialBid: BigNumberish,
    _surplusAuctioned: BigNumberish
  ];
  export type OutputTuple = [
    _id: bigint,
    _initialBid: bigint,
    _surplusAuctioned: bigint
  ];
  export interface OutputObject {
    _id: bigint;
    _initialBid: bigint;
    _surplusAuctioned: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CancelDebtEvent {
  export type InputTuple = [
    _rad: BigNumberish,
    _coinBalance: BigNumberish,
    _debtBalance: BigNumberish
  ];
  export type OutputTuple = [
    _rad: bigint,
    _coinBalance: bigint,
    _debtBalance: bigint
  ];
  export interface OutputObject {
    _rad: bigint;
    _coinBalance: bigint;
    _debtBalance: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DisableContractEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ModifyParametersEvent {
  export type InputTuple = [
    _param: BytesLike,
    _cType: BytesLike,
    _data: BytesLike
  ];
  export type OutputTuple = [_param: string, _cType: string, _data: string];
  export interface OutputObject {
    _param: string;
    _cType: string;
    _data: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PopDebtFromQueueEvent {
  export type InputTuple = [
    _timestamp: BigNumberish,
    _debtAmount: BigNumberish
  ];
  export type OutputTuple = [_timestamp: bigint, _debtAmount: bigint];
  export interface OutputObject {
    _timestamp: bigint;
    _debtAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PushDebtToQueueEvent {
  export type InputTuple = [
    _timestamp: BigNumberish,
    _debtAmount: BigNumberish
  ];
  export type OutputTuple = [_timestamp: bigint, _debtAmount: bigint];
  export interface OutputObject {
    _timestamp: bigint;
    _debtAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RemoveAuthorizationEvent {
  export type InputTuple = [_account: AddressLike];
  export type OutputTuple = [_account: string];
  export interface OutputObject {
    _account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SettleDebtEvent {
  export type InputTuple = [
    _rad: BigNumberish,
    _coinBalance: BigNumberish,
    _debtBalance: BigNumberish
  ];
  export type OutputTuple = [
    _rad: bigint,
    _coinBalance: bigint,
    _debtBalance: bigint
  ];
  export interface OutputObject {
    _rad: bigint;
    _coinBalance: bigint;
    _debtBalance: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferSurplusEvent {
  export type InputTuple = [
    _extraSurplusReceiver: AddressLike,
    _surplusTransferred: BigNumberish
  ];
  export type OutputTuple = [
    _extraSurplusReceiver: string,
    _surplusTransferred: bigint
  ];
  export interface OutputObject {
    _extraSurplusReceiver: string;
    _surplusTransferred: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IAccountingEngine extends BaseContract {
  connect(runner?: ContractRunner | null): IAccountingEngine;
  waitForDeployment(): Promise<this>;

  interface: IAccountingEngineInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  _params: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint] & {
        _surplusIsTransferred: bigint;
        _surplusDelay: bigint;
        _popDebtDelay: bigint;
        _disableCooldown: bigint;
        _surplusAmount: bigint;
        _surplusBuffer: bigint;
        _debtAuctionMintedTokens: bigint;
        _debtAuctionBidSize: bigint;
      }
    ],
    "view"
  >;

  addAuthorization: TypedContractMethod<
    [_account: AddressLike],
    [void],
    "nonpayable"
  >;

  auctionDebt: TypedContractMethod<[], [bigint], "nonpayable">;

  auctionSurplus: TypedContractMethod<[], [bigint], "nonpayable">;

  "authorizedAccounts(address)": TypedContractMethod<
    [_account: AddressLike],
    [boolean],
    "view"
  >;

  "authorizedAccounts()": TypedContractMethod<[], [string[]], "view">;

  cancelAuctionedDebtWithSurplus: TypedContractMethod<
    [_rad: BigNumberish],
    [void],
    "nonpayable"
  >;

  contractEnabled: TypedContractMethod<[], [boolean], "view">;

  debtAuctionHouse: TypedContractMethod<[], [string], "view">;

  debtQueue: TypedContractMethod<
    [_blockTimestamp: BigNumberish],
    [bigint],
    "view"
  >;

  disableContract: TypedContractMethod<[], [void], "nonpayable">;

  disableTimestamp: TypedContractMethod<[], [bigint], "view">;

  extraSurplusReceiver: TypedContractMethod<[], [string], "view">;

  lastSurplusTime: TypedContractMethod<[], [bigint], "view">;

  modifyParameters: TypedContractMethod<
    [_param: BytesLike, _data: BytesLike],
    [void],
    "nonpayable"
  >;

  params: TypedContractMethod<
    [],
    [IAccountingEngine.AccountingEngineParamsStructOutput],
    "view"
  >;

  popDebtFromQueue: TypedContractMethod<
    [_debtBlockTimestamp: BigNumberish],
    [void],
    "nonpayable"
  >;

  postSettlementSurplusDrain: TypedContractMethod<[], [string], "view">;

  pushDebtToQueue: TypedContractMethod<
    [_debtBlock: BigNumberish],
    [void],
    "nonpayable"
  >;

  removeAuthorization: TypedContractMethod<
    [_account: AddressLike],
    [void],
    "nonpayable"
  >;

  safeEngine: TypedContractMethod<[], [string], "view">;

  settleDebt: TypedContractMethod<[_rad: BigNumberish], [void], "nonpayable">;

  surplusAuctionHouse: TypedContractMethod<[], [string], "view">;

  totalOnAuctionDebt: TypedContractMethod<[], [bigint], "view">;

  totalQueuedDebt: TypedContractMethod<[], [bigint], "view">;

  transferExtraSurplus: TypedContractMethod<[], [void], "nonpayable">;

  transferPostSettlementSurplus: TypedContractMethod<[], [void], "nonpayable">;

  unqueuedUnauctionedDebt: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "_params"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint] & {
        _surplusIsTransferred: bigint;
        _surplusDelay: bigint;
        _popDebtDelay: bigint;
        _disableCooldown: bigint;
        _surplusAmount: bigint;
        _surplusBuffer: bigint;
        _debtAuctionMintedTokens: bigint;
        _debtAuctionBidSize: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "addAuthorization"
  ): TypedContractMethod<[_account: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "auctionDebt"
  ): TypedContractMethod<[], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "auctionSurplus"
  ): TypedContractMethod<[], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "authorizedAccounts(address)"
  ): TypedContractMethod<[_account: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "authorizedAccounts()"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "cancelAuctionedDebtWithSurplus"
  ): TypedContractMethod<[_rad: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "contractEnabled"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "debtAuctionHouse"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "debtQueue"
  ): TypedContractMethod<[_blockTimestamp: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "disableContract"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "disableTimestamp"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "extraSurplusReceiver"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "lastSurplusTime"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "modifyParameters"
  ): TypedContractMethod<
    [_param: BytesLike, _data: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "params"
  ): TypedContractMethod<
    [],
    [IAccountingEngine.AccountingEngineParamsStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "popDebtFromQueue"
  ): TypedContractMethod<
    [_debtBlockTimestamp: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "postSettlementSurplusDrain"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pushDebtToQueue"
  ): TypedContractMethod<[_debtBlock: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "removeAuthorization"
  ): TypedContractMethod<[_account: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "safeEngine"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "settleDebt"
  ): TypedContractMethod<[_rad: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "surplusAuctionHouse"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "totalOnAuctionDebt"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalQueuedDebt"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferExtraSurplus"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferPostSettlementSurplus"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unqueuedUnauctionedDebt"
  ): TypedContractMethod<[], [bigint], "view">;

  getEvent(
    key: "AddAuthorization"
  ): TypedContractEvent<
    AddAuthorizationEvent.InputTuple,
    AddAuthorizationEvent.OutputTuple,
    AddAuthorizationEvent.OutputObject
  >;
  getEvent(
    key: "AuctionDebt"
  ): TypedContractEvent<
    AuctionDebtEvent.InputTuple,
    AuctionDebtEvent.OutputTuple,
    AuctionDebtEvent.OutputObject
  >;
  getEvent(
    key: "AuctionSurplus"
  ): TypedContractEvent<
    AuctionSurplusEvent.InputTuple,
    AuctionSurplusEvent.OutputTuple,
    AuctionSurplusEvent.OutputObject
  >;
  getEvent(
    key: "CancelDebt"
  ): TypedContractEvent<
    CancelDebtEvent.InputTuple,
    CancelDebtEvent.OutputTuple,
    CancelDebtEvent.OutputObject
  >;
  getEvent(
    key: "DisableContract"
  ): TypedContractEvent<
    DisableContractEvent.InputTuple,
    DisableContractEvent.OutputTuple,
    DisableContractEvent.OutputObject
  >;
  getEvent(
    key: "ModifyParameters"
  ): TypedContractEvent<
    ModifyParametersEvent.InputTuple,
    ModifyParametersEvent.OutputTuple,
    ModifyParametersEvent.OutputObject
  >;
  getEvent(
    key: "PopDebtFromQueue"
  ): TypedContractEvent<
    PopDebtFromQueueEvent.InputTuple,
    PopDebtFromQueueEvent.OutputTuple,
    PopDebtFromQueueEvent.OutputObject
  >;
  getEvent(
    key: "PushDebtToQueue"
  ): TypedContractEvent<
    PushDebtToQueueEvent.InputTuple,
    PushDebtToQueueEvent.OutputTuple,
    PushDebtToQueueEvent.OutputObject
  >;
  getEvent(
    key: "RemoveAuthorization"
  ): TypedContractEvent<
    RemoveAuthorizationEvent.InputTuple,
    RemoveAuthorizationEvent.OutputTuple,
    RemoveAuthorizationEvent.OutputObject
  >;
  getEvent(
    key: "SettleDebt"
  ): TypedContractEvent<
    SettleDebtEvent.InputTuple,
    SettleDebtEvent.OutputTuple,
    SettleDebtEvent.OutputObject
  >;
  getEvent(
    key: "TransferSurplus"
  ): TypedContractEvent<
    TransferSurplusEvent.InputTuple,
    TransferSurplusEvent.OutputTuple,
    TransferSurplusEvent.OutputObject
  >;

  filters: {
    "AddAuthorization(address)": TypedContractEvent<
      AddAuthorizationEvent.InputTuple,
      AddAuthorizationEvent.OutputTuple,
      AddAuthorizationEvent.OutputObject
    >;
    AddAuthorization: TypedContractEvent<
      AddAuthorizationEvent.InputTuple,
      AddAuthorizationEvent.OutputTuple,
      AddAuthorizationEvent.OutputObject
    >;

    "AuctionDebt(uint256,uint256,uint256)": TypedContractEvent<
      AuctionDebtEvent.InputTuple,
      AuctionDebtEvent.OutputTuple,
      AuctionDebtEvent.OutputObject
    >;
    AuctionDebt: TypedContractEvent<
      AuctionDebtEvent.InputTuple,
      AuctionDebtEvent.OutputTuple,
      AuctionDebtEvent.OutputObject
    >;

    "AuctionSurplus(uint256,uint256,uint256)": TypedContractEvent<
      AuctionSurplusEvent.InputTuple,
      AuctionSurplusEvent.OutputTuple,
      AuctionSurplusEvent.OutputObject
    >;
    AuctionSurplus: TypedContractEvent<
      AuctionSurplusEvent.InputTuple,
      AuctionSurplusEvent.OutputTuple,
      AuctionSurplusEvent.OutputObject
    >;

    "CancelDebt(uint256,uint256,uint256)": TypedContractEvent<
      CancelDebtEvent.InputTuple,
      CancelDebtEvent.OutputTuple,
      CancelDebtEvent.OutputObject
    >;
    CancelDebt: TypedContractEvent<
      CancelDebtEvent.InputTuple,
      CancelDebtEvent.OutputTuple,
      CancelDebtEvent.OutputObject
    >;

    "DisableContract()": TypedContractEvent<
      DisableContractEvent.InputTuple,
      DisableContractEvent.OutputTuple,
      DisableContractEvent.OutputObject
    >;
    DisableContract: TypedContractEvent<
      DisableContractEvent.InputTuple,
      DisableContractEvent.OutputTuple,
      DisableContractEvent.OutputObject
    >;

    "ModifyParameters(bytes32,bytes32,bytes)": TypedContractEvent<
      ModifyParametersEvent.InputTuple,
      ModifyParametersEvent.OutputTuple,
      ModifyParametersEvent.OutputObject
    >;
    ModifyParameters: TypedContractEvent<
      ModifyParametersEvent.InputTuple,
      ModifyParametersEvent.OutputTuple,
      ModifyParametersEvent.OutputObject
    >;

    "PopDebtFromQueue(uint256,uint256)": TypedContractEvent<
      PopDebtFromQueueEvent.InputTuple,
      PopDebtFromQueueEvent.OutputTuple,
      PopDebtFromQueueEvent.OutputObject
    >;
    PopDebtFromQueue: TypedContractEvent<
      PopDebtFromQueueEvent.InputTuple,
      PopDebtFromQueueEvent.OutputTuple,
      PopDebtFromQueueEvent.OutputObject
    >;

    "PushDebtToQueue(uint256,uint256)": TypedContractEvent<
      PushDebtToQueueEvent.InputTuple,
      PushDebtToQueueEvent.OutputTuple,
      PushDebtToQueueEvent.OutputObject
    >;
    PushDebtToQueue: TypedContractEvent<
      PushDebtToQueueEvent.InputTuple,
      PushDebtToQueueEvent.OutputTuple,
      PushDebtToQueueEvent.OutputObject
    >;

    "RemoveAuthorization(address)": TypedContractEvent<
      RemoveAuthorizationEvent.InputTuple,
      RemoveAuthorizationEvent.OutputTuple,
      RemoveAuthorizationEvent.OutputObject
    >;
    RemoveAuthorization: TypedContractEvent<
      RemoveAuthorizationEvent.InputTuple,
      RemoveAuthorizationEvent.OutputTuple,
      RemoveAuthorizationEvent.OutputObject
    >;

    "SettleDebt(uint256,uint256,uint256)": TypedContractEvent<
      SettleDebtEvent.InputTuple,
      SettleDebtEvent.OutputTuple,
      SettleDebtEvent.OutputObject
    >;
    SettleDebt: TypedContractEvent<
      SettleDebtEvent.InputTuple,
      SettleDebtEvent.OutputTuple,
      SettleDebtEvent.OutputObject
    >;

    "TransferSurplus(address,uint256)": TypedContractEvent<
      TransferSurplusEvent.InputTuple,
      TransferSurplusEvent.OutputTuple,
      TransferSurplusEvent.OutputObject
    >;
    TransferSurplus: TypedContractEvent<
      TransferSurplusEvent.InputTuple,
      TransferSurplusEvent.OutputTuple,
      TransferSurplusEvent.OutputObject
    >;
  };
}
