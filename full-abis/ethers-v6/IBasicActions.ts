/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface IBasicActionsInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "collectTokenCollateral"
      | "exitAllSystemCoins"
      | "exitCollateral"
      | "exitSystemCoins"
      | "freeTokenCollateral"
      | "generateDebt"
      | "joinSystemCoins"
      | "lockTokenCollateral"
      | "lockTokenCollateralAndGenerateDebt"
      | "openLockTokenCollateralAndGenerateDebt"
      | "openSAFE"
      | "repayAllDebt"
      | "repayAllDebtAndFreeTokenCollateral"
      | "repayDebt"
      | "repayDebtAndFreeTokenCollateral"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "collectTokenCollateral",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "exitAllSystemCoins",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "exitCollateral",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "exitSystemCoins",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "freeTokenCollateral",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "generateDebt",
    values: [AddressLike, AddressLike, AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "joinSystemCoins",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lockTokenCollateral",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lockTokenCollateralAndGenerateDebt",
    values: [
      AddressLike,
      AddressLike,
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "openLockTokenCollateralAndGenerateDebt",
    values: [
      AddressLike,
      AddressLike,
      AddressLike,
      AddressLike,
      BytesLike,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "openSAFE",
    values: [AddressLike, BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "repayAllDebt",
    values: [AddressLike, AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "repayAllDebtAndFreeTokenCollateral",
    values: [
      AddressLike,
      AddressLike,
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "repayDebt",
    values: [AddressLike, AddressLike, AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "repayDebtAndFreeTokenCollateral",
    values: [
      AddressLike,
      AddressLike,
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "collectTokenCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exitAllSystemCoins",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exitCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exitSystemCoins",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "freeTokenCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "generateDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "joinSystemCoins",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockTokenCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockTokenCollateralAndGenerateDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "openLockTokenCollateralAndGenerateDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "openSAFE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "repayAllDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "repayAllDebtAndFreeTokenCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "repayDebt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "repayDebtAndFreeTokenCollateral",
    data: BytesLike
  ): Result;
}

export interface IBasicActions extends BaseContract {
  connect(runner?: ContractRunner | null): IBasicActions;
  waitForDeployment(): Promise<this>;

  interface: IBasicActionsInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  collectTokenCollateral: TypedContractMethod<
    [
      _manager: AddressLike,
      _collateralJoin: AddressLike,
      _safeId: BigNumberish,
      _deltaWad: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  exitAllSystemCoins: TypedContractMethod<
    [_coinJoin: AddressLike],
    [void],
    "nonpayable"
  >;

  exitCollateral: TypedContractMethod<
    [_collateralJoin: AddressLike, _wad: BigNumberish],
    [void],
    "nonpayable"
  >;

  exitSystemCoins: TypedContractMethod<
    [_coinJoin: AddressLike, _coinsToExit: BigNumberish],
    [void],
    "nonpayable"
  >;

  freeTokenCollateral: TypedContractMethod<
    [
      _manager: AddressLike,
      _collateralJoin: AddressLike,
      _safeId: BigNumberish,
      _deltaWad: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  generateDebt: TypedContractMethod<
    [
      _manager: AddressLike,
      _taxCollector: AddressLike,
      _coinJoin: AddressLike,
      _safeId: BigNumberish,
      _deltaWad: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  joinSystemCoins: TypedContractMethod<
    [_coinJoin: AddressLike, _dst: AddressLike, _wad: BigNumberish],
    [void],
    "nonpayable"
  >;

  lockTokenCollateral: TypedContractMethod<
    [
      _manager: AddressLike,
      _collateralJoin: AddressLike,
      _safeId: BigNumberish,
      _deltaWad: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  lockTokenCollateralAndGenerateDebt: TypedContractMethod<
    [
      _manager: AddressLike,
      _taxCollector: AddressLike,
      _collateralJoin: AddressLike,
      _coinJoin: AddressLike,
      _safe: BigNumberish,
      _collateralAmount: BigNumberish,
      _deltaWad: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  openLockTokenCollateralAndGenerateDebt: TypedContractMethod<
    [
      _manager: AddressLike,
      _taxCollector: AddressLike,
      _collateralJoin: AddressLike,
      _coinJoin: AddressLike,
      _cType: BytesLike,
      _collateralAmount: BigNumberish,
      _deltaWad: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  openSAFE: TypedContractMethod<
    [_manager: AddressLike, _cType: BytesLike, _usr: AddressLike],
    [bigint],
    "nonpayable"
  >;

  repayAllDebt: TypedContractMethod<
    [
      _manager: AddressLike,
      _taxCollector: AddressLike,
      _coinJoin: AddressLike,
      _safeId: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  repayAllDebtAndFreeTokenCollateral: TypedContractMethod<
    [
      _manager: AddressLike,
      _taxCollector: AddressLike,
      _collateralJoin: AddressLike,
      _coinJoin: AddressLike,
      _safeId: BigNumberish,
      _collateralWad: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  repayDebt: TypedContractMethod<
    [
      _manager: AddressLike,
      _taxCollector: AddressLike,
      _coinJoin: AddressLike,
      _safeId: BigNumberish,
      _deltaWad: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  repayDebtAndFreeTokenCollateral: TypedContractMethod<
    [
      _manager: AddressLike,
      _taxCollector: AddressLike,
      _collateralJoin: AddressLike,
      _coinJoin: AddressLike,
      _safeId: BigNumberish,
      _collateralWad: BigNumberish,
      _debtWad: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "collectTokenCollateral"
  ): TypedContractMethod<
    [
      _manager: AddressLike,
      _collateralJoin: AddressLike,
      _safeId: BigNumberish,
      _deltaWad: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "exitAllSystemCoins"
  ): TypedContractMethod<[_coinJoin: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "exitCollateral"
  ): TypedContractMethod<
    [_collateralJoin: AddressLike, _wad: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "exitSystemCoins"
  ): TypedContractMethod<
    [_coinJoin: AddressLike, _coinsToExit: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "freeTokenCollateral"
  ): TypedContractMethod<
    [
      _manager: AddressLike,
      _collateralJoin: AddressLike,
      _safeId: BigNumberish,
      _deltaWad: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "generateDebt"
  ): TypedContractMethod<
    [
      _manager: AddressLike,
      _taxCollector: AddressLike,
      _coinJoin: AddressLike,
      _safeId: BigNumberish,
      _deltaWad: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "joinSystemCoins"
  ): TypedContractMethod<
    [_coinJoin: AddressLike, _dst: AddressLike, _wad: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "lockTokenCollateral"
  ): TypedContractMethod<
    [
      _manager: AddressLike,
      _collateralJoin: AddressLike,
      _safeId: BigNumberish,
      _deltaWad: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "lockTokenCollateralAndGenerateDebt"
  ): TypedContractMethod<
    [
      _manager: AddressLike,
      _taxCollector: AddressLike,
      _collateralJoin: AddressLike,
      _coinJoin: AddressLike,
      _safe: BigNumberish,
      _collateralAmount: BigNumberish,
      _deltaWad: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "openLockTokenCollateralAndGenerateDebt"
  ): TypedContractMethod<
    [
      _manager: AddressLike,
      _taxCollector: AddressLike,
      _collateralJoin: AddressLike,
      _coinJoin: AddressLike,
      _cType: BytesLike,
      _collateralAmount: BigNumberish,
      _deltaWad: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "openSAFE"
  ): TypedContractMethod<
    [_manager: AddressLike, _cType: BytesLike, _usr: AddressLike],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "repayAllDebt"
  ): TypedContractMethod<
    [
      _manager: AddressLike,
      _taxCollector: AddressLike,
      _coinJoin: AddressLike,
      _safeId: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "repayAllDebtAndFreeTokenCollateral"
  ): TypedContractMethod<
    [
      _manager: AddressLike,
      _taxCollector: AddressLike,
      _collateralJoin: AddressLike,
      _coinJoin: AddressLike,
      _safeId: BigNumberish,
      _collateralWad: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "repayDebt"
  ): TypedContractMethod<
    [
      _manager: AddressLike,
      _taxCollector: AddressLike,
      _coinJoin: AddressLike,
      _safeId: BigNumberish,
      _deltaWad: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "repayDebtAndFreeTokenCollateral"
  ): TypedContractMethod<
    [
      _manager: AddressLike,
      _taxCollector: AddressLike,
      _collateralJoin: AddressLike,
      _coinJoin: AddressLike,
      _safeId: BigNumberish,
      _collateralWad: BigNumberish,
      _debtWad: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  filters: {};
}
