/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace IPIDController {
  export type ControllerGainsStruct = { kp: BigNumberish; ki: BigNumberish };

  export type ControllerGainsStructOutput = [kp: bigint, ki: bigint] & {
    kp: bigint;
    ki: bigint;
  };

  export type DeviationObservationStruct = {
    timestamp: BigNumberish;
    proportional: BigNumberish;
    integral: BigNumberish;
  };

  export type DeviationObservationStructOutput = [
    timestamp: bigint,
    proportional: bigint,
    integral: bigint
  ] & { timestamp: bigint; proportional: bigint; integral: bigint };

  export type PIDControllerParamsStruct = {
    integralPeriodSize: BigNumberish;
    perSecondCumulativeLeak: BigNumberish;
    noiseBarrier: BigNumberish;
    feedbackOutputUpperBound: BigNumberish;
    feedbackOutputLowerBound: BigNumberish;
  };

  export type PIDControllerParamsStructOutput = [
    integralPeriodSize: bigint,
    perSecondCumulativeLeak: bigint,
    noiseBarrier: bigint,
    feedbackOutputUpperBound: bigint,
    feedbackOutputLowerBound: bigint
  ] & {
    integralPeriodSize: bigint;
    perSecondCumulativeLeak: bigint;
    noiseBarrier: bigint;
    feedbackOutputUpperBound: bigint;
    feedbackOutputLowerBound: bigint;
  };
}

export interface IPIDControllerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "_controllerGains"
      | "_deviationObservation"
      | "_params"
      | "addAuthorization"
      | "authorizedAccounts(address)"
      | "authorizedAccounts()"
      | "breaksNoiseBarrier"
      | "computeRate"
      | "controllerGains"
      | "deviationObservation"
      | "getBoundedRedemptionRate"
      | "getGainAdjustedPIOutput"
      | "getGainAdjustedTerms"
      | "getNextDeviationCumulative"
      | "getNextRedemptionRate"
      | "modifyParameters"
      | "params"
      | "removeAuthorization"
      | "seedProposer"
      | "timeSinceLastUpdate"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AddAuthorization"
      | "ModifyParameters"
      | "RemoveAuthorization"
      | "UpdateDeviation"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "_controllerGains",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_deviationObservation",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "_params", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addAuthorization",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "authorizedAccounts(address)",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "authorizedAccounts()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "breaksNoiseBarrier",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "computeRate",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "controllerGains",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deviationObservation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBoundedRedemptionRate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getGainAdjustedPIOutput",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getGainAdjustedTerms",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getNextDeviationCumulative",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getNextRedemptionRate",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "modifyParameters",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "params", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeAuthorization",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "seedProposer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "timeSinceLastUpdate",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "_controllerGains",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_deviationObservation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_params", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addAuthorization",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "authorizedAccounts(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "authorizedAccounts()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "breaksNoiseBarrier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "computeRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "controllerGains",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deviationObservation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBoundedRedemptionRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGainAdjustedPIOutput",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGainAdjustedTerms",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNextDeviationCumulative",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNextRedemptionRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "modifyParameters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "params", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeAuthorization",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "seedProposer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "timeSinceLastUpdate",
    data: BytesLike
  ): Result;
}

export namespace AddAuthorizationEvent {
  export type InputTuple = [_account: AddressLike];
  export type OutputTuple = [_account: string];
  export interface OutputObject {
    _account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ModifyParametersEvent {
  export type InputTuple = [
    _param: BytesLike,
    _cType: BytesLike,
    _data: BytesLike
  ];
  export type OutputTuple = [_param: string, _cType: string, _data: string];
  export interface OutputObject {
    _param: string;
    _cType: string;
    _data: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RemoveAuthorizationEvent {
  export type InputTuple = [_account: AddressLike];
  export type OutputTuple = [_account: string];
  export interface OutputObject {
    _account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdateDeviationEvent {
  export type InputTuple = [
    _proportionalDeviation: BigNumberish,
    _integralDeviation: BigNumberish,
    _deltaIntegralDeviation: BigNumberish
  ];
  export type OutputTuple = [
    _proportionalDeviation: bigint,
    _integralDeviation: bigint,
    _deltaIntegralDeviation: bigint
  ];
  export interface OutputObject {
    _proportionalDeviation: bigint;
    _integralDeviation: bigint;
    _deltaIntegralDeviation: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IPIDController extends BaseContract {
  connect(runner?: ContractRunner | null): IPIDController;
  waitForDeployment(): Promise<this>;

  interface: IPIDControllerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  _controllerGains: TypedContractMethod<
    [],
    [[bigint, bigint] & { _kp: bigint; _ki: bigint }],
    "view"
  >;

  _deviationObservation: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint] & {
        _timestamp: bigint;
        _proportional: bigint;
        _integral: bigint;
      }
    ],
    "view"
  >;

  _params: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint, bigint] & {
        _integralPeriodSize: bigint;
        _perSecondCumulativeLeak: bigint;
        _noiseBarrier: bigint;
        _feedbackOutputUpperBound: bigint;
        _feedbackOutputLowerBound: bigint;
      }
    ],
    "view"
  >;

  addAuthorization: TypedContractMethod<
    [_account: AddressLike],
    [void],
    "nonpayable"
  >;

  "authorizedAccounts(address)": TypedContractMethod<
    [_account: AddressLike],
    [boolean],
    "view"
  >;

  "authorizedAccounts()": TypedContractMethod<[], [string[]], "view">;

  breaksNoiseBarrier: TypedContractMethod<
    [_piSum: BigNumberish, _redemptionPrice: BigNumberish],
    [boolean],
    "view"
  >;

  computeRate: TypedContractMethod<
    [_marketPrice: BigNumberish, _redemptionPrice: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  controllerGains: TypedContractMethod<
    [],
    [IPIDController.ControllerGainsStructOutput],
    "view"
  >;

  deviationObservation: TypedContractMethod<
    [],
    [IPIDController.DeviationObservationStructOutput],
    "view"
  >;

  getBoundedRedemptionRate: TypedContractMethod<
    [_piOutput: BigNumberish],
    [bigint],
    "view"
  >;

  getGainAdjustedPIOutput: TypedContractMethod<
    [_proportionalTerm: BigNumberish, _integralTerm: BigNumberish],
    [bigint],
    "view"
  >;

  getGainAdjustedTerms: TypedContractMethod<
    [_proportionalTerm: BigNumberish, _integralTerm: BigNumberish],
    [[bigint, bigint] & { _proportionalGain: bigint; _integralGain: bigint }],
    "view"
  >;

  getNextDeviationCumulative: TypedContractMethod<
    [_proportionalTerm: BigNumberish, _accumulatedLeak: BigNumberish],
    [
      [bigint, bigint] & {
        _priceDeviationCumulative: bigint;
        _timeAdjustedDeviation: bigint;
      }
    ],
    "nonpayable"
  >;

  getNextRedemptionRate: TypedContractMethod<
    [
      _marketPrice: BigNumberish,
      _redemptionPrice: BigNumberish,
      _accumulatedLeak: BigNumberish
    ],
    [
      [bigint, bigint, bigint] & {
        _redemptionRate: bigint;
        _proportionalTerm: bigint;
        _integralTerm: bigint;
      }
    ],
    "view"
  >;

  modifyParameters: TypedContractMethod<
    [_param: BytesLike, _data: BytesLike],
    [void],
    "nonpayable"
  >;

  params: TypedContractMethod<
    [],
    [IPIDController.PIDControllerParamsStructOutput],
    "view"
  >;

  removeAuthorization: TypedContractMethod<
    [_account: AddressLike],
    [void],
    "nonpayable"
  >;

  seedProposer: TypedContractMethod<[], [string], "view">;

  timeSinceLastUpdate: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "_controllerGains"
  ): TypedContractMethod<
    [],
    [[bigint, bigint] & { _kp: bigint; _ki: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "_deviationObservation"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint] & {
        _timestamp: bigint;
        _proportional: bigint;
        _integral: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "_params"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint, bigint] & {
        _integralPeriodSize: bigint;
        _perSecondCumulativeLeak: bigint;
        _noiseBarrier: bigint;
        _feedbackOutputUpperBound: bigint;
        _feedbackOutputLowerBound: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "addAuthorization"
  ): TypedContractMethod<[_account: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "authorizedAccounts(address)"
  ): TypedContractMethod<[_account: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "authorizedAccounts()"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "breaksNoiseBarrier"
  ): TypedContractMethod<
    [_piSum: BigNumberish, _redemptionPrice: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "computeRate"
  ): TypedContractMethod<
    [_marketPrice: BigNumberish, _redemptionPrice: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "controllerGains"
  ): TypedContractMethod<
    [],
    [IPIDController.ControllerGainsStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "deviationObservation"
  ): TypedContractMethod<
    [],
    [IPIDController.DeviationObservationStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getBoundedRedemptionRate"
  ): TypedContractMethod<[_piOutput: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getGainAdjustedPIOutput"
  ): TypedContractMethod<
    [_proportionalTerm: BigNumberish, _integralTerm: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getGainAdjustedTerms"
  ): TypedContractMethod<
    [_proportionalTerm: BigNumberish, _integralTerm: BigNumberish],
    [[bigint, bigint] & { _proportionalGain: bigint; _integralGain: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getNextDeviationCumulative"
  ): TypedContractMethod<
    [_proportionalTerm: BigNumberish, _accumulatedLeak: BigNumberish],
    [
      [bigint, bigint] & {
        _priceDeviationCumulative: bigint;
        _timeAdjustedDeviation: bigint;
      }
    ],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getNextRedemptionRate"
  ): TypedContractMethod<
    [
      _marketPrice: BigNumberish,
      _redemptionPrice: BigNumberish,
      _accumulatedLeak: BigNumberish
    ],
    [
      [bigint, bigint, bigint] & {
        _redemptionRate: bigint;
        _proportionalTerm: bigint;
        _integralTerm: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "modifyParameters"
  ): TypedContractMethod<
    [_param: BytesLike, _data: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "params"
  ): TypedContractMethod<
    [],
    [IPIDController.PIDControllerParamsStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "removeAuthorization"
  ): TypedContractMethod<[_account: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "seedProposer"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "timeSinceLastUpdate"
  ): TypedContractMethod<[], [bigint], "view">;

  getEvent(
    key: "AddAuthorization"
  ): TypedContractEvent<
    AddAuthorizationEvent.InputTuple,
    AddAuthorizationEvent.OutputTuple,
    AddAuthorizationEvent.OutputObject
  >;
  getEvent(
    key: "ModifyParameters"
  ): TypedContractEvent<
    ModifyParametersEvent.InputTuple,
    ModifyParametersEvent.OutputTuple,
    ModifyParametersEvent.OutputObject
  >;
  getEvent(
    key: "RemoveAuthorization"
  ): TypedContractEvent<
    RemoveAuthorizationEvent.InputTuple,
    RemoveAuthorizationEvent.OutputTuple,
    RemoveAuthorizationEvent.OutputObject
  >;
  getEvent(
    key: "UpdateDeviation"
  ): TypedContractEvent<
    UpdateDeviationEvent.InputTuple,
    UpdateDeviationEvent.OutputTuple,
    UpdateDeviationEvent.OutputObject
  >;

  filters: {
    "AddAuthorization(address)": TypedContractEvent<
      AddAuthorizationEvent.InputTuple,
      AddAuthorizationEvent.OutputTuple,
      AddAuthorizationEvent.OutputObject
    >;
    AddAuthorization: TypedContractEvent<
      AddAuthorizationEvent.InputTuple,
      AddAuthorizationEvent.OutputTuple,
      AddAuthorizationEvent.OutputObject
    >;

    "ModifyParameters(bytes32,bytes32,bytes)": TypedContractEvent<
      ModifyParametersEvent.InputTuple,
      ModifyParametersEvent.OutputTuple,
      ModifyParametersEvent.OutputObject
    >;
    ModifyParameters: TypedContractEvent<
      ModifyParametersEvent.InputTuple,
      ModifyParametersEvent.OutputTuple,
      ModifyParametersEvent.OutputObject
    >;

    "RemoveAuthorization(address)": TypedContractEvent<
      RemoveAuthorizationEvent.InputTuple,
      RemoveAuthorizationEvent.OutputTuple,
      RemoveAuthorizationEvent.OutputObject
    >;
    RemoveAuthorization: TypedContractEvent<
      RemoveAuthorizationEvent.InputTuple,
      RemoveAuthorizationEvent.OutputTuple,
      RemoveAuthorizationEvent.OutputObject
    >;

    "UpdateDeviation(int256,int256,int256)": TypedContractEvent<
      UpdateDeviationEvent.InputTuple,
      UpdateDeviationEvent.OutputTuple,
      UpdateDeviationEvent.OutputObject
    >;
    UpdateDeviation: TypedContractEvent<
      UpdateDeviationEvent.InputTuple,
      UpdateDeviationEvent.OutputTuple,
      UpdateDeviationEvent.OutputObject
    >;
  };
}
