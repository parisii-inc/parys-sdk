/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface IChainlinkRelayerFactoryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addAuthorization"
      | "authorizedAccounts(address)"
      | "authorizedAccounts()"
      | "chainlinkRelayersList"
      | "deployChainlinkRelayer"
      | "removeAuthorization"
      | "sequencerUptimeFeed"
      | "setSequencerUptimeFeed"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AddAuthorization"
      | "NewChainlinkRelayer"
      | "RemoveAuthorization"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addAuthorization",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "authorizedAccounts(address)",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "authorizedAccounts()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "chainlinkRelayersList",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deployChainlinkRelayer",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeAuthorization",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "sequencerUptimeFeed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setSequencerUptimeFeed",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "addAuthorization",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "authorizedAccounts(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "authorizedAccounts()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "chainlinkRelayersList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployChainlinkRelayer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeAuthorization",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sequencerUptimeFeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSequencerUptimeFeed",
    data: BytesLike
  ): Result;
}

export namespace AddAuthorizationEvent {
  export type InputTuple = [_account: AddressLike];
  export type OutputTuple = [_account: string];
  export interface OutputObject {
    _account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewChainlinkRelayerEvent {
  export type InputTuple = [
    _chainlinkRelayer: AddressLike,
    _priceFeed: AddressLike,
    _sequencerUptimeFeed: AddressLike,
    _staleThreshold: BigNumberish
  ];
  export type OutputTuple = [
    _chainlinkRelayer: string,
    _priceFeed: string,
    _sequencerUptimeFeed: string,
    _staleThreshold: bigint
  ];
  export interface OutputObject {
    _chainlinkRelayer: string;
    _priceFeed: string;
    _sequencerUptimeFeed: string;
    _staleThreshold: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RemoveAuthorizationEvent {
  export type InputTuple = [_account: AddressLike];
  export type OutputTuple = [_account: string];
  export interface OutputObject {
    _account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IChainlinkRelayerFactory extends BaseContract {
  connect(runner?: ContractRunner | null): IChainlinkRelayerFactory;
  waitForDeployment(): Promise<this>;

  interface: IChainlinkRelayerFactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addAuthorization: TypedContractMethod<
    [_account: AddressLike],
    [void],
    "nonpayable"
  >;

  "authorizedAccounts(address)": TypedContractMethod<
    [_account: AddressLike],
    [boolean],
    "view"
  >;

  "authorizedAccounts()": TypedContractMethod<[], [string[]], "view">;

  chainlinkRelayersList: TypedContractMethod<[], [string[]], "view">;

  deployChainlinkRelayer: TypedContractMethod<
    [_priceFeed: AddressLike, _staleThreshold: BigNumberish],
    [string],
    "nonpayable"
  >;

  removeAuthorization: TypedContractMethod<
    [_account: AddressLike],
    [void],
    "nonpayable"
  >;

  sequencerUptimeFeed: TypedContractMethod<[], [string], "view">;

  setSequencerUptimeFeed: TypedContractMethod<
    [_sequencerUptimeFeed: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addAuthorization"
  ): TypedContractMethod<[_account: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "authorizedAccounts(address)"
  ): TypedContractMethod<[_account: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "authorizedAccounts()"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "chainlinkRelayersList"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "deployChainlinkRelayer"
  ): TypedContractMethod<
    [_priceFeed: AddressLike, _staleThreshold: BigNumberish],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "removeAuthorization"
  ): TypedContractMethod<[_account: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "sequencerUptimeFeed"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "setSequencerUptimeFeed"
  ): TypedContractMethod<
    [_sequencerUptimeFeed: AddressLike],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "AddAuthorization"
  ): TypedContractEvent<
    AddAuthorizationEvent.InputTuple,
    AddAuthorizationEvent.OutputTuple,
    AddAuthorizationEvent.OutputObject
  >;
  getEvent(
    key: "NewChainlinkRelayer"
  ): TypedContractEvent<
    NewChainlinkRelayerEvent.InputTuple,
    NewChainlinkRelayerEvent.OutputTuple,
    NewChainlinkRelayerEvent.OutputObject
  >;
  getEvent(
    key: "RemoveAuthorization"
  ): TypedContractEvent<
    RemoveAuthorizationEvent.InputTuple,
    RemoveAuthorizationEvent.OutputTuple,
    RemoveAuthorizationEvent.OutputObject
  >;

  filters: {
    "AddAuthorization(address)": TypedContractEvent<
      AddAuthorizationEvent.InputTuple,
      AddAuthorizationEvent.OutputTuple,
      AddAuthorizationEvent.OutputObject
    >;
    AddAuthorization: TypedContractEvent<
      AddAuthorizationEvent.InputTuple,
      AddAuthorizationEvent.OutputTuple,
      AddAuthorizationEvent.OutputObject
    >;

    "NewChainlinkRelayer(address,address,address,uint256)": TypedContractEvent<
      NewChainlinkRelayerEvent.InputTuple,
      NewChainlinkRelayerEvent.OutputTuple,
      NewChainlinkRelayerEvent.OutputObject
    >;
    NewChainlinkRelayer: TypedContractEvent<
      NewChainlinkRelayerEvent.InputTuple,
      NewChainlinkRelayerEvent.OutputTuple,
      NewChainlinkRelayerEvent.OutputObject
    >;

    "RemoveAuthorization(address)": TypedContractEvent<
      RemoveAuthorizationEvent.InputTuple,
      RemoveAuthorizationEvent.OutputTuple,
      RemoveAuthorizationEvent.OutputObject
    >;
    RemoveAuthorization: TypedContractEvent<
      RemoveAuthorizationEvent.InputTuple,
      RemoveAuthorizationEvent.OutputTuple,
      RemoveAuthorizationEvent.OutputObject
    >;
  };
}
