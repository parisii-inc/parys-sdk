/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace IStakingManager {
  export type EarnedDataStruct = {
    rewardToken: AddressLike;
    rewardAmount: BigNumberish;
  };

  export type EarnedDataStructOutput = [
    rewardToken: string,
    rewardAmount: bigint
  ] & { rewardToken: string; rewardAmount: bigint };

  export type StakingManagerParamsStruct = { cooldownPeriod: BigNumberish };

  export type StakingManagerParamsStructOutput = [cooldownPeriod: bigint] & {
    cooldownPeriod: bigint;
  };

  export type PendingWithdrawalStruct = {
    amount: BigNumberish;
    timestamp: BigNumberish;
  };

  export type PendingWithdrawalStructOutput = [
    amount: bigint,
    timestamp: bigint
  ] & { amount: bigint; timestamp: bigint };

  export type RewardTypeInfoStruct = {
    rewardToken: AddressLike;
    rewardPool: AddressLike;
    isActive: boolean;
    rewardIntegral: BigNumberish;
    rewardRemaining: BigNumberish;
  };

  export type RewardTypeInfoStructOutput = [
    rewardToken: string,
    rewardPool: string,
    isActive: boolean,
    rewardIntegral: bigint,
    rewardRemaining: bigint
  ] & {
    rewardToken: string;
    rewardPool: string;
    isActive: boolean;
    rewardIntegral: bigint;
    rewardRemaining: bigint;
  };
}

export interface IStakingManagerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "_params"
      | "_pendingWithdrawals"
      | "_rewardTypes"
      | "activateRewardType"
      | "addAuthorization"
      | "addRewardType"
      | "authorizedAccounts(address)"
      | "authorizedAccounts()"
      | "cancelWithdrawal"
      | "checkpoint"
      | "claimableReward"
      | "deactivateRewardType"
      | "earned"
      | "emergencyWithdraw"
      | "emergencyWithdrawReward"
      | "getReward"
      | "getRewardAndForward"
      | "initiateWithdrawal"
      | "modifyParameters"
      | "params"
      | "pendingWithdrawals"
      | "protocolToken"
      | "removeAuthorization"
      | "rewardIntegralFor"
      | "rewardTypes"
      | "rewards"
      | "stake"
      | "stakedBalances"
      | "stakingToken"
      | "userCheckpoint"
      | "withdraw"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AddAuthorization"
      | "ModifyParameters"
      | "RemoveAuthorization"
      | "StakingManagerActivateRewardType"
      | "StakingManagerAddRewardType"
      | "StakingManagerDeactivateRewardType"
      | "StakingManagerEmergencyRewardWithdrawal"
      | "StakingManagerEmergencyWithdrawal"
      | "StakingManagerRewardPaid"
      | "StakingManagerStaked"
      | "StakingManagerWithdrawalCancelled"
      | "StakingManagerWithdrawalInitiated"
      | "StakingManagerWithdrawn"
  ): EventFragment;

  encodeFunctionData(functionFragment: "_params", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "_pendingWithdrawals",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "_rewardTypes",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "activateRewardType",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addAuthorization",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "addRewardType",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "authorizedAccounts(address)",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "authorizedAccounts()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cancelWithdrawal",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "checkpoint",
    values: [[AddressLike, AddressLike]]
  ): string;
  encodeFunctionData(
    functionFragment: "claimableReward",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "deactivateRewardType",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "earned", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdrawReward",
    values: [BigNumberish, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getReward",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRewardAndForward",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initiateWithdrawal",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "modifyParameters",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "params", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingWithdrawals",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "protocolToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeAuthorization",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardIntegralFor",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardTypes",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "rewards", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "stake",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stakedBalances",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "stakingToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "userCheckpoint",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;

  decodeFunctionResult(functionFragment: "_params", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_pendingWithdrawals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_rewardTypes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "activateRewardType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addAuthorization",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addRewardType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "authorizedAccounts(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "authorizedAccounts()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelWithdrawal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "checkpoint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimableReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deactivateRewardType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "earned", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdrawReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getReward", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRewardAndForward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initiateWithdrawal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "modifyParameters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "params", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingWithdrawals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "protocolToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeAuthorization",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardIntegralFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardTypes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rewards", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stakedBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakingToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userCheckpoint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export namespace AddAuthorizationEvent {
  export type InputTuple = [_account: AddressLike];
  export type OutputTuple = [_account: string];
  export interface OutputObject {
    _account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ModifyParametersEvent {
  export type InputTuple = [
    _param: BytesLike,
    _cType: BytesLike,
    _data: BytesLike
  ];
  export type OutputTuple = [_param: string, _cType: string, _data: string];
  export interface OutputObject {
    _param: string;
    _cType: string;
    _data: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RemoveAuthorizationEvent {
  export type InputTuple = [_account: AddressLike];
  export type OutputTuple = [_account: string];
  export interface OutputObject {
    _account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StakingManagerActivateRewardTypeEvent {
  export type InputTuple = [_id: BigNumberish];
  export type OutputTuple = [_id: bigint];
  export interface OutputObject {
    _id: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StakingManagerAddRewardTypeEvent {
  export type InputTuple = [
    _id: BigNumberish,
    _rewardToken: AddressLike,
    _rewardPool: AddressLike
  ];
  export type OutputTuple = [
    _id: bigint,
    _rewardToken: string,
    _rewardPool: string
  ];
  export interface OutputObject {
    _id: bigint;
    _rewardToken: string;
    _rewardPool: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StakingManagerDeactivateRewardTypeEvent {
  export type InputTuple = [_id: BigNumberish];
  export type OutputTuple = [_id: bigint];
  export interface OutputObject {
    _id: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StakingManagerEmergencyRewardWithdrawalEvent {
  export type InputTuple = [
    _account: AddressLike,
    _rewardToken: AddressLike,
    _wad: BigNumberish
  ];
  export type OutputTuple = [
    _account: string,
    _rewardToken: string,
    _wad: bigint
  ];
  export interface OutputObject {
    _account: string;
    _rewardToken: string;
    _wad: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StakingManagerEmergencyWithdrawalEvent {
  export type InputTuple = [_account: AddressLike, _wad: BigNumberish];
  export type OutputTuple = [_account: string, _wad: bigint];
  export interface OutputObject {
    _account: string;
    _wad: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StakingManagerRewardPaidEvent {
  export type InputTuple = [
    _account: AddressLike,
    _rewardToken: AddressLike,
    _wad: BigNumberish,
    _destination: AddressLike
  ];
  export type OutputTuple = [
    _account: string,
    _rewardToken: string,
    _wad: bigint,
    _destination: string
  ];
  export interface OutputObject {
    _account: string;
    _rewardToken: string;
    _wad: bigint;
    _destination: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StakingManagerStakedEvent {
  export type InputTuple = [_account: AddressLike, _wad: BigNumberish];
  export type OutputTuple = [_account: string, _wad: bigint];
  export interface OutputObject {
    _account: string;
    _wad: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StakingManagerWithdrawalCancelledEvent {
  export type InputTuple = [_account: AddressLike, _wad: BigNumberish];
  export type OutputTuple = [_account: string, _wad: bigint];
  export interface OutputObject {
    _account: string;
    _wad: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StakingManagerWithdrawalInitiatedEvent {
  export type InputTuple = [_account: AddressLike, _wad: BigNumberish];
  export type OutputTuple = [_account: string, _wad: bigint];
  export interface OutputObject {
    _account: string;
    _wad: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StakingManagerWithdrawnEvent {
  export type InputTuple = [_account: AddressLike, _wad: BigNumberish];
  export type OutputTuple = [_account: string, _wad: bigint];
  export interface OutputObject {
    _account: string;
    _wad: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IStakingManager extends BaseContract {
  connect(runner?: ContractRunner | null): IStakingManager;
  waitForDeployment(): Promise<this>;

  interface: IStakingManagerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  _params: TypedContractMethod<[], [bigint], "view">;

  _pendingWithdrawals: TypedContractMethod<
    [_account: AddressLike],
    [[bigint, bigint] & { _amount: bigint; _timestamp: bigint }],
    "view"
  >;

  _rewardTypes: TypedContractMethod<
    [_id: BigNumberish],
    [
      [string, string, boolean, bigint, bigint] & {
        _rewardToken: string;
        _rewardPool: string;
        _isActive: boolean;
        _rewardIntegral: bigint;
        _rewardRemaining: bigint;
      }
    ],
    "view"
  >;

  activateRewardType: TypedContractMethod<
    [_id: BigNumberish],
    [void],
    "nonpayable"
  >;

  addAuthorization: TypedContractMethod<
    [_account: AddressLike],
    [void],
    "nonpayable"
  >;

  addRewardType: TypedContractMethod<
    [_rewardToken: AddressLike, _rewardPool: AddressLike],
    [void],
    "nonpayable"
  >;

  "authorizedAccounts(address)": TypedContractMethod<
    [_account: AddressLike],
    [boolean],
    "view"
  >;

  "authorizedAccounts()": TypedContractMethod<[], [string[]], "view">;

  cancelWithdrawal: TypedContractMethod<[], [void], "nonpayable">;

  checkpoint: TypedContractMethod<
    [_accounts: [AddressLike, AddressLike]],
    [void],
    "nonpayable"
  >;

  claimableReward: TypedContractMethod<
    [_id: BigNumberish, _user: AddressLike],
    [bigint],
    "view"
  >;

  deactivateRewardType: TypedContractMethod<
    [_id: BigNumberish],
    [void],
    "nonpayable"
  >;

  earned: TypedContractMethod<
    [_account: AddressLike],
    [IStakingManager.EarnedDataStructOutput[]],
    "nonpayable"
  >;

  emergencyWithdraw: TypedContractMethod<
    [_rescueReceiver: AddressLike, _wad: BigNumberish],
    [void],
    "nonpayable"
  >;

  emergencyWithdrawReward: TypedContractMethod<
    [_id: BigNumberish, _rescueReceiver: AddressLike, _wad: BigNumberish],
    [void],
    "nonpayable"
  >;

  getReward: TypedContractMethod<[_account: AddressLike], [void], "nonpayable">;

  getRewardAndForward: TypedContractMethod<
    [_account: AddressLike, _forwardTo: AddressLike],
    [void],
    "nonpayable"
  >;

  initiateWithdrawal: TypedContractMethod<
    [_wad: BigNumberish],
    [void],
    "nonpayable"
  >;

  modifyParameters: TypedContractMethod<
    [_param: BytesLike, _data: BytesLike],
    [void],
    "nonpayable"
  >;

  params: TypedContractMethod<
    [],
    [IStakingManager.StakingManagerParamsStructOutput],
    "view"
  >;

  pendingWithdrawals: TypedContractMethod<
    [_account: AddressLike],
    [IStakingManager.PendingWithdrawalStructOutput],
    "view"
  >;

  protocolToken: TypedContractMethod<[], [string], "view">;

  removeAuthorization: TypedContractMethod<
    [_account: AddressLike],
    [void],
    "nonpayable"
  >;

  rewardIntegralFor: TypedContractMethod<
    [_id: BigNumberish, _user: AddressLike],
    [bigint],
    "view"
  >;

  rewardTypes: TypedContractMethod<
    [_id: BigNumberish],
    [IStakingManager.RewardTypeInfoStructOutput],
    "view"
  >;

  rewards: TypedContractMethod<[], [bigint], "view">;

  stake: TypedContractMethod<
    [_account: AddressLike, _wad: BigNumberish],
    [void],
    "nonpayable"
  >;

  stakedBalances: TypedContractMethod<
    [_account: AddressLike],
    [bigint],
    "view"
  >;

  stakingToken: TypedContractMethod<[], [string], "view">;

  userCheckpoint: TypedContractMethod<
    [_account: AddressLike],
    [void],
    "nonpayable"
  >;

  withdraw: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "_params"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "_pendingWithdrawals"
  ): TypedContractMethod<
    [_account: AddressLike],
    [[bigint, bigint] & { _amount: bigint; _timestamp: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "_rewardTypes"
  ): TypedContractMethod<
    [_id: BigNumberish],
    [
      [string, string, boolean, bigint, bigint] & {
        _rewardToken: string;
        _rewardPool: string;
        _isActive: boolean;
        _rewardIntegral: bigint;
        _rewardRemaining: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "activateRewardType"
  ): TypedContractMethod<[_id: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "addAuthorization"
  ): TypedContractMethod<[_account: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "addRewardType"
  ): TypedContractMethod<
    [_rewardToken: AddressLike, _rewardPool: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "authorizedAccounts(address)"
  ): TypedContractMethod<[_account: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "authorizedAccounts()"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "cancelWithdrawal"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "checkpoint"
  ): TypedContractMethod<
    [_accounts: [AddressLike, AddressLike]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "claimableReward"
  ): TypedContractMethod<
    [_id: BigNumberish, _user: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "deactivateRewardType"
  ): TypedContractMethod<[_id: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "earned"
  ): TypedContractMethod<
    [_account: AddressLike],
    [IStakingManager.EarnedDataStructOutput[]],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "emergencyWithdraw"
  ): TypedContractMethod<
    [_rescueReceiver: AddressLike, _wad: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "emergencyWithdrawReward"
  ): TypedContractMethod<
    [_id: BigNumberish, _rescueReceiver: AddressLike, _wad: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getReward"
  ): TypedContractMethod<[_account: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getRewardAndForward"
  ): TypedContractMethod<
    [_account: AddressLike, _forwardTo: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "initiateWithdrawal"
  ): TypedContractMethod<[_wad: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "modifyParameters"
  ): TypedContractMethod<
    [_param: BytesLike, _data: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "params"
  ): TypedContractMethod<
    [],
    [IStakingManager.StakingManagerParamsStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "pendingWithdrawals"
  ): TypedContractMethod<
    [_account: AddressLike],
    [IStakingManager.PendingWithdrawalStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "protocolToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "removeAuthorization"
  ): TypedContractMethod<[_account: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "rewardIntegralFor"
  ): TypedContractMethod<
    [_id: BigNumberish, _user: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "rewardTypes"
  ): TypedContractMethod<
    [_id: BigNumberish],
    [IStakingManager.RewardTypeInfoStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "rewards"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "stake"
  ): TypedContractMethod<
    [_account: AddressLike, _wad: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "stakedBalances"
  ): TypedContractMethod<[_account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "stakingToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "userCheckpoint"
  ): TypedContractMethod<[_account: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "AddAuthorization"
  ): TypedContractEvent<
    AddAuthorizationEvent.InputTuple,
    AddAuthorizationEvent.OutputTuple,
    AddAuthorizationEvent.OutputObject
  >;
  getEvent(
    key: "ModifyParameters"
  ): TypedContractEvent<
    ModifyParametersEvent.InputTuple,
    ModifyParametersEvent.OutputTuple,
    ModifyParametersEvent.OutputObject
  >;
  getEvent(
    key: "RemoveAuthorization"
  ): TypedContractEvent<
    RemoveAuthorizationEvent.InputTuple,
    RemoveAuthorizationEvent.OutputTuple,
    RemoveAuthorizationEvent.OutputObject
  >;
  getEvent(
    key: "StakingManagerActivateRewardType"
  ): TypedContractEvent<
    StakingManagerActivateRewardTypeEvent.InputTuple,
    StakingManagerActivateRewardTypeEvent.OutputTuple,
    StakingManagerActivateRewardTypeEvent.OutputObject
  >;
  getEvent(
    key: "StakingManagerAddRewardType"
  ): TypedContractEvent<
    StakingManagerAddRewardTypeEvent.InputTuple,
    StakingManagerAddRewardTypeEvent.OutputTuple,
    StakingManagerAddRewardTypeEvent.OutputObject
  >;
  getEvent(
    key: "StakingManagerDeactivateRewardType"
  ): TypedContractEvent<
    StakingManagerDeactivateRewardTypeEvent.InputTuple,
    StakingManagerDeactivateRewardTypeEvent.OutputTuple,
    StakingManagerDeactivateRewardTypeEvent.OutputObject
  >;
  getEvent(
    key: "StakingManagerEmergencyRewardWithdrawal"
  ): TypedContractEvent<
    StakingManagerEmergencyRewardWithdrawalEvent.InputTuple,
    StakingManagerEmergencyRewardWithdrawalEvent.OutputTuple,
    StakingManagerEmergencyRewardWithdrawalEvent.OutputObject
  >;
  getEvent(
    key: "StakingManagerEmergencyWithdrawal"
  ): TypedContractEvent<
    StakingManagerEmergencyWithdrawalEvent.InputTuple,
    StakingManagerEmergencyWithdrawalEvent.OutputTuple,
    StakingManagerEmergencyWithdrawalEvent.OutputObject
  >;
  getEvent(
    key: "StakingManagerRewardPaid"
  ): TypedContractEvent<
    StakingManagerRewardPaidEvent.InputTuple,
    StakingManagerRewardPaidEvent.OutputTuple,
    StakingManagerRewardPaidEvent.OutputObject
  >;
  getEvent(
    key: "StakingManagerStaked"
  ): TypedContractEvent<
    StakingManagerStakedEvent.InputTuple,
    StakingManagerStakedEvent.OutputTuple,
    StakingManagerStakedEvent.OutputObject
  >;
  getEvent(
    key: "StakingManagerWithdrawalCancelled"
  ): TypedContractEvent<
    StakingManagerWithdrawalCancelledEvent.InputTuple,
    StakingManagerWithdrawalCancelledEvent.OutputTuple,
    StakingManagerWithdrawalCancelledEvent.OutputObject
  >;
  getEvent(
    key: "StakingManagerWithdrawalInitiated"
  ): TypedContractEvent<
    StakingManagerWithdrawalInitiatedEvent.InputTuple,
    StakingManagerWithdrawalInitiatedEvent.OutputTuple,
    StakingManagerWithdrawalInitiatedEvent.OutputObject
  >;
  getEvent(
    key: "StakingManagerWithdrawn"
  ): TypedContractEvent<
    StakingManagerWithdrawnEvent.InputTuple,
    StakingManagerWithdrawnEvent.OutputTuple,
    StakingManagerWithdrawnEvent.OutputObject
  >;

  filters: {
    "AddAuthorization(address)": TypedContractEvent<
      AddAuthorizationEvent.InputTuple,
      AddAuthorizationEvent.OutputTuple,
      AddAuthorizationEvent.OutputObject
    >;
    AddAuthorization: TypedContractEvent<
      AddAuthorizationEvent.InputTuple,
      AddAuthorizationEvent.OutputTuple,
      AddAuthorizationEvent.OutputObject
    >;

    "ModifyParameters(bytes32,bytes32,bytes)": TypedContractEvent<
      ModifyParametersEvent.InputTuple,
      ModifyParametersEvent.OutputTuple,
      ModifyParametersEvent.OutputObject
    >;
    ModifyParameters: TypedContractEvent<
      ModifyParametersEvent.InputTuple,
      ModifyParametersEvent.OutputTuple,
      ModifyParametersEvent.OutputObject
    >;

    "RemoveAuthorization(address)": TypedContractEvent<
      RemoveAuthorizationEvent.InputTuple,
      RemoveAuthorizationEvent.OutputTuple,
      RemoveAuthorizationEvent.OutputObject
    >;
    RemoveAuthorization: TypedContractEvent<
      RemoveAuthorizationEvent.InputTuple,
      RemoveAuthorizationEvent.OutputTuple,
      RemoveAuthorizationEvent.OutputObject
    >;

    "StakingManagerActivateRewardType(uint256)": TypedContractEvent<
      StakingManagerActivateRewardTypeEvent.InputTuple,
      StakingManagerActivateRewardTypeEvent.OutputTuple,
      StakingManagerActivateRewardTypeEvent.OutputObject
    >;
    StakingManagerActivateRewardType: TypedContractEvent<
      StakingManagerActivateRewardTypeEvent.InputTuple,
      StakingManagerActivateRewardTypeEvent.OutputTuple,
      StakingManagerActivateRewardTypeEvent.OutputObject
    >;

    "StakingManagerAddRewardType(uint256,address,address)": TypedContractEvent<
      StakingManagerAddRewardTypeEvent.InputTuple,
      StakingManagerAddRewardTypeEvent.OutputTuple,
      StakingManagerAddRewardTypeEvent.OutputObject
    >;
    StakingManagerAddRewardType: TypedContractEvent<
      StakingManagerAddRewardTypeEvent.InputTuple,
      StakingManagerAddRewardTypeEvent.OutputTuple,
      StakingManagerAddRewardTypeEvent.OutputObject
    >;

    "StakingManagerDeactivateRewardType(uint256)": TypedContractEvent<
      StakingManagerDeactivateRewardTypeEvent.InputTuple,
      StakingManagerDeactivateRewardTypeEvent.OutputTuple,
      StakingManagerDeactivateRewardTypeEvent.OutputObject
    >;
    StakingManagerDeactivateRewardType: TypedContractEvent<
      StakingManagerDeactivateRewardTypeEvent.InputTuple,
      StakingManagerDeactivateRewardTypeEvent.OutputTuple,
      StakingManagerDeactivateRewardTypeEvent.OutputObject
    >;

    "StakingManagerEmergencyRewardWithdrawal(address,address,uint256)": TypedContractEvent<
      StakingManagerEmergencyRewardWithdrawalEvent.InputTuple,
      StakingManagerEmergencyRewardWithdrawalEvent.OutputTuple,
      StakingManagerEmergencyRewardWithdrawalEvent.OutputObject
    >;
    StakingManagerEmergencyRewardWithdrawal: TypedContractEvent<
      StakingManagerEmergencyRewardWithdrawalEvent.InputTuple,
      StakingManagerEmergencyRewardWithdrawalEvent.OutputTuple,
      StakingManagerEmergencyRewardWithdrawalEvent.OutputObject
    >;

    "StakingManagerEmergencyWithdrawal(address,uint256)": TypedContractEvent<
      StakingManagerEmergencyWithdrawalEvent.InputTuple,
      StakingManagerEmergencyWithdrawalEvent.OutputTuple,
      StakingManagerEmergencyWithdrawalEvent.OutputObject
    >;
    StakingManagerEmergencyWithdrawal: TypedContractEvent<
      StakingManagerEmergencyWithdrawalEvent.InputTuple,
      StakingManagerEmergencyWithdrawalEvent.OutputTuple,
      StakingManagerEmergencyWithdrawalEvent.OutputObject
    >;

    "StakingManagerRewardPaid(address,address,uint256,address)": TypedContractEvent<
      StakingManagerRewardPaidEvent.InputTuple,
      StakingManagerRewardPaidEvent.OutputTuple,
      StakingManagerRewardPaidEvent.OutputObject
    >;
    StakingManagerRewardPaid: TypedContractEvent<
      StakingManagerRewardPaidEvent.InputTuple,
      StakingManagerRewardPaidEvent.OutputTuple,
      StakingManagerRewardPaidEvent.OutputObject
    >;

    "StakingManagerStaked(address,uint256)": TypedContractEvent<
      StakingManagerStakedEvent.InputTuple,
      StakingManagerStakedEvent.OutputTuple,
      StakingManagerStakedEvent.OutputObject
    >;
    StakingManagerStaked: TypedContractEvent<
      StakingManagerStakedEvent.InputTuple,
      StakingManagerStakedEvent.OutputTuple,
      StakingManagerStakedEvent.OutputObject
    >;

    "StakingManagerWithdrawalCancelled(address,uint256)": TypedContractEvent<
      StakingManagerWithdrawalCancelledEvent.InputTuple,
      StakingManagerWithdrawalCancelledEvent.OutputTuple,
      StakingManagerWithdrawalCancelledEvent.OutputObject
    >;
    StakingManagerWithdrawalCancelled: TypedContractEvent<
      StakingManagerWithdrawalCancelledEvent.InputTuple,
      StakingManagerWithdrawalCancelledEvent.OutputTuple,
      StakingManagerWithdrawalCancelledEvent.OutputObject
    >;

    "StakingManagerWithdrawalInitiated(address,uint256)": TypedContractEvent<
      StakingManagerWithdrawalInitiatedEvent.InputTuple,
      StakingManagerWithdrawalInitiatedEvent.OutputTuple,
      StakingManagerWithdrawalInitiatedEvent.OutputObject
    >;
    StakingManagerWithdrawalInitiated: TypedContractEvent<
      StakingManagerWithdrawalInitiatedEvent.InputTuple,
      StakingManagerWithdrawalInitiatedEvent.OutputTuple,
      StakingManagerWithdrawalInitiatedEvent.OutputObject
    >;

    "StakingManagerWithdrawn(address,uint256)": TypedContractEvent<
      StakingManagerWithdrawnEvent.InputTuple,
      StakingManagerWithdrawnEvent.OutputTuple,
      StakingManagerWithdrawnEvent.OutputObject
    >;
    StakingManagerWithdrawn: TypedContractEvent<
      StakingManagerWithdrawnEvent.InputTuple,
      StakingManagerWithdrawnEvent.OutputTuple,
      StakingManagerWithdrawnEvent.OutputObject
    >;
  };
}
