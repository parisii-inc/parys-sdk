/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace IGlobalSettlement {
  export type GlobalSettlementParamsStruct = { shutdownCooldown: BigNumberish };

  export type GlobalSettlementParamsStructOutput = [
    shutdownCooldown: bigint
  ] & { shutdownCooldown: bigint };
}

export interface IGlobalSettlementInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "_params"
      | "accountingEngine"
      | "addAuthorization"
      | "authorizedAccounts(address)"
      | "authorizedAccounts()"
      | "calculateCashPrice"
      | "coinBag"
      | "coinJoin"
      | "coinsUsedToRedeem"
      | "collateralAuctionHouseFactory"
      | "collateralCashPrice"
      | "collateralJoinFactory"
      | "collateralShortfall"
      | "collateralTotalDebt"
      | "contractEnabled"
      | "disableContract"
      | "fastTrackAuction"
      | "finalCoinPerCollateralPrice"
      | "freeCollateral"
      | "freezeCollateralType"
      | "liquidationEngine"
      | "modifyParameters"
      | "oracleRelayer"
      | "outstandingCoinSupply"
      | "params"
      | "prepareCoinsForRedeeming"
      | "processSAFE"
      | "redeemCollateral"
      | "removeAuthorization"
      | "safeEngine"
      | "setOutstandingCoinSupply"
      | "shutdownSystem"
      | "shutdownTime"
      | "stabilityFeeTreasury"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AddAuthorization"
      | "CalculateCashPrice"
      | "DisableContract"
      | "FastTrackAuction"
      | "FreeCollateral"
      | "FreezeCollateralType"
      | "ModifyParameters"
      | "PrepareCoinsForRedeeming"
      | "ProcessSAFE"
      | "RedeemCollateral"
      | "RemoveAuthorization"
      | "SetOutstandingCoinSupply"
      | "ShutdownSystem"
  ): EventFragment;

  encodeFunctionData(functionFragment: "_params", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "accountingEngine",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addAuthorization",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "authorizedAccounts(address)",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "authorizedAccounts()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calculateCashPrice",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "coinBag",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "coinJoin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "coinsUsedToRedeem",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "collateralAuctionHouseFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "collateralCashPrice",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "collateralJoinFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "collateralShortfall",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "collateralTotalDebt",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "contractEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "disableContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fastTrackAuction",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "finalCoinPerCollateralPrice",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "freeCollateral",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "freezeCollateralType",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidationEngine",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "modifyParameters",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "oracleRelayer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "outstandingCoinSupply",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "params", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "prepareCoinsForRedeeming",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "processSAFE",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemCollateral",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeAuthorization",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "safeEngine",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setOutstandingCoinSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "shutdownSystem",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "shutdownTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stabilityFeeTreasury",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "_params", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "accountingEngine",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addAuthorization",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "authorizedAccounts(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "authorizedAccounts()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateCashPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "coinBag", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "coinJoin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "coinsUsedToRedeem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collateralAuctionHouseFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collateralCashPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collateralJoinFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collateralShortfall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collateralTotalDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contractEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disableContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fastTrackAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "finalCoinPerCollateralPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "freeCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "freezeCollateralType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidationEngine",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "modifyParameters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "oracleRelayer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "outstandingCoinSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "params", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "prepareCoinsForRedeeming",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "processSAFE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeAuthorization",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "safeEngine", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setOutstandingCoinSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "shutdownSystem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "shutdownTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stabilityFeeTreasury",
    data: BytesLike
  ): Result;
}

export namespace AddAuthorizationEvent {
  export type InputTuple = [_account: AddressLike];
  export type OutputTuple = [_account: string];
  export interface OutputObject {
    _account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CalculateCashPriceEvent {
  export type InputTuple = [
    _cType: BytesLike,
    _collateralCashPrice: BigNumberish
  ];
  export type OutputTuple = [_cType: string, _collateralCashPrice: bigint];
  export interface OutputObject {
    _cType: string;
    _collateralCashPrice: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DisableContractEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FastTrackAuctionEvent {
  export type InputTuple = [
    _cType: BytesLike,
    _auctionId: BigNumberish,
    _collateralTotalDebt: BigNumberish
  ];
  export type OutputTuple = [
    _cType: string,
    _auctionId: bigint,
    _collateralTotalDebt: bigint
  ];
  export interface OutputObject {
    _cType: string;
    _auctionId: bigint;
    _collateralTotalDebt: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FreeCollateralEvent {
  export type InputTuple = [
    _cType: BytesLike,
    _sender: AddressLike,
    _collateralAmount: BigNumberish
  ];
  export type OutputTuple = [
    _cType: string,
    _sender: string,
    _collateralAmount: bigint
  ];
  export interface OutputObject {
    _cType: string;
    _sender: string;
    _collateralAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FreezeCollateralTypeEvent {
  export type InputTuple = [
    _cType: BytesLike,
    _finalCoinPerCollateralPrice: BigNumberish
  ];
  export type OutputTuple = [
    _cType: string,
    _finalCoinPerCollateralPrice: bigint
  ];
  export interface OutputObject {
    _cType: string;
    _finalCoinPerCollateralPrice: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ModifyParametersEvent {
  export type InputTuple = [
    _param: BytesLike,
    _cType: BytesLike,
    _data: BytesLike
  ];
  export type OutputTuple = [_param: string, _cType: string, _data: string];
  export interface OutputObject {
    _param: string;
    _cType: string;
    _data: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PrepareCoinsForRedeemingEvent {
  export type InputTuple = [_sender: AddressLike, _coinBag: BigNumberish];
  export type OutputTuple = [_sender: string, _coinBag: bigint];
  export interface OutputObject {
    _sender: string;
    _coinBag: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProcessSAFEEvent {
  export type InputTuple = [
    _cType: BytesLike,
    _safe: AddressLike,
    _collateralShortfall: BigNumberish
  ];
  export type OutputTuple = [
    _cType: string,
    _safe: string,
    _collateralShortfall: bigint
  ];
  export interface OutputObject {
    _cType: string;
    _safe: string;
    _collateralShortfall: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RedeemCollateralEvent {
  export type InputTuple = [
    _cType: BytesLike,
    _sender: AddressLike,
    _coinsAmount: BigNumberish,
    _collateralAmount: BigNumberish
  ];
  export type OutputTuple = [
    _cType: string,
    _sender: string,
    _coinsAmount: bigint,
    _collateralAmount: bigint
  ];
  export interface OutputObject {
    _cType: string;
    _sender: string;
    _coinsAmount: bigint;
    _collateralAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RemoveAuthorizationEvent {
  export type InputTuple = [_account: AddressLike];
  export type OutputTuple = [_account: string];
  export interface OutputObject {
    _account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetOutstandingCoinSupplyEvent {
  export type InputTuple = [_outstandingCoinSupply: BigNumberish];
  export type OutputTuple = [_outstandingCoinSupply: bigint];
  export interface OutputObject {
    _outstandingCoinSupply: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ShutdownSystemEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IGlobalSettlement extends BaseContract {
  connect(runner?: ContractRunner | null): IGlobalSettlement;
  waitForDeployment(): Promise<this>;

  interface: IGlobalSettlementInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  _params: TypedContractMethod<[], [bigint], "view">;

  accountingEngine: TypedContractMethod<[], [string], "view">;

  addAuthorization: TypedContractMethod<
    [_account: AddressLike],
    [void],
    "nonpayable"
  >;

  "authorizedAccounts(address)": TypedContractMethod<
    [_account: AddressLike],
    [boolean],
    "view"
  >;

  "authorizedAccounts()": TypedContractMethod<[], [string[]], "view">;

  calculateCashPrice: TypedContractMethod<
    [_cType: BytesLike],
    [void],
    "nonpayable"
  >;

  coinBag: TypedContractMethod<[_coinHolder: AddressLike], [bigint], "view">;

  coinJoin: TypedContractMethod<[], [string], "view">;

  coinsUsedToRedeem: TypedContractMethod<
    [_cType: BytesLike, _coinHolder: AddressLike],
    [bigint],
    "view"
  >;

  collateralAuctionHouseFactory: TypedContractMethod<[], [string], "view">;

  collateralCashPrice: TypedContractMethod<
    [_cType: BytesLike],
    [bigint],
    "view"
  >;

  collateralJoinFactory: TypedContractMethod<[], [string], "view">;

  collateralShortfall: TypedContractMethod<
    [_cType: BytesLike],
    [bigint],
    "view"
  >;

  collateralTotalDebt: TypedContractMethod<
    [_cType: BytesLike],
    [bigint],
    "view"
  >;

  contractEnabled: TypedContractMethod<[], [boolean], "view">;

  disableContract: TypedContractMethod<[], [void], "nonpayable">;

  fastTrackAuction: TypedContractMethod<
    [_cType: BytesLike, _auctionId: BigNumberish],
    [void],
    "nonpayable"
  >;

  finalCoinPerCollateralPrice: TypedContractMethod<
    [_cType: BytesLike],
    [bigint],
    "view"
  >;

  freeCollateral: TypedContractMethod<
    [_cType: BytesLike],
    [void],
    "nonpayable"
  >;

  freezeCollateralType: TypedContractMethod<
    [_cType: BytesLike],
    [void],
    "nonpayable"
  >;

  liquidationEngine: TypedContractMethod<[], [string], "view">;

  modifyParameters: TypedContractMethod<
    [_param: BytesLike, _data: BytesLike],
    [void],
    "nonpayable"
  >;

  oracleRelayer: TypedContractMethod<[], [string], "view">;

  outstandingCoinSupply: TypedContractMethod<[], [bigint], "view">;

  params: TypedContractMethod<
    [],
    [IGlobalSettlement.GlobalSettlementParamsStructOutput],
    "view"
  >;

  prepareCoinsForRedeeming: TypedContractMethod<
    [_coinAmount: BigNumberish],
    [void],
    "nonpayable"
  >;

  processSAFE: TypedContractMethod<
    [_cType: BytesLike, _safe: AddressLike],
    [void],
    "nonpayable"
  >;

  redeemCollateral: TypedContractMethod<
    [_cType: BytesLike, _coinsAmount: BigNumberish],
    [void],
    "nonpayable"
  >;

  removeAuthorization: TypedContractMethod<
    [_account: AddressLike],
    [void],
    "nonpayable"
  >;

  safeEngine: TypedContractMethod<[], [string], "view">;

  setOutstandingCoinSupply: TypedContractMethod<[], [void], "nonpayable">;

  shutdownSystem: TypedContractMethod<[], [void], "nonpayable">;

  shutdownTime: TypedContractMethod<[], [bigint], "view">;

  stabilityFeeTreasury: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "_params"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "accountingEngine"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "addAuthorization"
  ): TypedContractMethod<[_account: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "authorizedAccounts(address)"
  ): TypedContractMethod<[_account: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "authorizedAccounts()"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "calculateCashPrice"
  ): TypedContractMethod<[_cType: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "coinBag"
  ): TypedContractMethod<[_coinHolder: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "coinJoin"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "coinsUsedToRedeem"
  ): TypedContractMethod<
    [_cType: BytesLike, _coinHolder: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "collateralAuctionHouseFactory"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "collateralCashPrice"
  ): TypedContractMethod<[_cType: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "collateralJoinFactory"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "collateralShortfall"
  ): TypedContractMethod<[_cType: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "collateralTotalDebt"
  ): TypedContractMethod<[_cType: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "contractEnabled"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "disableContract"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "fastTrackAuction"
  ): TypedContractMethod<
    [_cType: BytesLike, _auctionId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "finalCoinPerCollateralPrice"
  ): TypedContractMethod<[_cType: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "freeCollateral"
  ): TypedContractMethod<[_cType: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "freezeCollateralType"
  ): TypedContractMethod<[_cType: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "liquidationEngine"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "modifyParameters"
  ): TypedContractMethod<
    [_param: BytesLike, _data: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "oracleRelayer"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "outstandingCoinSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "params"
  ): TypedContractMethod<
    [],
    [IGlobalSettlement.GlobalSettlementParamsStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "prepareCoinsForRedeeming"
  ): TypedContractMethod<[_coinAmount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "processSAFE"
  ): TypedContractMethod<
    [_cType: BytesLike, _safe: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "redeemCollateral"
  ): TypedContractMethod<
    [_cType: BytesLike, _coinsAmount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "removeAuthorization"
  ): TypedContractMethod<[_account: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "safeEngine"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "setOutstandingCoinSupply"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "shutdownSystem"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "shutdownTime"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "stabilityFeeTreasury"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "AddAuthorization"
  ): TypedContractEvent<
    AddAuthorizationEvent.InputTuple,
    AddAuthorizationEvent.OutputTuple,
    AddAuthorizationEvent.OutputObject
  >;
  getEvent(
    key: "CalculateCashPrice"
  ): TypedContractEvent<
    CalculateCashPriceEvent.InputTuple,
    CalculateCashPriceEvent.OutputTuple,
    CalculateCashPriceEvent.OutputObject
  >;
  getEvent(
    key: "DisableContract"
  ): TypedContractEvent<
    DisableContractEvent.InputTuple,
    DisableContractEvent.OutputTuple,
    DisableContractEvent.OutputObject
  >;
  getEvent(
    key: "FastTrackAuction"
  ): TypedContractEvent<
    FastTrackAuctionEvent.InputTuple,
    FastTrackAuctionEvent.OutputTuple,
    FastTrackAuctionEvent.OutputObject
  >;
  getEvent(
    key: "FreeCollateral"
  ): TypedContractEvent<
    FreeCollateralEvent.InputTuple,
    FreeCollateralEvent.OutputTuple,
    FreeCollateralEvent.OutputObject
  >;
  getEvent(
    key: "FreezeCollateralType"
  ): TypedContractEvent<
    FreezeCollateralTypeEvent.InputTuple,
    FreezeCollateralTypeEvent.OutputTuple,
    FreezeCollateralTypeEvent.OutputObject
  >;
  getEvent(
    key: "ModifyParameters"
  ): TypedContractEvent<
    ModifyParametersEvent.InputTuple,
    ModifyParametersEvent.OutputTuple,
    ModifyParametersEvent.OutputObject
  >;
  getEvent(
    key: "PrepareCoinsForRedeeming"
  ): TypedContractEvent<
    PrepareCoinsForRedeemingEvent.InputTuple,
    PrepareCoinsForRedeemingEvent.OutputTuple,
    PrepareCoinsForRedeemingEvent.OutputObject
  >;
  getEvent(
    key: "ProcessSAFE"
  ): TypedContractEvent<
    ProcessSAFEEvent.InputTuple,
    ProcessSAFEEvent.OutputTuple,
    ProcessSAFEEvent.OutputObject
  >;
  getEvent(
    key: "RedeemCollateral"
  ): TypedContractEvent<
    RedeemCollateralEvent.InputTuple,
    RedeemCollateralEvent.OutputTuple,
    RedeemCollateralEvent.OutputObject
  >;
  getEvent(
    key: "RemoveAuthorization"
  ): TypedContractEvent<
    RemoveAuthorizationEvent.InputTuple,
    RemoveAuthorizationEvent.OutputTuple,
    RemoveAuthorizationEvent.OutputObject
  >;
  getEvent(
    key: "SetOutstandingCoinSupply"
  ): TypedContractEvent<
    SetOutstandingCoinSupplyEvent.InputTuple,
    SetOutstandingCoinSupplyEvent.OutputTuple,
    SetOutstandingCoinSupplyEvent.OutputObject
  >;
  getEvent(
    key: "ShutdownSystem"
  ): TypedContractEvent<
    ShutdownSystemEvent.InputTuple,
    ShutdownSystemEvent.OutputTuple,
    ShutdownSystemEvent.OutputObject
  >;

  filters: {
    "AddAuthorization(address)": TypedContractEvent<
      AddAuthorizationEvent.InputTuple,
      AddAuthorizationEvent.OutputTuple,
      AddAuthorizationEvent.OutputObject
    >;
    AddAuthorization: TypedContractEvent<
      AddAuthorizationEvent.InputTuple,
      AddAuthorizationEvent.OutputTuple,
      AddAuthorizationEvent.OutputObject
    >;

    "CalculateCashPrice(bytes32,uint256)": TypedContractEvent<
      CalculateCashPriceEvent.InputTuple,
      CalculateCashPriceEvent.OutputTuple,
      CalculateCashPriceEvent.OutputObject
    >;
    CalculateCashPrice: TypedContractEvent<
      CalculateCashPriceEvent.InputTuple,
      CalculateCashPriceEvent.OutputTuple,
      CalculateCashPriceEvent.OutputObject
    >;

    "DisableContract()": TypedContractEvent<
      DisableContractEvent.InputTuple,
      DisableContractEvent.OutputTuple,
      DisableContractEvent.OutputObject
    >;
    DisableContract: TypedContractEvent<
      DisableContractEvent.InputTuple,
      DisableContractEvent.OutputTuple,
      DisableContractEvent.OutputObject
    >;

    "FastTrackAuction(bytes32,uint256,uint256)": TypedContractEvent<
      FastTrackAuctionEvent.InputTuple,
      FastTrackAuctionEvent.OutputTuple,
      FastTrackAuctionEvent.OutputObject
    >;
    FastTrackAuction: TypedContractEvent<
      FastTrackAuctionEvent.InputTuple,
      FastTrackAuctionEvent.OutputTuple,
      FastTrackAuctionEvent.OutputObject
    >;

    "FreeCollateral(bytes32,address,uint256)": TypedContractEvent<
      FreeCollateralEvent.InputTuple,
      FreeCollateralEvent.OutputTuple,
      FreeCollateralEvent.OutputObject
    >;
    FreeCollateral: TypedContractEvent<
      FreeCollateralEvent.InputTuple,
      FreeCollateralEvent.OutputTuple,
      FreeCollateralEvent.OutputObject
    >;

    "FreezeCollateralType(bytes32,uint256)": TypedContractEvent<
      FreezeCollateralTypeEvent.InputTuple,
      FreezeCollateralTypeEvent.OutputTuple,
      FreezeCollateralTypeEvent.OutputObject
    >;
    FreezeCollateralType: TypedContractEvent<
      FreezeCollateralTypeEvent.InputTuple,
      FreezeCollateralTypeEvent.OutputTuple,
      FreezeCollateralTypeEvent.OutputObject
    >;

    "ModifyParameters(bytes32,bytes32,bytes)": TypedContractEvent<
      ModifyParametersEvent.InputTuple,
      ModifyParametersEvent.OutputTuple,
      ModifyParametersEvent.OutputObject
    >;
    ModifyParameters: TypedContractEvent<
      ModifyParametersEvent.InputTuple,
      ModifyParametersEvent.OutputTuple,
      ModifyParametersEvent.OutputObject
    >;

    "PrepareCoinsForRedeeming(address,uint256)": TypedContractEvent<
      PrepareCoinsForRedeemingEvent.InputTuple,
      PrepareCoinsForRedeemingEvent.OutputTuple,
      PrepareCoinsForRedeemingEvent.OutputObject
    >;
    PrepareCoinsForRedeeming: TypedContractEvent<
      PrepareCoinsForRedeemingEvent.InputTuple,
      PrepareCoinsForRedeemingEvent.OutputTuple,
      PrepareCoinsForRedeemingEvent.OutputObject
    >;

    "ProcessSAFE(bytes32,address,uint256)": TypedContractEvent<
      ProcessSAFEEvent.InputTuple,
      ProcessSAFEEvent.OutputTuple,
      ProcessSAFEEvent.OutputObject
    >;
    ProcessSAFE: TypedContractEvent<
      ProcessSAFEEvent.InputTuple,
      ProcessSAFEEvent.OutputTuple,
      ProcessSAFEEvent.OutputObject
    >;

    "RedeemCollateral(bytes32,address,uint256,uint256)": TypedContractEvent<
      RedeemCollateralEvent.InputTuple,
      RedeemCollateralEvent.OutputTuple,
      RedeemCollateralEvent.OutputObject
    >;
    RedeemCollateral: TypedContractEvent<
      RedeemCollateralEvent.InputTuple,
      RedeemCollateralEvent.OutputTuple,
      RedeemCollateralEvent.OutputObject
    >;

    "RemoveAuthorization(address)": TypedContractEvent<
      RemoveAuthorizationEvent.InputTuple,
      RemoveAuthorizationEvent.OutputTuple,
      RemoveAuthorizationEvent.OutputObject
    >;
    RemoveAuthorization: TypedContractEvent<
      RemoveAuthorizationEvent.InputTuple,
      RemoveAuthorizationEvent.OutputTuple,
      RemoveAuthorizationEvent.OutputObject
    >;

    "SetOutstandingCoinSupply(uint256)": TypedContractEvent<
      SetOutstandingCoinSupplyEvent.InputTuple,
      SetOutstandingCoinSupplyEvent.OutputTuple,
      SetOutstandingCoinSupplyEvent.OutputObject
    >;
    SetOutstandingCoinSupply: TypedContractEvent<
      SetOutstandingCoinSupplyEvent.InputTuple,
      SetOutstandingCoinSupplyEvent.OutputTuple,
      SetOutstandingCoinSupplyEvent.OutputObject
    >;

    "ShutdownSystem()": TypedContractEvent<
      ShutdownSystemEvent.InputTuple,
      ShutdownSystemEvent.OutputTuple,
      ShutdownSystemEvent.OutputObject
    >;
    ShutdownSystem: TypedContractEvent<
      ShutdownSystemEvent.InputTuple,
      ShutdownSystemEvent.OutputTuple,
      ShutdownSystemEvent.OutputObject
    >;
  };
}
