import type { BaseContract, BigNumber, BytesLike, CallOverrides, PopulatedTransaction, Signer, utils } from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";
export interface RegistryInterface extends utils.Interface {
    functions: {
        "BJO_EUR_ORACLE()": FunctionFragment;
        "CARBON_PRICE_INDEX_EUR()": FunctionFragment;
        "CHAIN_ID_LOCAL()": FunctionFragment;
        "CHAIN_ID_MAINNET()": FunctionFragment;
        "CHAIN_ID_TESTNET()": FunctionFragment;
        "DELEGATE()": FunctionFragment;
        "EUA_EEX_EUR_ORACLE()": FunctionFragment;
        "OP_CHAINLINK_ETH_USD_FEED()": FunctionFragment;
        "OP_CHAINLINK_PEUA_USD_FEED()": FunctionFragment;
        "OP_CHAINLINK_SEQUENCER_UPTIME_FEED()": FunctionFragment;
        "OP_CHAINLINK_WSTETH_ETH_FEED()": FunctionFragment;
        "OP_PBJO()": FunctionFragment;
        "OP_PEUA()": FunctionFragment;
        "OP_WETH()": FunctionFragment;
        "UNISWAP_V3_FACTORY()": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "BJO_EUR_ORACLE" | "CARBON_PRICE_INDEX_EUR" | "CHAIN_ID_LOCAL" | "CHAIN_ID_MAINNET" | "CHAIN_ID_TESTNET" | "DELEGATE" | "EUA_EEX_EUR_ORACLE" | "OP_CHAINLINK_ETH_USD_FEED" | "OP_CHAINLINK_PEUA_USD_FEED" | "OP_CHAINLINK_SEQUENCER_UPTIME_FEED" | "OP_CHAINLINK_WSTETH_ETH_FEED" | "OP_PBJO" | "OP_PEUA" | "OP_WETH" | "UNISWAP_V3_FACTORY"): FunctionFragment;
    encodeFunctionData(functionFragment: "BJO_EUR_ORACLE", values?: undefined): string;
    encodeFunctionData(functionFragment: "CARBON_PRICE_INDEX_EUR", values?: undefined): string;
    encodeFunctionData(functionFragment: "CHAIN_ID_LOCAL", values?: undefined): string;
    encodeFunctionData(functionFragment: "CHAIN_ID_MAINNET", values?: undefined): string;
    encodeFunctionData(functionFragment: "CHAIN_ID_TESTNET", values?: undefined): string;
    encodeFunctionData(functionFragment: "DELEGATE", values?: undefined): string;
    encodeFunctionData(functionFragment: "EUA_EEX_EUR_ORACLE", values?: undefined): string;
    encodeFunctionData(functionFragment: "OP_CHAINLINK_ETH_USD_FEED", values?: undefined): string;
    encodeFunctionData(functionFragment: "OP_CHAINLINK_PEUA_USD_FEED", values?: undefined): string;
    encodeFunctionData(functionFragment: "OP_CHAINLINK_SEQUENCER_UPTIME_FEED", values?: undefined): string;
    encodeFunctionData(functionFragment: "OP_CHAINLINK_WSTETH_ETH_FEED", values?: undefined): string;
    encodeFunctionData(functionFragment: "OP_PBJO", values?: undefined): string;
    encodeFunctionData(functionFragment: "OP_PEUA", values?: undefined): string;
    encodeFunctionData(functionFragment: "OP_WETH", values?: undefined): string;
    encodeFunctionData(functionFragment: "UNISWAP_V3_FACTORY", values?: undefined): string;
    decodeFunctionResult(functionFragment: "BJO_EUR_ORACLE", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "CARBON_PRICE_INDEX_EUR", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "CHAIN_ID_LOCAL", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "CHAIN_ID_MAINNET", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "CHAIN_ID_TESTNET", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "DELEGATE", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "EUA_EEX_EUR_ORACLE", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "OP_CHAINLINK_ETH_USD_FEED", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "OP_CHAINLINK_PEUA_USD_FEED", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "OP_CHAINLINK_SEQUENCER_UPTIME_FEED", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "OP_CHAINLINK_WSTETH_ETH_FEED", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "OP_PBJO", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "OP_PEUA", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "OP_WETH", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "UNISWAP_V3_FACTORY", data: BytesLike): Result;
    events: {};
}
export interface Registry extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: RegistryInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        BJO_EUR_ORACLE(overrides?: CallOverrides): Promise<[string]>;
        CARBON_PRICE_INDEX_EUR(overrides?: CallOverrides): Promise<[string]>;
        CHAIN_ID_LOCAL(overrides?: CallOverrides): Promise<[BigNumber]>;
        CHAIN_ID_MAINNET(overrides?: CallOverrides): Promise<[BigNumber]>;
        CHAIN_ID_TESTNET(overrides?: CallOverrides): Promise<[BigNumber]>;
        DELEGATE(overrides?: CallOverrides): Promise<[string]>;
        EUA_EEX_EUR_ORACLE(overrides?: CallOverrides): Promise<[string]>;
        OP_CHAINLINK_ETH_USD_FEED(overrides?: CallOverrides): Promise<[string]>;
        OP_CHAINLINK_PEUA_USD_FEED(overrides?: CallOverrides): Promise<[string]>;
        OP_CHAINLINK_SEQUENCER_UPTIME_FEED(overrides?: CallOverrides): Promise<[string]>;
        OP_CHAINLINK_WSTETH_ETH_FEED(overrides?: CallOverrides): Promise<[string]>;
        OP_PBJO(overrides?: CallOverrides): Promise<[string]>;
        OP_PEUA(overrides?: CallOverrides): Promise<[string]>;
        OP_WETH(overrides?: CallOverrides): Promise<[string]>;
        UNISWAP_V3_FACTORY(overrides?: CallOverrides): Promise<[string]>;
    };
    BJO_EUR_ORACLE(overrides?: CallOverrides): Promise<string>;
    CARBON_PRICE_INDEX_EUR(overrides?: CallOverrides): Promise<string>;
    CHAIN_ID_LOCAL(overrides?: CallOverrides): Promise<BigNumber>;
    CHAIN_ID_MAINNET(overrides?: CallOverrides): Promise<BigNumber>;
    CHAIN_ID_TESTNET(overrides?: CallOverrides): Promise<BigNumber>;
    DELEGATE(overrides?: CallOverrides): Promise<string>;
    EUA_EEX_EUR_ORACLE(overrides?: CallOverrides): Promise<string>;
    OP_CHAINLINK_ETH_USD_FEED(overrides?: CallOverrides): Promise<string>;
    OP_CHAINLINK_PEUA_USD_FEED(overrides?: CallOverrides): Promise<string>;
    OP_CHAINLINK_SEQUENCER_UPTIME_FEED(overrides?: CallOverrides): Promise<string>;
    OP_CHAINLINK_WSTETH_ETH_FEED(overrides?: CallOverrides): Promise<string>;
    OP_PBJO(overrides?: CallOverrides): Promise<string>;
    OP_PEUA(overrides?: CallOverrides): Promise<string>;
    OP_WETH(overrides?: CallOverrides): Promise<string>;
    UNISWAP_V3_FACTORY(overrides?: CallOverrides): Promise<string>;
    callStatic: {
        BJO_EUR_ORACLE(overrides?: CallOverrides): Promise<string>;
        CARBON_PRICE_INDEX_EUR(overrides?: CallOverrides): Promise<string>;
        CHAIN_ID_LOCAL(overrides?: CallOverrides): Promise<BigNumber>;
        CHAIN_ID_MAINNET(overrides?: CallOverrides): Promise<BigNumber>;
        CHAIN_ID_TESTNET(overrides?: CallOverrides): Promise<BigNumber>;
        DELEGATE(overrides?: CallOverrides): Promise<string>;
        EUA_EEX_EUR_ORACLE(overrides?: CallOverrides): Promise<string>;
        OP_CHAINLINK_ETH_USD_FEED(overrides?: CallOverrides): Promise<string>;
        OP_CHAINLINK_PEUA_USD_FEED(overrides?: CallOverrides): Promise<string>;
        OP_CHAINLINK_SEQUENCER_UPTIME_FEED(overrides?: CallOverrides): Promise<string>;
        OP_CHAINLINK_WSTETH_ETH_FEED(overrides?: CallOverrides): Promise<string>;
        OP_PBJO(overrides?: CallOverrides): Promise<string>;
        OP_PEUA(overrides?: CallOverrides): Promise<string>;
        OP_WETH(overrides?: CallOverrides): Promise<string>;
        UNISWAP_V3_FACTORY(overrides?: CallOverrides): Promise<string>;
    };
    filters: {};
    estimateGas: {
        BJO_EUR_ORACLE(overrides?: CallOverrides): Promise<BigNumber>;
        CARBON_PRICE_INDEX_EUR(overrides?: CallOverrides): Promise<BigNumber>;
        CHAIN_ID_LOCAL(overrides?: CallOverrides): Promise<BigNumber>;
        CHAIN_ID_MAINNET(overrides?: CallOverrides): Promise<BigNumber>;
        CHAIN_ID_TESTNET(overrides?: CallOverrides): Promise<BigNumber>;
        DELEGATE(overrides?: CallOverrides): Promise<BigNumber>;
        EUA_EEX_EUR_ORACLE(overrides?: CallOverrides): Promise<BigNumber>;
        OP_CHAINLINK_ETH_USD_FEED(overrides?: CallOverrides): Promise<BigNumber>;
        OP_CHAINLINK_PEUA_USD_FEED(overrides?: CallOverrides): Promise<BigNumber>;
        OP_CHAINLINK_SEQUENCER_UPTIME_FEED(overrides?: CallOverrides): Promise<BigNumber>;
        OP_CHAINLINK_WSTETH_ETH_FEED(overrides?: CallOverrides): Promise<BigNumber>;
        OP_PBJO(overrides?: CallOverrides): Promise<BigNumber>;
        OP_PEUA(overrides?: CallOverrides): Promise<BigNumber>;
        OP_WETH(overrides?: CallOverrides): Promise<BigNumber>;
        UNISWAP_V3_FACTORY(overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        BJO_EUR_ORACLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        CARBON_PRICE_INDEX_EUR(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        CHAIN_ID_LOCAL(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        CHAIN_ID_MAINNET(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        CHAIN_ID_TESTNET(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        DELEGATE(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        EUA_EEX_EUR_ORACLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        OP_CHAINLINK_ETH_USD_FEED(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        OP_CHAINLINK_PEUA_USD_FEED(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        OP_CHAINLINK_SEQUENCER_UPTIME_FEED(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        OP_CHAINLINK_WSTETH_ETH_FEED(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        OP_PBJO(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        OP_PEUA(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        OP_WETH(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        UNISWAP_V3_FACTORY(overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}
