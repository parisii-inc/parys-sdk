/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface ContractsInterface extends utils.Interface {
  functions: {
    "accountingEngine()": FunctionFragment;
    "accountingJob()": FunctionFragment;
    "basicActions()": FunctionFragment;
    "chainlinkRelayerFactory()": FunctionFragment;
    "coinJoin()": FunctionFragment;
    "collateral(bytes32)": FunctionFragment;
    "collateralAuctionHouse(bytes32)": FunctionFragment;
    "collateralAuctionHouseFactory()": FunctionFragment;
    "collateralBidActions()": FunctionFragment;
    "collateralJoin(bytes32)": FunctionFragment;
    "collateralJoinFactory()": FunctionFragment;
    "collateralTypes(uint256)": FunctionFragment;
    "debtAuctionHouse()": FunctionFragment;
    "debtBidActions()": FunctionFragment;
    "delayedOracle(bytes32)": FunctionFragment;
    "delayedOracleFactory()": FunctionFragment;
    "delegate()": FunctionFragment;
    "delegatee(bytes32)": FunctionFragment;
    "denominatedOracleFactory()": FunctionFragment;
    "deployer()": FunctionFragment;
    "globalSettlement()": FunctionFragment;
    "globalSettlementActions()": FunctionFragment;
    "governor()": FunctionFragment;
    "liquidationEngine()": FunctionFragment;
    "liquidationJob()": FunctionFragment;
    "oracleJob()": FunctionFragment;
    "oracleRelayer()": FunctionFragment;
    "parysDelegatee()": FunctionFragment;
    "parysGovernor()": FunctionFragment;
    "pidController()": FunctionFragment;
    "pidRateSetter()": FunctionFragment;
    "postSettlementSurplusAuctionHouse()": FunctionFragment;
    "postSettlementSurplusBidActions()": FunctionFragment;
    "protocolToken()": FunctionFragment;
    "proxyFactory()": FunctionFragment;
    "rewardedActions()": FunctionFragment;
    "safeEngine()": FunctionFragment;
    "safeManager()": FunctionFragment;
    "settlementSurplusAuctioneer()": FunctionFragment;
    "stabilityFeeTreasury()": FunctionFragment;
    "surplusAuctionHouse()": FunctionFragment;
    "surplusBidActions()": FunctionFragment;
    "systemCoin()": FunctionFragment;
    "systemCoinOracle()": FunctionFragment;
    "systemCoinTaxCollector()": FunctionFragment;
    "taxCollector()": FunctionFragment;
    "timelock()": FunctionFragment;
    "tokenDistributor()": FunctionFragment;
    "uniV3RelayerFactory()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "accountingEngine"
      | "accountingJob"
      | "basicActions"
      | "chainlinkRelayerFactory"
      | "coinJoin"
      | "collateral"
      | "collateralAuctionHouse"
      | "collateralAuctionHouseFactory"
      | "collateralBidActions"
      | "collateralJoin"
      | "collateralJoinFactory"
      | "collateralTypes"
      | "debtAuctionHouse"
      | "debtBidActions"
      | "delayedOracle"
      | "delayedOracleFactory"
      | "delegate"
      | "delegatee"
      | "denominatedOracleFactory"
      | "deployer"
      | "globalSettlement"
      | "globalSettlementActions"
      | "governor"
      | "liquidationEngine"
      | "liquidationJob"
      | "oracleJob"
      | "oracleRelayer"
      | "parysDelegatee"
      | "parysGovernor"
      | "pidController"
      | "pidRateSetter"
      | "postSettlementSurplusAuctionHouse"
      | "postSettlementSurplusBidActions"
      | "protocolToken"
      | "proxyFactory"
      | "rewardedActions"
      | "safeEngine"
      | "safeManager"
      | "settlementSurplusAuctioneer"
      | "stabilityFeeTreasury"
      | "surplusAuctionHouse"
      | "surplusBidActions"
      | "systemCoin"
      | "systemCoinOracle"
      | "systemCoinTaxCollector"
      | "taxCollector"
      | "timelock"
      | "tokenDistributor"
      | "uniV3RelayerFactory"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "accountingEngine",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "accountingJob",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "basicActions",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "chainlinkRelayerFactory",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "coinJoin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "collateral",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "collateralAuctionHouse",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "collateralAuctionHouseFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "collateralBidActions",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "collateralJoin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "collateralJoinFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "collateralTypes",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "debtAuctionHouse",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "debtBidActions",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "delayedOracle",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "delayedOracleFactory",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "delegate", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "delegatee",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "denominatedOracleFactory",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "deployer", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "globalSettlement",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "globalSettlementActions",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "governor", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "liquidationEngine",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "liquidationJob",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "oracleJob", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "oracleRelayer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "parysDelegatee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "parysGovernor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pidController",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pidRateSetter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "postSettlementSurplusAuctionHouse",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "postSettlementSurplusBidActions",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "protocolToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proxyFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardedActions",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "safeEngine",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "safeManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "settlementSurplusAuctioneer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stabilityFeeTreasury",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "surplusAuctionHouse",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "surplusBidActions",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "systemCoin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "systemCoinOracle",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "systemCoinTaxCollector",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "taxCollector",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "timelock", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenDistributor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "uniV3RelayerFactory",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "accountingEngine",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "accountingJob",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "basicActions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "chainlinkRelayerFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "coinJoin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "collateral", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "collateralAuctionHouse",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collateralAuctionHouseFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collateralBidActions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collateralJoin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collateralJoinFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collateralTypes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "debtAuctionHouse",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "debtBidActions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "delayedOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "delayedOracleFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "delegate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "delegatee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "denominatedOracleFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deployer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "globalSettlement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "globalSettlementActions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "governor", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "liquidationEngine",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidationJob",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "oracleJob", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "oracleRelayer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "parysDelegatee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "parysGovernor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pidController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pidRateSetter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "postSettlementSurplusAuctionHouse",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "postSettlementSurplusBidActions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "protocolToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proxyFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardedActions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "safeEngine", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "safeManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "settlementSurplusAuctioneer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stabilityFeeTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "surplusAuctionHouse",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "surplusBidActions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "systemCoin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "systemCoinOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "systemCoinTaxCollector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "taxCollector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "timelock", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenDistributor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniV3RelayerFactory",
    data: BytesLike
  ): Result;

  events: {};
}

export interface Contracts extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ContractsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    accountingEngine(overrides?: CallOverrides): Promise<[string]>;

    accountingJob(overrides?: CallOverrides): Promise<[string]>;

    basicActions(overrides?: CallOverrides): Promise<[string]>;

    chainlinkRelayerFactory(overrides?: CallOverrides): Promise<[string]>;

    coinJoin(overrides?: CallOverrides): Promise<[string]>;

    collateral(arg0: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    collateralAuctionHouse(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    collateralAuctionHouseFactory(overrides?: CallOverrides): Promise<[string]>;

    collateralBidActions(overrides?: CallOverrides): Promise<[string]>;

    collateralJoin(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    collateralJoinFactory(overrides?: CallOverrides): Promise<[string]>;

    collateralTypes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    debtAuctionHouse(overrides?: CallOverrides): Promise<[string]>;

    debtBidActions(overrides?: CallOverrides): Promise<[string]>;

    delayedOracle(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    delayedOracleFactory(overrides?: CallOverrides): Promise<[string]>;

    delegate(overrides?: CallOverrides): Promise<[string]>;

    delegatee(arg0: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    denominatedOracleFactory(overrides?: CallOverrides): Promise<[string]>;

    deployer(overrides?: CallOverrides): Promise<[string]>;

    globalSettlement(overrides?: CallOverrides): Promise<[string]>;

    globalSettlementActions(overrides?: CallOverrides): Promise<[string]>;

    governor(overrides?: CallOverrides): Promise<[string]>;

    liquidationEngine(overrides?: CallOverrides): Promise<[string]>;

    liquidationJob(overrides?: CallOverrides): Promise<[string]>;

    oracleJob(overrides?: CallOverrides): Promise<[string]>;

    oracleRelayer(overrides?: CallOverrides): Promise<[string]>;

    parysDelegatee(overrides?: CallOverrides): Promise<[string]>;

    parysGovernor(overrides?: CallOverrides): Promise<[string]>;

    pidController(overrides?: CallOverrides): Promise<[string]>;

    pidRateSetter(overrides?: CallOverrides): Promise<[string]>;

    postSettlementSurplusAuctionHouse(
      overrides?: CallOverrides
    ): Promise<[string]>;

    postSettlementSurplusBidActions(
      overrides?: CallOverrides
    ): Promise<[string]>;

    protocolToken(overrides?: CallOverrides): Promise<[string]>;

    proxyFactory(overrides?: CallOverrides): Promise<[string]>;

    rewardedActions(overrides?: CallOverrides): Promise<[string]>;

    safeEngine(overrides?: CallOverrides): Promise<[string]>;

    safeManager(overrides?: CallOverrides): Promise<[string]>;

    settlementSurplusAuctioneer(overrides?: CallOverrides): Promise<[string]>;

    stabilityFeeTreasury(overrides?: CallOverrides): Promise<[string]>;

    surplusAuctionHouse(overrides?: CallOverrides): Promise<[string]>;

    surplusBidActions(overrides?: CallOverrides): Promise<[string]>;

    systemCoin(overrides?: CallOverrides): Promise<[string]>;

    systemCoinOracle(overrides?: CallOverrides): Promise<[string]>;

    systemCoinTaxCollector(overrides?: CallOverrides): Promise<[string]>;

    taxCollector(overrides?: CallOverrides): Promise<[string]>;

    timelock(overrides?: CallOverrides): Promise<[string]>;

    tokenDistributor(overrides?: CallOverrides): Promise<[string]>;

    uniV3RelayerFactory(overrides?: CallOverrides): Promise<[string]>;
  };

  accountingEngine(overrides?: CallOverrides): Promise<string>;

  accountingJob(overrides?: CallOverrides): Promise<string>;

  basicActions(overrides?: CallOverrides): Promise<string>;

  chainlinkRelayerFactory(overrides?: CallOverrides): Promise<string>;

  coinJoin(overrides?: CallOverrides): Promise<string>;

  collateral(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

  collateralAuctionHouse(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  collateralAuctionHouseFactory(overrides?: CallOverrides): Promise<string>;

  collateralBidActions(overrides?: CallOverrides): Promise<string>;

  collateralJoin(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

  collateralJoinFactory(overrides?: CallOverrides): Promise<string>;

  collateralTypes(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  debtAuctionHouse(overrides?: CallOverrides): Promise<string>;

  debtBidActions(overrides?: CallOverrides): Promise<string>;

  delayedOracle(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

  delayedOracleFactory(overrides?: CallOverrides): Promise<string>;

  delegate(overrides?: CallOverrides): Promise<string>;

  delegatee(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

  denominatedOracleFactory(overrides?: CallOverrides): Promise<string>;

  deployer(overrides?: CallOverrides): Promise<string>;

  globalSettlement(overrides?: CallOverrides): Promise<string>;

  globalSettlementActions(overrides?: CallOverrides): Promise<string>;

  governor(overrides?: CallOverrides): Promise<string>;

  liquidationEngine(overrides?: CallOverrides): Promise<string>;

  liquidationJob(overrides?: CallOverrides): Promise<string>;

  oracleJob(overrides?: CallOverrides): Promise<string>;

  oracleRelayer(overrides?: CallOverrides): Promise<string>;

  parysDelegatee(overrides?: CallOverrides): Promise<string>;

  parysGovernor(overrides?: CallOverrides): Promise<string>;

  pidController(overrides?: CallOverrides): Promise<string>;

  pidRateSetter(overrides?: CallOverrides): Promise<string>;

  postSettlementSurplusAuctionHouse(overrides?: CallOverrides): Promise<string>;

  postSettlementSurplusBidActions(overrides?: CallOverrides): Promise<string>;

  protocolToken(overrides?: CallOverrides): Promise<string>;

  proxyFactory(overrides?: CallOverrides): Promise<string>;

  rewardedActions(overrides?: CallOverrides): Promise<string>;

  safeEngine(overrides?: CallOverrides): Promise<string>;

  safeManager(overrides?: CallOverrides): Promise<string>;

  settlementSurplusAuctioneer(overrides?: CallOverrides): Promise<string>;

  stabilityFeeTreasury(overrides?: CallOverrides): Promise<string>;

  surplusAuctionHouse(overrides?: CallOverrides): Promise<string>;

  surplusBidActions(overrides?: CallOverrides): Promise<string>;

  systemCoin(overrides?: CallOverrides): Promise<string>;

  systemCoinOracle(overrides?: CallOverrides): Promise<string>;

  systemCoinTaxCollector(overrides?: CallOverrides): Promise<string>;

  taxCollector(overrides?: CallOverrides): Promise<string>;

  timelock(overrides?: CallOverrides): Promise<string>;

  tokenDistributor(overrides?: CallOverrides): Promise<string>;

  uniV3RelayerFactory(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    accountingEngine(overrides?: CallOverrides): Promise<string>;

    accountingJob(overrides?: CallOverrides): Promise<string>;

    basicActions(overrides?: CallOverrides): Promise<string>;

    chainlinkRelayerFactory(overrides?: CallOverrides): Promise<string>;

    coinJoin(overrides?: CallOverrides): Promise<string>;

    collateral(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

    collateralAuctionHouse(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    collateralAuctionHouseFactory(overrides?: CallOverrides): Promise<string>;

    collateralBidActions(overrides?: CallOverrides): Promise<string>;

    collateralJoin(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

    collateralJoinFactory(overrides?: CallOverrides): Promise<string>;

    collateralTypes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    debtAuctionHouse(overrides?: CallOverrides): Promise<string>;

    debtBidActions(overrides?: CallOverrides): Promise<string>;

    delayedOracle(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

    delayedOracleFactory(overrides?: CallOverrides): Promise<string>;

    delegate(overrides?: CallOverrides): Promise<string>;

    delegatee(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

    denominatedOracleFactory(overrides?: CallOverrides): Promise<string>;

    deployer(overrides?: CallOverrides): Promise<string>;

    globalSettlement(overrides?: CallOverrides): Promise<string>;

    globalSettlementActions(overrides?: CallOverrides): Promise<string>;

    governor(overrides?: CallOverrides): Promise<string>;

    liquidationEngine(overrides?: CallOverrides): Promise<string>;

    liquidationJob(overrides?: CallOverrides): Promise<string>;

    oracleJob(overrides?: CallOverrides): Promise<string>;

    oracleRelayer(overrides?: CallOverrides): Promise<string>;

    parysDelegatee(overrides?: CallOverrides): Promise<string>;

    parysGovernor(overrides?: CallOverrides): Promise<string>;

    pidController(overrides?: CallOverrides): Promise<string>;

    pidRateSetter(overrides?: CallOverrides): Promise<string>;

    postSettlementSurplusAuctionHouse(
      overrides?: CallOverrides
    ): Promise<string>;

    postSettlementSurplusBidActions(overrides?: CallOverrides): Promise<string>;

    protocolToken(overrides?: CallOverrides): Promise<string>;

    proxyFactory(overrides?: CallOverrides): Promise<string>;

    rewardedActions(overrides?: CallOverrides): Promise<string>;

    safeEngine(overrides?: CallOverrides): Promise<string>;

    safeManager(overrides?: CallOverrides): Promise<string>;

    settlementSurplusAuctioneer(overrides?: CallOverrides): Promise<string>;

    stabilityFeeTreasury(overrides?: CallOverrides): Promise<string>;

    surplusAuctionHouse(overrides?: CallOverrides): Promise<string>;

    surplusBidActions(overrides?: CallOverrides): Promise<string>;

    systemCoin(overrides?: CallOverrides): Promise<string>;

    systemCoinOracle(overrides?: CallOverrides): Promise<string>;

    systemCoinTaxCollector(overrides?: CallOverrides): Promise<string>;

    taxCollector(overrides?: CallOverrides): Promise<string>;

    timelock(overrides?: CallOverrides): Promise<string>;

    tokenDistributor(overrides?: CallOverrides): Promise<string>;

    uniV3RelayerFactory(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    accountingEngine(overrides?: CallOverrides): Promise<BigNumber>;

    accountingJob(overrides?: CallOverrides): Promise<BigNumber>;

    basicActions(overrides?: CallOverrides): Promise<BigNumber>;

    chainlinkRelayerFactory(overrides?: CallOverrides): Promise<BigNumber>;

    coinJoin(overrides?: CallOverrides): Promise<BigNumber>;

    collateral(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    collateralAuctionHouse(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    collateralAuctionHouseFactory(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    collateralBidActions(overrides?: CallOverrides): Promise<BigNumber>;

    collateralJoin(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    collateralJoinFactory(overrides?: CallOverrides): Promise<BigNumber>;

    collateralTypes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    debtAuctionHouse(overrides?: CallOverrides): Promise<BigNumber>;

    debtBidActions(overrides?: CallOverrides): Promise<BigNumber>;

    delayedOracle(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    delayedOracleFactory(overrides?: CallOverrides): Promise<BigNumber>;

    delegate(overrides?: CallOverrides): Promise<BigNumber>;

    delegatee(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    denominatedOracleFactory(overrides?: CallOverrides): Promise<BigNumber>;

    deployer(overrides?: CallOverrides): Promise<BigNumber>;

    globalSettlement(overrides?: CallOverrides): Promise<BigNumber>;

    globalSettlementActions(overrides?: CallOverrides): Promise<BigNumber>;

    governor(overrides?: CallOverrides): Promise<BigNumber>;

    liquidationEngine(overrides?: CallOverrides): Promise<BigNumber>;

    liquidationJob(overrides?: CallOverrides): Promise<BigNumber>;

    oracleJob(overrides?: CallOverrides): Promise<BigNumber>;

    oracleRelayer(overrides?: CallOverrides): Promise<BigNumber>;

    parysDelegatee(overrides?: CallOverrides): Promise<BigNumber>;

    parysGovernor(overrides?: CallOverrides): Promise<BigNumber>;

    pidController(overrides?: CallOverrides): Promise<BigNumber>;

    pidRateSetter(overrides?: CallOverrides): Promise<BigNumber>;

    postSettlementSurplusAuctionHouse(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    postSettlementSurplusBidActions(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    protocolToken(overrides?: CallOverrides): Promise<BigNumber>;

    proxyFactory(overrides?: CallOverrides): Promise<BigNumber>;

    rewardedActions(overrides?: CallOverrides): Promise<BigNumber>;

    safeEngine(overrides?: CallOverrides): Promise<BigNumber>;

    safeManager(overrides?: CallOverrides): Promise<BigNumber>;

    settlementSurplusAuctioneer(overrides?: CallOverrides): Promise<BigNumber>;

    stabilityFeeTreasury(overrides?: CallOverrides): Promise<BigNumber>;

    surplusAuctionHouse(overrides?: CallOverrides): Promise<BigNumber>;

    surplusBidActions(overrides?: CallOverrides): Promise<BigNumber>;

    systemCoin(overrides?: CallOverrides): Promise<BigNumber>;

    systemCoinOracle(overrides?: CallOverrides): Promise<BigNumber>;

    systemCoinTaxCollector(overrides?: CallOverrides): Promise<BigNumber>;

    taxCollector(overrides?: CallOverrides): Promise<BigNumber>;

    timelock(overrides?: CallOverrides): Promise<BigNumber>;

    tokenDistributor(overrides?: CallOverrides): Promise<BigNumber>;

    uniV3RelayerFactory(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    accountingEngine(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    accountingJob(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    basicActions(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    chainlinkRelayerFactory(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    coinJoin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    collateral(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    collateralAuctionHouse(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    collateralAuctionHouseFactory(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    collateralBidActions(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    collateralJoin(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    collateralJoinFactory(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    collateralTypes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    debtAuctionHouse(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    debtBidActions(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    delayedOracle(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    delayedOracleFactory(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    delegate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    delegatee(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    denominatedOracleFactory(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deployer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    globalSettlement(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    globalSettlementActions(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    governor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    liquidationEngine(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    liquidationJob(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    oracleJob(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    oracleRelayer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    parysDelegatee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    parysGovernor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pidController(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pidRateSetter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    postSettlementSurplusAuctionHouse(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    postSettlementSurplusBidActions(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    protocolToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proxyFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardedActions(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    safeEngine(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    safeManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    settlementSurplusAuctioneer(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stabilityFeeTreasury(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    surplusAuctionHouse(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    surplusBidActions(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    systemCoin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    systemCoinOracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    systemCoinTaxCollector(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    taxCollector(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    timelock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenDistributor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    uniV3RelayerFactory(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
