/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  DenominatedOracleFactory,
  DenominatedOracleFactoryInterface,
} from "../DenominatedOracleFactory";

const _abi = [
  {
    type: "constructor",
    inputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "addAuthorization",
    inputs: [
      {
        name: "_account",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "authorizedAccounts",
    inputs: [
      {
        name: "_account",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [
      {
        name: "_authorized",
        type: "bool",
        internalType: "bool",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "authorizedAccounts",
    inputs: [],
    outputs: [
      {
        name: "_accounts",
        type: "address[]",
        internalType: "address[]",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "denominatedOraclesList",
    inputs: [],
    outputs: [
      {
        name: "_denominatedOraclesList",
        type: "address[]",
        internalType: "address[]",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "deployDenominatedOracle",
    inputs: [
      {
        name: "_priceSource",
        type: "address",
        internalType: "contract IBaseOracle",
      },
      {
        name: "_denominationPriceSource",
        type: "address",
        internalType: "contract IBaseOracle",
      },
      {
        name: "_inverted",
        type: "bool",
        internalType: "bool",
      },
    ],
    outputs: [
      {
        name: "_denominatedOracle",
        type: "address",
        internalType: "contract IBaseOracle",
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "removeAuthorization",
    inputs: [
      {
        name: "_account",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "event",
    name: "AddAuthorization",
    inputs: [
      {
        name: "_account",
        type: "address",
        indexed: false,
        internalType: "address",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "NewDenominatedOracle",
    inputs: [
      {
        name: "_denominatedOracle",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "_priceSource",
        type: "address",
        indexed: false,
        internalType: "address",
      },
      {
        name: "_denominationPriceSource",
        type: "address",
        indexed: false,
        internalType: "address",
      },
      {
        name: "_inverted",
        type: "bool",
        indexed: false,
        internalType: "bool",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "RemoveAuthorization",
    inputs: [
      {
        name: "_account",
        type: "address",
        indexed: false,
        internalType: "address",
      },
    ],
    anonymous: false,
  },
  {
    type: "error",
    name: "AlreadyAuthorized",
    inputs: [],
  },
  {
    type: "error",
    name: "NotAuthorized",
    inputs: [],
  },
  {
    type: "error",
    name: "Unauthorized",
    inputs: [],
  },
] as const;

export class DenominatedOracleFactory__factory {
  static readonly abi = _abi;
  static createInterface(): DenominatedOracleFactoryInterface {
    return new utils.Interface(_abi) as DenominatedOracleFactoryInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): DenominatedOracleFactory {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as DenominatedOracleFactory;
  }
}
